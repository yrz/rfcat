                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Jul  5 2014) (Linux)
                                      4 ; This file was generated Mon Jan 30 22:00:42 2017
                                      5 ;--------------------------------------------------------
                                      6 	.module cc1111rf
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _RepeaterStop
                                     13 	.globl _RepeaterStart
                                     14 	.globl _setFreq
                                     15 	.globl _memset
                                     16 	.globl _decAES
                                     17 	.globl _encAES
                                     18 	.globl _padAES
                                     19 	.globl _appInitRf
                                     20 	.globl _usbProcessEvents
                                     21 	.globl _sleepMicros
                                     22 	.globl _USBIF
                                     23 	.globl _MODE
                                     24 	.globl _RE
                                     25 	.globl _SLAVE
                                     26 	.globl _FE
                                     27 	.globl _ERR
                                     28 	.globl _RX_BYTE
                                     29 	.globl _TX_BYTE
                                     30 	.globl _ACTIVE
                                     31 	.globl _B_7
                                     32 	.globl _B_6
                                     33 	.globl _B_5
                                     34 	.globl _B_4
                                     35 	.globl _B_3
                                     36 	.globl _B_2
                                     37 	.globl _B_1
                                     38 	.globl _B_0
                                     39 	.globl _WDTIF
                                     40 	.globl _P1IF
                                     41 	.globl _UTX1IF
                                     42 	.globl _UTX0IF
                                     43 	.globl _P2IF
                                     44 	.globl _ACC_7
                                     45 	.globl _ACC_6
                                     46 	.globl _ACC_5
                                     47 	.globl _ACC_4
                                     48 	.globl _ACC_3
                                     49 	.globl _ACC_2
                                     50 	.globl _ACC_1
                                     51 	.globl _ACC_0
                                     52 	.globl _OVFIM
                                     53 	.globl _T4CH1IF
                                     54 	.globl _T4CH0IF
                                     55 	.globl _T4OVFIF
                                     56 	.globl _T3CH1IF
                                     57 	.globl _T3CH0IF
                                     58 	.globl _T3OVFIF
                                     59 	.globl _CY
                                     60 	.globl _AC
                                     61 	.globl _F0
                                     62 	.globl _RS1
                                     63 	.globl _RS0
                                     64 	.globl _OV
                                     65 	.globl _F1
                                     66 	.globl _P
                                     67 	.globl _STIF
                                     68 	.globl _P0IF
                                     69 	.globl _T4IF
                                     70 	.globl _T3IF
                                     71 	.globl _T2IF
                                     72 	.globl _T1IF
                                     73 	.globl _DMAIF
                                     74 	.globl _P0IE
                                     75 	.globl _T4IE
                                     76 	.globl _T3IE
                                     77 	.globl _T2IE
                                     78 	.globl _T1IE
                                     79 	.globl _DMAIE
                                     80 	.globl _EA
                                     81 	.globl _STIE
                                     82 	.globl _ENCIE
                                     83 	.globl _URX1IE
                                     84 	.globl _URX0IE
                                     85 	.globl _ADCIE
                                     86 	.globl _RFTXRXIE
                                     87 	.globl _P2_7
                                     88 	.globl _P2_6
                                     89 	.globl _P2_5
                                     90 	.globl _P2_4
                                     91 	.globl _P2_3
                                     92 	.globl _P2_2
                                     93 	.globl _P2_1
                                     94 	.globl _P2_0
                                     95 	.globl _ENCIF_1
                                     96 	.globl _ENCIF_0
                                     97 	.globl _P1_7
                                     98 	.globl _P1_6
                                     99 	.globl _P1_5
                                    100 	.globl _P1_4
                                    101 	.globl _P1_3
                                    102 	.globl _P1_2
                                    103 	.globl _P1_1
                                    104 	.globl _P1_0
                                    105 	.globl _URX1IF
                                    106 	.globl _ADCIF
                                    107 	.globl _URX0IF
                                    108 	.globl _IT1
                                    109 	.globl _RFTXRXIF
                                    110 	.globl _IT0
                                    111 	.globl _P0_7
                                    112 	.globl _P0_6
                                    113 	.globl _P0_5
                                    114 	.globl _P0_4
                                    115 	.globl _P0_3
                                    116 	.globl _P0_2
                                    117 	.globl _P0_1
                                    118 	.globl _P0_0
                                    119 	.globl _P2DIR
                                    120 	.globl _P1DIR
                                    121 	.globl _P0DIR
                                    122 	.globl _U1GCR
                                    123 	.globl _U1UCR
                                    124 	.globl _U1BAUD
                                    125 	.globl _U1DBUF
                                    126 	.globl _U1CSR
                                    127 	.globl _P2INP
                                    128 	.globl _P1INP
                                    129 	.globl _P2SEL
                                    130 	.globl _P1SEL
                                    131 	.globl _P0SEL
                                    132 	.globl _ADCCFG
                                    133 	.globl _PERCFG
                                    134 	.globl _B
                                    135 	.globl _T4CC1
                                    136 	.globl _T4CCTL1
                                    137 	.globl _T4CC0
                                    138 	.globl _T4CCTL0
                                    139 	.globl _T4CTL
                                    140 	.globl _T4CNT
                                    141 	.globl _RFIF
                                    142 	.globl _IRCON2
                                    143 	.globl _T1CCTL2
                                    144 	.globl _T1CCTL1
                                    145 	.globl _T1CCTL0
                                    146 	.globl _T1CTL
                                    147 	.globl _T1CNTH
                                    148 	.globl _T1CNTL
                                    149 	.globl _RFST
                                    150 	.globl _ACC
                                    151 	.globl _T1CC2H
                                    152 	.globl _T1CC2L
                                    153 	.globl _T1CC1H
                                    154 	.globl _T1CC1L
                                    155 	.globl _T1CC0H
                                    156 	.globl _T1CC0L
                                    157 	.globl _RFD
                                    158 	.globl _TIMIF
                                    159 	.globl _DMAREQ
                                    160 	.globl _DMAARM
                                    161 	.globl _DMA0CFGH
                                    162 	.globl _DMA0CFGL
                                    163 	.globl _DMA1CFGH
                                    164 	.globl _DMA1CFGL
                                    165 	.globl _DMAIRQ
                                    166 	.globl _PSW
                                    167 	.globl _T3CC1
                                    168 	.globl _T3CCTL1
                                    169 	.globl _T3CC0
                                    170 	.globl _T3CCTL0
                                    171 	.globl _T3CTL
                                    172 	.globl _T3CNT
                                    173 	.globl _WDCTL
                                    174 	.globl __SFRC8
                                    175 	.globl _MEMCTR
                                    176 	.globl _CLKCON
                                    177 	.globl _U0GCR
                                    178 	.globl _U0UCR
                                    179 	.globl __SFRC3
                                    180 	.globl _U0BAUD
                                    181 	.globl _U0DBUF
                                    182 	.globl _IRCON
                                    183 	.globl __SFRBF
                                    184 	.globl _SLEEP
                                    185 	.globl _RNDH
                                    186 	.globl _RNDL
                                    187 	.globl _ADCH
                                    188 	.globl _ADCL
                                    189 	.globl _IP1
                                    190 	.globl _IEN1
                                    191 	.globl __SFRB7
                                    192 	.globl _ADCCON3
                                    193 	.globl _ADCCON2
                                    194 	.globl _ADCCON1
                                    195 	.globl _ENCCS
                                    196 	.globl _ENCDO
                                    197 	.globl _ENCDI
                                    198 	.globl __SFRB0
                                    199 	.globl _FWDATA
                                    200 	.globl _FCTL
                                    201 	.globl _FADDRH
                                    202 	.globl _FADDRL
                                    203 	.globl _FWT
                                    204 	.globl __SFRAA
                                    205 	.globl _IP0
                                    206 	.globl _IEN0
                                    207 	.globl __SFRA7
                                    208 	.globl _WORTIME1
                                    209 	.globl _WORTIME0
                                    210 	.globl _WOREVT1
                                    211 	.globl _WOREVT0
                                    212 	.globl _WORCTRL
                                    213 	.globl _WORIRQ
                                    214 	.globl _P2
                                    215 	.globl __SFR9F
                                    216 	.globl _T2CTL
                                    217 	.globl _T2PR
                                    218 	.globl _T2CT
                                    219 	.globl _S1CON
                                    220 	.globl _IEN2
                                    221 	.globl __SFR99
                                    222 	.globl _S0CON
                                    223 	.globl __SFR97
                                    224 	.globl __SFR96
                                    225 	.globl __SFR95
                                    226 	.globl __SFR94
                                    227 	.globl __XPAGE
                                    228 	.globl _MPAGE
                                    229 	.globl _DPS
                                    230 	.globl _RFIM
                                    231 	.globl _P1
                                    232 	.globl _P0INP
                                    233 	.globl __SFR8E
                                    234 	.globl _P1IEN
                                    235 	.globl _PICTL
                                    236 	.globl _P2IFG
                                    237 	.globl _P1IFG
                                    238 	.globl _P0IFG
                                    239 	.globl _TCON
                                    240 	.globl _PCON
                                    241 	.globl _U0CSR
                                    242 	.globl _DPH1
                                    243 	.globl _DPL1
                                    244 	.globl _DPH0
                                    245 	.globl _DPL0
                                    246 	.globl _SP
                                    247 	.globl _P0
                                    248 	.globl _bRepeatMode
                                    249 	.globl _rfAmpMode
                                    250 	.globl _rfAESMode
                                    251 	.globl _rfTxInfMode
                                    252 	.globl _rfTxTotalTXLen
                                    253 	.globl _rfTxRepeatOffset
                                    254 	.globl _rfTxRepeatLen
                                    255 	.globl _rfTxBufferEnd
                                    256 	.globl _rfTxRepeatCounter
                                    257 	.globl _rfTxCounter
                                    258 	.globl _rfTxBufCount
                                    259 	.globl _rfTxCurBufIdx
                                    260 	.globl _rfRxLargeLen
                                    261 	.globl _rfRxTotalRXLen
                                    262 	.globl _rfRxInfMode
                                    263 	.globl _byte_shuffle_PARM_3
                                    264 	.globl _byte_shuffle_PARM_2
                                    265 	.globl _transmit_PARM_4
                                    266 	.globl _transmit_PARM_3
                                    267 	.globl _transmit_PARM_2
                                    268 	.globl _macdata
                                    269 	.globl _rf_tLastRecv
                                    270 	.globl _rf_MAC_timer
                                    271 	.globl _rf_status
                                    272 	.globl _txTotal
                                    273 	.globl _rftxbuf
                                    274 	.globl _rfRxProcessed
                                    275 	.globl _rfRxCounter
                                    276 	.globl _rfrxbuf
                                    277 	.globl _rfRxCurrentBuffer
                                    278 	.globl _USBF5
                                    279 	.globl _USBF4
                                    280 	.globl _USBF3
                                    281 	.globl _USBF2
                                    282 	.globl _USBF1
                                    283 	.globl _USBF0
                                    284 	.globl _USBCNTH
                                    285 	.globl _USBCNTL
                                    286 	.globl _USBCNT0
                                    287 	.globl _USBCSOH
                                    288 	.globl _USBCSOL
                                    289 	.globl _USBMAXO
                                    290 	.globl _USBCSIH
                                    291 	.globl _USBCSIL
                                    292 	.globl _USBCS0
                                    293 	.globl _USBMAXI
                                    294 	.globl _USBINDEX
                                    295 	.globl _USBFRMH
                                    296 	.globl _USBFRML
                                    297 	.globl _USBCIE
                                    298 	.globl _USBOIE
                                    299 	.globl _USBIIE
                                    300 	.globl _USBCIF
                                    301 	.globl _USBOIF
                                    302 	.globl _USBIIF
                                    303 	.globl _USBPOW
                                    304 	.globl _USBADDR
                                    305 	.globl _X_P2DIR
                                    306 	.globl _X_P1DIR
                                    307 	.globl _X_P0DIR
                                    308 	.globl _X_U1GCR
                                    309 	.globl _X_U1UCR
                                    310 	.globl _X_U1BAUD
                                    311 	.globl _X_U1DBUF
                                    312 	.globl _X_U1CSR
                                    313 	.globl _X_P2INP
                                    314 	.globl _X_P1INP
                                    315 	.globl _X_P2SEL
                                    316 	.globl _X_P1SEL
                                    317 	.globl _X_P0SEL
                                    318 	.globl _X_ADCCFG
                                    319 	.globl _X_PERCFG
                                    320 	.globl __NA_B
                                    321 	.globl _X_T4CC1
                                    322 	.globl _X_T4CCTL1
                                    323 	.globl _X_T4CC0
                                    324 	.globl _X_T4CCTL0
                                    325 	.globl _X_T4CTL
                                    326 	.globl _X_T4CNT
                                    327 	.globl _X_RFIF
                                    328 	.globl __NA_IRCON2
                                    329 	.globl _X_T1CCTL2
                                    330 	.globl _X_T1CCTL1
                                    331 	.globl _X_T1CCTL0
                                    332 	.globl _X_T1CTL
                                    333 	.globl _X_T1CNTH
                                    334 	.globl _X_T1CNTL
                                    335 	.globl _X_RFST
                                    336 	.globl __NA_ACC
                                    337 	.globl _X_T1CC2H
                                    338 	.globl _X_T1CC2L
                                    339 	.globl _X_T1CC1H
                                    340 	.globl _X_T1CC1L
                                    341 	.globl _X_T1CC0H
                                    342 	.globl _X_T1CC0L
                                    343 	.globl _X_RFD
                                    344 	.globl _X_TIMIF
                                    345 	.globl _X_DMAREQ
                                    346 	.globl _X_DMAARM
                                    347 	.globl _X_DMA0CFGH
                                    348 	.globl _X_DMA0CFGL
                                    349 	.globl _X_DMA1CFGH
                                    350 	.globl _X_DMA1CFGL
                                    351 	.globl _X_DMAIRQ
                                    352 	.globl __NA_PSW
                                    353 	.globl _X_T3CC1
                                    354 	.globl _X_T3CCTL1
                                    355 	.globl _X_T3CC0
                                    356 	.globl _X_T3CCTL0
                                    357 	.globl _X_T3CTL
                                    358 	.globl _X_T3CNT
                                    359 	.globl _X_WDCTL
                                    360 	.globl __X_SFRC8
                                    361 	.globl _X_MEMCTR
                                    362 	.globl _X_CLKCON
                                    363 	.globl _X_U0GCR
                                    364 	.globl _X_U0UCR
                                    365 	.globl __X_SFRC3
                                    366 	.globl _X_U0BAUD
                                    367 	.globl _X_U0DBUF
                                    368 	.globl __NA_IRCON
                                    369 	.globl __X_SFRBF
                                    370 	.globl _X_SLEEP
                                    371 	.globl _X_RNDH
                                    372 	.globl _X_RNDL
                                    373 	.globl _X_ADCH
                                    374 	.globl _X_ADCL
                                    375 	.globl __NA_IP1
                                    376 	.globl __NA_IEN1
                                    377 	.globl __X_SFRB7
                                    378 	.globl _X_ADCCON3
                                    379 	.globl _X_ADCCON2
                                    380 	.globl _X_ADCCON1
                                    381 	.globl _X_ENCCS
                                    382 	.globl _X_ENCDO
                                    383 	.globl _X_ENCDI
                                    384 	.globl __X_SFRB0
                                    385 	.globl _X_FWDATA
                                    386 	.globl _X_FCTL
                                    387 	.globl _X_FADDRH
                                    388 	.globl _X_FADDRL
                                    389 	.globl _X_FWT
                                    390 	.globl __X_SFRAA
                                    391 	.globl __NA_IP0
                                    392 	.globl __NA_IEN0
                                    393 	.globl __X_SFRA7
                                    394 	.globl _X_WORTIME1
                                    395 	.globl _X_WORTIME0
                                    396 	.globl _X_WOREVT1
                                    397 	.globl _X_WOREVT0
                                    398 	.globl _X_WORCTRL
                                    399 	.globl _X_WORIRQ
                                    400 	.globl __NA_P2
                                    401 	.globl __X_SFR9F
                                    402 	.globl _X_T2CTL
                                    403 	.globl _X_T2PR
                                    404 	.globl _X_T2CT
                                    405 	.globl __NA_S1CON
                                    406 	.globl __NA_IEN2
                                    407 	.globl __X_SFR99
                                    408 	.globl __NA_S0CON
                                    409 	.globl __X_SFR97
                                    410 	.globl __X_SFR96
                                    411 	.globl __X_SFR95
                                    412 	.globl __X_SFR94
                                    413 	.globl _X_MPAGE
                                    414 	.globl __NA_DPS
                                    415 	.globl _X_RFIM
                                    416 	.globl __NA_P1
                                    417 	.globl _X_P0INP
                                    418 	.globl __X_SFR8E
                                    419 	.globl _X_P1IEN
                                    420 	.globl _X_PICTL
                                    421 	.globl _X_P2IFG
                                    422 	.globl _X_P1IFG
                                    423 	.globl _X_P0IFG
                                    424 	.globl __NA_TCON
                                    425 	.globl __NA_PCON
                                    426 	.globl _X_U0CSR
                                    427 	.globl __NA_DPH1
                                    428 	.globl __NA_DPL1
                                    429 	.globl __NA_DPH0
                                    430 	.globl __NA_DPL0
                                    431 	.globl __NA_SP
                                    432 	.globl __NA_P0
                                    433 	.globl _I2SCLKF2
                                    434 	.globl _I2SCLKF1
                                    435 	.globl _I2SCLKF0
                                    436 	.globl _I2SSTAT
                                    437 	.globl _I2SWCNT
                                    438 	.globl _I2SDATH
                                    439 	.globl _I2SDATL
                                    440 	.globl _I2SCFG1
                                    441 	.globl _I2SCFG0
                                    442 	.globl _VCO_VC_DAC
                                    443 	.globl _PKTSTATUS
                                    444 	.globl _MARCSTATE
                                    445 	.globl _RSSI
                                    446 	.globl _LQI
                                    447 	.globl _FREQEST
                                    448 	.globl _VERSION
                                    449 	.globl _PARTNUM
                                    450 	.globl __XREGDF35
                                    451 	.globl __XREGDF34
                                    452 	.globl __XREGDF33
                                    453 	.globl __XREGDF32
                                    454 	.globl _IOCFG0
                                    455 	.globl _IOCFG1
                                    456 	.globl _IOCFG2
                                    457 	.globl _PA_TABLE0
                                    458 	.globl _PA_TABLE1
                                    459 	.globl _PA_TABLE2
                                    460 	.globl _PA_TABLE3
                                    461 	.globl _PA_TABLE4
                                    462 	.globl _PA_TABLE5
                                    463 	.globl _PA_TABLE6
                                    464 	.globl _PA_TABLE7
                                    465 	.globl __XREGDF26
                                    466 	.globl _TEST0
                                    467 	.globl _TEST1
                                    468 	.globl _TEST2
                                    469 	.globl __XREGDF22
                                    470 	.globl __XREGDF21
                                    471 	.globl __XREGDF20
                                    472 	.globl _FSCAL0
                                    473 	.globl _FSCAL1
                                    474 	.globl _FSCAL2
                                    475 	.globl _FSCAL3
                                    476 	.globl _FREND0
                                    477 	.globl _FREND1
                                    478 	.globl _AGCCTRL0
                                    479 	.globl _AGCCTRL1
                                    480 	.globl _AGCCTRL2
                                    481 	.globl _BSCFG
                                    482 	.globl _FOCCFG
                                    483 	.globl _MCSM0
                                    484 	.globl _MCSM1
                                    485 	.globl _MCSM2
                                    486 	.globl _DEVIATN
                                    487 	.globl _MDMCFG0
                                    488 	.globl _MDMCFG1
                                    489 	.globl _MDMCFG2
                                    490 	.globl _MDMCFG3
                                    491 	.globl _MDMCFG4
                                    492 	.globl _FREQ0
                                    493 	.globl _FREQ1
                                    494 	.globl _FREQ2
                                    495 	.globl _FSCTRL0
                                    496 	.globl _FSCTRL1
                                    497 	.globl _CHANNR
                                    498 	.globl _ADDR
                                    499 	.globl _PKTCTRL0
                                    500 	.globl _PKTCTRL1
                                    501 	.globl _PKTLEN
                                    502 	.globl _SYNC0
                                    503 	.globl _SYNC1
                                    504 	.globl _MDMCTRL0H
                                    505 	.globl _rfif
                                    506 	.globl _resetRFSTATE
                                    507 	.globl _RxMode
                                    508 	.globl _TxMode
                                    509 	.globl _IdleMode
                                    510 	.globl _init_RF
                                    511 	.globl _waitRSSI
                                    512 	.globl _transmit
                                    513 	.globl _startRX
                                    514 	.globl _rfTxRxIntHandler
                                    515 	.globl _rfIntHandler
                                    516 	.globl _byte_shuffle
                                    517 ;--------------------------------------------------------
                                    518 ; special function registers
                                    519 ;--------------------------------------------------------
                                    520 	.area RSEG    (ABS,DATA)
      000000                        521 	.org 0x0000
                           000080   522 _P0	=	0x0080
                           000081   523 _SP	=	0x0081
                           000082   524 _DPL0	=	0x0082
                           000083   525 _DPH0	=	0x0083
                           000084   526 _DPL1	=	0x0084
                           000085   527 _DPH1	=	0x0085
                           000086   528 _U0CSR	=	0x0086
                           000087   529 _PCON	=	0x0087
                           000088   530 _TCON	=	0x0088
                           000089   531 _P0IFG	=	0x0089
                           00008A   532 _P1IFG	=	0x008a
                           00008B   533 _P2IFG	=	0x008b
                           00008C   534 _PICTL	=	0x008c
                           00008D   535 _P1IEN	=	0x008d
                           00008E   536 __SFR8E	=	0x008e
                           00008F   537 _P0INP	=	0x008f
                           000090   538 _P1	=	0x0090
                           000091   539 _RFIM	=	0x0091
                           000092   540 _DPS	=	0x0092
                           000093   541 _MPAGE	=	0x0093
                           000093   542 __XPAGE	=	0x0093
                           000094   543 __SFR94	=	0x0094
                           000095   544 __SFR95	=	0x0095
                           000096   545 __SFR96	=	0x0096
                           000097   546 __SFR97	=	0x0097
                           000098   547 _S0CON	=	0x0098
                           000099   548 __SFR99	=	0x0099
                           00009A   549 _IEN2	=	0x009a
                           00009B   550 _S1CON	=	0x009b
                           00009C   551 _T2CT	=	0x009c
                           00009D   552 _T2PR	=	0x009d
                           00009E   553 _T2CTL	=	0x009e
                           00009F   554 __SFR9F	=	0x009f
                           0000A0   555 _P2	=	0x00a0
                           0000A1   556 _WORIRQ	=	0x00a1
                           0000A2   557 _WORCTRL	=	0x00a2
                           0000A3   558 _WOREVT0	=	0x00a3
                           0000A4   559 _WOREVT1	=	0x00a4
                           0000A5   560 _WORTIME0	=	0x00a5
                           0000A6   561 _WORTIME1	=	0x00a6
                           0000A7   562 __SFRA7	=	0x00a7
                           0000A8   563 _IEN0	=	0x00a8
                           0000A9   564 _IP0	=	0x00a9
                           0000AA   565 __SFRAA	=	0x00aa
                           0000AB   566 _FWT	=	0x00ab
                           0000AC   567 _FADDRL	=	0x00ac
                           0000AD   568 _FADDRH	=	0x00ad
                           0000AE   569 _FCTL	=	0x00ae
                           0000AF   570 _FWDATA	=	0x00af
                           0000B0   571 __SFRB0	=	0x00b0
                           0000B1   572 _ENCDI	=	0x00b1
                           0000B2   573 _ENCDO	=	0x00b2
                           0000B3   574 _ENCCS	=	0x00b3
                           0000B4   575 _ADCCON1	=	0x00b4
                           0000B5   576 _ADCCON2	=	0x00b5
                           0000B6   577 _ADCCON3	=	0x00b6
                           0000B7   578 __SFRB7	=	0x00b7
                           0000B8   579 _IEN1	=	0x00b8
                           0000B9   580 _IP1	=	0x00b9
                           0000BA   581 _ADCL	=	0x00ba
                           0000BB   582 _ADCH	=	0x00bb
                           0000BC   583 _RNDL	=	0x00bc
                           0000BD   584 _RNDH	=	0x00bd
                           0000BE   585 _SLEEP	=	0x00be
                           0000BF   586 __SFRBF	=	0x00bf
                           0000C0   587 _IRCON	=	0x00c0
                           0000C1   588 _U0DBUF	=	0x00c1
                           0000C2   589 _U0BAUD	=	0x00c2
                           0000C3   590 __SFRC3	=	0x00c3
                           0000C4   591 _U0UCR	=	0x00c4
                           0000C5   592 _U0GCR	=	0x00c5
                           0000C6   593 _CLKCON	=	0x00c6
                           0000C7   594 _MEMCTR	=	0x00c7
                           0000C8   595 __SFRC8	=	0x00c8
                           0000C9   596 _WDCTL	=	0x00c9
                           0000CA   597 _T3CNT	=	0x00ca
                           0000CB   598 _T3CTL	=	0x00cb
                           0000CC   599 _T3CCTL0	=	0x00cc
                           0000CD   600 _T3CC0	=	0x00cd
                           0000CE   601 _T3CCTL1	=	0x00ce
                           0000CF   602 _T3CC1	=	0x00cf
                           0000D0   603 _PSW	=	0x00d0
                           0000D1   604 _DMAIRQ	=	0x00d1
                           0000D2   605 _DMA1CFGL	=	0x00d2
                           0000D3   606 _DMA1CFGH	=	0x00d3
                           0000D4   607 _DMA0CFGL	=	0x00d4
                           0000D5   608 _DMA0CFGH	=	0x00d5
                           0000D6   609 _DMAARM	=	0x00d6
                           0000D7   610 _DMAREQ	=	0x00d7
                           0000D8   611 _TIMIF	=	0x00d8
                           0000D9   612 _RFD	=	0x00d9
                           0000DA   613 _T1CC0L	=	0x00da
                           0000DB   614 _T1CC0H	=	0x00db
                           0000DC   615 _T1CC1L	=	0x00dc
                           0000DD   616 _T1CC1H	=	0x00dd
                           0000DE   617 _T1CC2L	=	0x00de
                           0000DF   618 _T1CC2H	=	0x00df
                           0000E0   619 _ACC	=	0x00e0
                           0000E1   620 _RFST	=	0x00e1
                           0000E2   621 _T1CNTL	=	0x00e2
                           0000E3   622 _T1CNTH	=	0x00e3
                           0000E4   623 _T1CTL	=	0x00e4
                           0000E5   624 _T1CCTL0	=	0x00e5
                           0000E6   625 _T1CCTL1	=	0x00e6
                           0000E7   626 _T1CCTL2	=	0x00e7
                           0000E8   627 _IRCON2	=	0x00e8
                           0000E9   628 _RFIF	=	0x00e9
                           0000EA   629 _T4CNT	=	0x00ea
                           0000EB   630 _T4CTL	=	0x00eb
                           0000EC   631 _T4CCTL0	=	0x00ec
                           0000ED   632 _T4CC0	=	0x00ed
                           0000EE   633 _T4CCTL1	=	0x00ee
                           0000EF   634 _T4CC1	=	0x00ef
                           0000F0   635 _B	=	0x00f0
                           0000F1   636 _PERCFG	=	0x00f1
                           0000F2   637 _ADCCFG	=	0x00f2
                           0000F3   638 _P0SEL	=	0x00f3
                           0000F4   639 _P1SEL	=	0x00f4
                           0000F5   640 _P2SEL	=	0x00f5
                           0000F6   641 _P1INP	=	0x00f6
                           0000F7   642 _P2INP	=	0x00f7
                           0000F8   643 _U1CSR	=	0x00f8
                           0000F9   644 _U1DBUF	=	0x00f9
                           0000FA   645 _U1BAUD	=	0x00fa
                           0000FB   646 _U1UCR	=	0x00fb
                           0000FC   647 _U1GCR	=	0x00fc
                           0000FD   648 _P0DIR	=	0x00fd
                           0000FE   649 _P1DIR	=	0x00fe
                           0000FF   650 _P2DIR	=	0x00ff
                                    651 ;--------------------------------------------------------
                                    652 ; special function bits
                                    653 ;--------------------------------------------------------
                                    654 	.area RSEG    (ABS,DATA)
      000000                        655 	.org 0x0000
                           000080   656 _P0_0	=	0x0080
                           000081   657 _P0_1	=	0x0081
                           000082   658 _P0_2	=	0x0082
                           000083   659 _P0_3	=	0x0083
                           000084   660 _P0_4	=	0x0084
                           000085   661 _P0_5	=	0x0085
                           000086   662 _P0_6	=	0x0086
                           000087   663 _P0_7	=	0x0087
                           000088   664 _IT0	=	0x0088
                           000089   665 _RFTXRXIF	=	0x0089
                           00008A   666 _IT1	=	0x008a
                           00008B   667 _URX0IF	=	0x008b
                           00008D   668 _ADCIF	=	0x008d
                           00008F   669 _URX1IF	=	0x008f
                           000090   670 _P1_0	=	0x0090
                           000091   671 _P1_1	=	0x0091
                           000092   672 _P1_2	=	0x0092
                           000093   673 _P1_3	=	0x0093
                           000094   674 _P1_4	=	0x0094
                           000095   675 _P1_5	=	0x0095
                           000096   676 _P1_6	=	0x0096
                           000097   677 _P1_7	=	0x0097
                           000098   678 _ENCIF_0	=	0x0098
                           000099   679 _ENCIF_1	=	0x0099
                           0000A0   680 _P2_0	=	0x00a0
                           0000A1   681 _P2_1	=	0x00a1
                           0000A2   682 _P2_2	=	0x00a2
                           0000A3   683 _P2_3	=	0x00a3
                           0000A4   684 _P2_4	=	0x00a4
                           0000A5   685 _P2_5	=	0x00a5
                           0000A6   686 _P2_6	=	0x00a6
                           0000A7   687 _P2_7	=	0x00a7
                           0000A8   688 _RFTXRXIE	=	0x00a8
                           0000A9   689 _ADCIE	=	0x00a9
                           0000AA   690 _URX0IE	=	0x00aa
                           0000AB   691 _URX1IE	=	0x00ab
                           0000AC   692 _ENCIE	=	0x00ac
                           0000AD   693 _STIE	=	0x00ad
                           0000AF   694 _EA	=	0x00af
                           0000B8   695 _DMAIE	=	0x00b8
                           0000B9   696 _T1IE	=	0x00b9
                           0000BA   697 _T2IE	=	0x00ba
                           0000BB   698 _T3IE	=	0x00bb
                           0000BC   699 _T4IE	=	0x00bc
                           0000BD   700 _P0IE	=	0x00bd
                           0000C0   701 _DMAIF	=	0x00c0
                           0000C1   702 _T1IF	=	0x00c1
                           0000C2   703 _T2IF	=	0x00c2
                           0000C3   704 _T3IF	=	0x00c3
                           0000C4   705 _T4IF	=	0x00c4
                           0000C5   706 _P0IF	=	0x00c5
                           0000C7   707 _STIF	=	0x00c7
                           0000D0   708 _P	=	0x00d0
                           0000D1   709 _F1	=	0x00d1
                           0000D2   710 _OV	=	0x00d2
                           0000D3   711 _RS0	=	0x00d3
                           0000D4   712 _RS1	=	0x00d4
                           0000D5   713 _F0	=	0x00d5
                           0000D6   714 _AC	=	0x00d6
                           0000D7   715 _CY	=	0x00d7
                           0000D8   716 _T3OVFIF	=	0x00d8
                           0000D9   717 _T3CH0IF	=	0x00d9
                           0000DA   718 _T3CH1IF	=	0x00da
                           0000DB   719 _T4OVFIF	=	0x00db
                           0000DC   720 _T4CH0IF	=	0x00dc
                           0000DD   721 _T4CH1IF	=	0x00dd
                           0000DE   722 _OVFIM	=	0x00de
                           0000E0   723 _ACC_0	=	0x00e0
                           0000E1   724 _ACC_1	=	0x00e1
                           0000E2   725 _ACC_2	=	0x00e2
                           0000E3   726 _ACC_3	=	0x00e3
                           0000E4   727 _ACC_4	=	0x00e4
                           0000E5   728 _ACC_5	=	0x00e5
                           0000E6   729 _ACC_6	=	0x00e6
                           0000E7   730 _ACC_7	=	0x00e7
                           0000E8   731 _P2IF	=	0x00e8
                           0000E9   732 _UTX0IF	=	0x00e9
                           0000EA   733 _UTX1IF	=	0x00ea
                           0000EB   734 _P1IF	=	0x00eb
                           0000EC   735 _WDTIF	=	0x00ec
                           0000F0   736 _B_0	=	0x00f0
                           0000F1   737 _B_1	=	0x00f1
                           0000F2   738 _B_2	=	0x00f2
                           0000F3   739 _B_3	=	0x00f3
                           0000F4   740 _B_4	=	0x00f4
                           0000F5   741 _B_5	=	0x00f5
                           0000F6   742 _B_6	=	0x00f6
                           0000F7   743 _B_7	=	0x00f7
                           0000F8   744 _ACTIVE	=	0x00f8
                           0000F9   745 _TX_BYTE	=	0x00f9
                           0000FA   746 _RX_BYTE	=	0x00fa
                           0000FB   747 _ERR	=	0x00fb
                           0000FC   748 _FE	=	0x00fc
                           0000FD   749 _SLAVE	=	0x00fd
                           0000FE   750 _RE	=	0x00fe
                           0000FF   751 _MODE	=	0x00ff
                           0000E8   752 _USBIF	=	0x00e8
                                    753 ;--------------------------------------------------------
                                    754 ; overlayable register banks
                                    755 ;--------------------------------------------------------
                                    756 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        757 	.ds 8
                                    758 ;--------------------------------------------------------
                                    759 ; overlayable bit register bank
                                    760 ;--------------------------------------------------------
                                    761 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        762 bits:
      000000                        763 	.ds 1
                           008000   764 	b0 = bits[0]
                           008100   765 	b1 = bits[1]
                           008200   766 	b2 = bits[2]
                           008300   767 	b3 = bits[3]
                           008400   768 	b4 = bits[4]
                           008500   769 	b5 = bits[5]
                           008600   770 	b6 = bits[6]
                           008700   771 	b7 = bits[7]
                                    772 ;--------------------------------------------------------
                                    773 ; internal ram data
                                    774 ;--------------------------------------------------------
                                    775 	.area DSEG    (DATA)
      000000                        776 _rfif::
      000000                        777 	.ds 1
      000001                        778 _transmit_sloc0_1_0:
      000001                        779 	.ds 2
      000003                        780 _rfIntHandler_encoffset_1_136:
      000003                        781 	.ds 1
                                    782 ;--------------------------------------------------------
                                    783 ; overlayable items in internal ram 
                                    784 ;--------------------------------------------------------
                                    785 ;--------------------------------------------------------
                                    786 ; indirectly addressable internal ram data
                                    787 ;--------------------------------------------------------
                                    788 	.area ISEG    (DATA)
                                    789 ;--------------------------------------------------------
                                    790 ; absolute internal ram data
                                    791 ;--------------------------------------------------------
                                    792 	.area IABS    (ABS,DATA)
                                    793 	.area IABS    (ABS,DATA)
                                    794 ;--------------------------------------------------------
                                    795 ; bit data
                                    796 ;--------------------------------------------------------
                                    797 	.area BSEG    (BIT)
                                    798 ;--------------------------------------------------------
                                    799 ; paged external ram data
                                    800 ;--------------------------------------------------------
                                    801 	.area PSEG    (PAG,XDATA)
                                    802 ;--------------------------------------------------------
                                    803 ; external ram data
                                    804 ;--------------------------------------------------------
                                    805 	.area XSEG    (XDATA)
                           00DF02   806 _MDMCTRL0H	=	0xdf02
                           00DF00   807 _SYNC1	=	0xdf00
                           00DF01   808 _SYNC0	=	0xdf01
                           00DF02   809 _PKTLEN	=	0xdf02
                           00DF03   810 _PKTCTRL1	=	0xdf03
                           00DF04   811 _PKTCTRL0	=	0xdf04
                           00DF05   812 _ADDR	=	0xdf05
                           00DF06   813 _CHANNR	=	0xdf06
                           00DF07   814 _FSCTRL1	=	0xdf07
                           00DF08   815 _FSCTRL0	=	0xdf08
                           00DF09   816 _FREQ2	=	0xdf09
                           00DF0A   817 _FREQ1	=	0xdf0a
                           00DF0B   818 _FREQ0	=	0xdf0b
                           00DF0C   819 _MDMCFG4	=	0xdf0c
                           00DF0D   820 _MDMCFG3	=	0xdf0d
                           00DF0E   821 _MDMCFG2	=	0xdf0e
                           00DF0F   822 _MDMCFG1	=	0xdf0f
                           00DF10   823 _MDMCFG0	=	0xdf10
                           00DF11   824 _DEVIATN	=	0xdf11
                           00DF12   825 _MCSM2	=	0xdf12
                           00DF13   826 _MCSM1	=	0xdf13
                           00DF14   827 _MCSM0	=	0xdf14
                           00DF15   828 _FOCCFG	=	0xdf15
                           00DF16   829 _BSCFG	=	0xdf16
                           00DF17   830 _AGCCTRL2	=	0xdf17
                           00DF18   831 _AGCCTRL1	=	0xdf18
                           00DF19   832 _AGCCTRL0	=	0xdf19
                           00DF1A   833 _FREND1	=	0xdf1a
                           00DF1B   834 _FREND0	=	0xdf1b
                           00DF1C   835 _FSCAL3	=	0xdf1c
                           00DF1D   836 _FSCAL2	=	0xdf1d
                           00DF1E   837 _FSCAL1	=	0xdf1e
                           00DF1F   838 _FSCAL0	=	0xdf1f
                           00DF20   839 __XREGDF20	=	0xdf20
                           00DF21   840 __XREGDF21	=	0xdf21
                           00DF22   841 __XREGDF22	=	0xdf22
                           00DF23   842 _TEST2	=	0xdf23
                           00DF24   843 _TEST1	=	0xdf24
                           00DF25   844 _TEST0	=	0xdf25
                           00DF26   845 __XREGDF26	=	0xdf26
                           00DF27   846 _PA_TABLE7	=	0xdf27
                           00DF28   847 _PA_TABLE6	=	0xdf28
                           00DF29   848 _PA_TABLE5	=	0xdf29
                           00DF2A   849 _PA_TABLE4	=	0xdf2a
                           00DF2B   850 _PA_TABLE3	=	0xdf2b
                           00DF2C   851 _PA_TABLE2	=	0xdf2c
                           00DF2D   852 _PA_TABLE1	=	0xdf2d
                           00DF2E   853 _PA_TABLE0	=	0xdf2e
                           00DF2F   854 _IOCFG2	=	0xdf2f
                           00DF30   855 _IOCFG1	=	0xdf30
                           00DF31   856 _IOCFG0	=	0xdf31
                           00DF32   857 __XREGDF32	=	0xdf32
                           00DF33   858 __XREGDF33	=	0xdf33
                           00DF34   859 __XREGDF34	=	0xdf34
                           00DF35   860 __XREGDF35	=	0xdf35
                           00DF36   861 _PARTNUM	=	0xdf36
                           00DF37   862 _VERSION	=	0xdf37
                           00DF38   863 _FREQEST	=	0xdf38
                           00DF39   864 _LQI	=	0xdf39
                           00DF3A   865 _RSSI	=	0xdf3a
                           00DF3B   866 _MARCSTATE	=	0xdf3b
                           00DF3C   867 _PKTSTATUS	=	0xdf3c
                           00DF3D   868 _VCO_VC_DAC	=	0xdf3d
                           00DF40   869 _I2SCFG0	=	0xdf40
                           00DF41   870 _I2SCFG1	=	0xdf41
                           00DF42   871 _I2SDATL	=	0xdf42
                           00DF43   872 _I2SDATH	=	0xdf43
                           00DF44   873 _I2SWCNT	=	0xdf44
                           00DF45   874 _I2SSTAT	=	0xdf45
                           00DF46   875 _I2SCLKF0	=	0xdf46
                           00DF47   876 _I2SCLKF1	=	0xdf47
                           00DF48   877 _I2SCLKF2	=	0xdf48
                           00DF80   878 __NA_P0	=	0xdf80
                           00DF81   879 __NA_SP	=	0xdf81
                           00DF82   880 __NA_DPL0	=	0xdf82
                           00DF83   881 __NA_DPH0	=	0xdf83
                           00DF84   882 __NA_DPL1	=	0xdf84
                           00DF85   883 __NA_DPH1	=	0xdf85
                           00DF86   884 _X_U0CSR	=	0xdf86
                           00DF87   885 __NA_PCON	=	0xdf87
                           00DF88   886 __NA_TCON	=	0xdf88
                           00DF89   887 _X_P0IFG	=	0xdf89
                           00DF8A   888 _X_P1IFG	=	0xdf8a
                           00DF8B   889 _X_P2IFG	=	0xdf8b
                           00DF8C   890 _X_PICTL	=	0xdf8c
                           00DF8D   891 _X_P1IEN	=	0xdf8d
                           00DF8E   892 __X_SFR8E	=	0xdf8e
                           00DF8F   893 _X_P0INP	=	0xdf8f
                           00DF90   894 __NA_P1	=	0xdf90
                           00DF91   895 _X_RFIM	=	0xdf91
                           00DF92   896 __NA_DPS	=	0xdf92
                           00DF93   897 _X_MPAGE	=	0xdf93
                           00DF94   898 __X_SFR94	=	0xdf94
                           00DF95   899 __X_SFR95	=	0xdf95
                           00DF96   900 __X_SFR96	=	0xdf96
                           00DF97   901 __X_SFR97	=	0xdf97
                           00DF98   902 __NA_S0CON	=	0xdf98
                           00DF99   903 __X_SFR99	=	0xdf99
                           00DF9A   904 __NA_IEN2	=	0xdf9a
                           00DF9B   905 __NA_S1CON	=	0xdf9b
                           00DF9C   906 _X_T2CT	=	0xdf9c
                           00DF9D   907 _X_T2PR	=	0xdf9d
                           00DF9E   908 _X_T2CTL	=	0xdf9e
                           00DF9F   909 __X_SFR9F	=	0xdf9f
                           00DFA0   910 __NA_P2	=	0xdfa0
                           00DFA1   911 _X_WORIRQ	=	0xdfa1
                           00DFA2   912 _X_WORCTRL	=	0xdfa2
                           00DFA3   913 _X_WOREVT0	=	0xdfa3
                           00DFA4   914 _X_WOREVT1	=	0xdfa4
                           00DFA5   915 _X_WORTIME0	=	0xdfa5
                           00DFA6   916 _X_WORTIME1	=	0xdfa6
                           00DFA7   917 __X_SFRA7	=	0xdfa7
                           00DFA8   918 __NA_IEN0	=	0xdfa8
                           00DFA9   919 __NA_IP0	=	0xdfa9
                           00DFAA   920 __X_SFRAA	=	0xdfaa
                           00DFAB   921 _X_FWT	=	0xdfab
                           00DFAC   922 _X_FADDRL	=	0xdfac
                           00DFAD   923 _X_FADDRH	=	0xdfad
                           00DFAE   924 _X_FCTL	=	0xdfae
                           00DFAF   925 _X_FWDATA	=	0xdfaf
                           00DFB0   926 __X_SFRB0	=	0xdfb0
                           00DFB1   927 _X_ENCDI	=	0xdfb1
                           00DFB2   928 _X_ENCDO	=	0xdfb2
                           00DFB3   929 _X_ENCCS	=	0xdfb3
                           00DFB4   930 _X_ADCCON1	=	0xdfb4
                           00DFB5   931 _X_ADCCON2	=	0xdfb5
                           00DFB6   932 _X_ADCCON3	=	0xdfb6
                           00DFB7   933 __X_SFRB7	=	0xdfb7
                           00DFB8   934 __NA_IEN1	=	0xdfb8
                           00DFB9   935 __NA_IP1	=	0xdfb9
                           00DFBA   936 _X_ADCL	=	0xdfba
                           00DFBB   937 _X_ADCH	=	0xdfbb
                           00DFBC   938 _X_RNDL	=	0xdfbc
                           00DFBD   939 _X_RNDH	=	0xdfbd
                           00DFBE   940 _X_SLEEP	=	0xdfbe
                           00DFBF   941 __X_SFRBF	=	0xdfbf
                           00DFC0   942 __NA_IRCON	=	0xdfc0
                           00DFC1   943 _X_U0DBUF	=	0xdfc1
                           00DFC2   944 _X_U0BAUD	=	0xdfc2
                           00DFC3   945 __X_SFRC3	=	0xdfc3
                           00DFC4   946 _X_U0UCR	=	0xdfc4
                           00DFC5   947 _X_U0GCR	=	0xdfc5
                           00DFC6   948 _X_CLKCON	=	0xdfc6
                           00DFC7   949 _X_MEMCTR	=	0xdfc7
                           00DFC8   950 __X_SFRC8	=	0xdfc8
                           00DFC9   951 _X_WDCTL	=	0xdfc9
                           00DFCA   952 _X_T3CNT	=	0xdfca
                           00DFCB   953 _X_T3CTL	=	0xdfcb
                           00DFCC   954 _X_T3CCTL0	=	0xdfcc
                           00DFCD   955 _X_T3CC0	=	0xdfcd
                           00DFCE   956 _X_T3CCTL1	=	0xdfce
                           00DFCF   957 _X_T3CC1	=	0xdfcf
                           00DFD0   958 __NA_PSW	=	0xdfd0
                           00DFD1   959 _X_DMAIRQ	=	0xdfd1
                           00DFD2   960 _X_DMA1CFGL	=	0xdfd2
                           00DFD3   961 _X_DMA1CFGH	=	0xdfd3
                           00DFD4   962 _X_DMA0CFGL	=	0xdfd4
                           00DFD5   963 _X_DMA0CFGH	=	0xdfd5
                           00DFD6   964 _X_DMAARM	=	0xdfd6
                           00DFD7   965 _X_DMAREQ	=	0xdfd7
                           00DFD8   966 _X_TIMIF	=	0xdfd8
                           00DFD9   967 _X_RFD	=	0xdfd9
                           00DFDA   968 _X_T1CC0L	=	0xdfda
                           00DFDB   969 _X_T1CC0H	=	0xdfdb
                           00DFDC   970 _X_T1CC1L	=	0xdfdc
                           00DFDD   971 _X_T1CC1H	=	0xdfdd
                           00DFDE   972 _X_T1CC2L	=	0xdfde
                           00DFDF   973 _X_T1CC2H	=	0xdfdf
                           00DFE0   974 __NA_ACC	=	0xdfe0
                           00DFE1   975 _X_RFST	=	0xdfe1
                           00DFE2   976 _X_T1CNTL	=	0xdfe2
                           00DFE3   977 _X_T1CNTH	=	0xdfe3
                           00DFE4   978 _X_T1CTL	=	0xdfe4
                           00DFE5   979 _X_T1CCTL0	=	0xdfe5
                           00DFE6   980 _X_T1CCTL1	=	0xdfe6
                           00DFE7   981 _X_T1CCTL2	=	0xdfe7
                           00DFE8   982 __NA_IRCON2	=	0xdfe8
                           00DFE9   983 _X_RFIF	=	0xdfe9
                           00DFEA   984 _X_T4CNT	=	0xdfea
                           00DFEB   985 _X_T4CTL	=	0xdfeb
                           00DFEC   986 _X_T4CCTL0	=	0xdfec
                           00DFED   987 _X_T4CC0	=	0xdfed
                           00DFEE   988 _X_T4CCTL1	=	0xdfee
                           00DFEF   989 _X_T4CC1	=	0xdfef
                           00DFF0   990 __NA_B	=	0xdff0
                           00DFF1   991 _X_PERCFG	=	0xdff1
                           00DFF2   992 _X_ADCCFG	=	0xdff2
                           00DFF3   993 _X_P0SEL	=	0xdff3
                           00DFF4   994 _X_P1SEL	=	0xdff4
                           00DFF5   995 _X_P2SEL	=	0xdff5
                           00DFF6   996 _X_P1INP	=	0xdff6
                           00DFF7   997 _X_P2INP	=	0xdff7
                           00DFF8   998 _X_U1CSR	=	0xdff8
                           00DFF9   999 _X_U1DBUF	=	0xdff9
                           00DFFA  1000 _X_U1BAUD	=	0xdffa
                           00DFFB  1001 _X_U1UCR	=	0xdffb
                           00DFFC  1002 _X_U1GCR	=	0xdffc
                           00DFFD  1003 _X_P0DIR	=	0xdffd
                           00DFFE  1004 _X_P1DIR	=	0xdffe
                           00DFFF  1005 _X_P2DIR	=	0xdfff
                           00DE00  1006 _USBADDR	=	0xde00
                           00DE01  1007 _USBPOW	=	0xde01
                           00DE02  1008 _USBIIF	=	0xde02
                           00DE04  1009 _USBOIF	=	0xde04
                           00DE06  1010 _USBCIF	=	0xde06
                           00DE07  1011 _USBIIE	=	0xde07
                           00DE09  1012 _USBOIE	=	0xde09
                           00DE0B  1013 _USBCIE	=	0xde0b
                           00DE0C  1014 _USBFRML	=	0xde0c
                           00DE0D  1015 _USBFRMH	=	0xde0d
                           00DE0E  1016 _USBINDEX	=	0xde0e
                           00DE10  1017 _USBMAXI	=	0xde10
                           00DE11  1018 _USBCS0	=	0xde11
                           00DE11  1019 _USBCSIL	=	0xde11
                           00DE12  1020 _USBCSIH	=	0xde12
                           00DE13  1021 _USBMAXO	=	0xde13
                           00DE14  1022 _USBCSOL	=	0xde14
                           00DE15  1023 _USBCSOH	=	0xde15
                           00DE16  1024 _USBCNT0	=	0xde16
                           00DE16  1025 _USBCNTL	=	0xde16
                           00DE17  1026 _USBCNTH	=	0xde17
                           00DE20  1027 _USBF0	=	0xde20
                           00DE22  1028 _USBF1	=	0xde22
                           00DE24  1029 _USBF2	=	0xde24
                           00DE26  1030 _USBF3	=	0xde26
                           00DE28  1031 _USBF4	=	0xde28
                           00DE2A  1032 _USBF5	=	0xde2a
      000000                       1033 _rfRxCurrentBuffer::
      000000                       1034 	.ds 1
      000001                       1035 _rfrxbuf::
      000001                       1036 	.ds 1024
      000401                       1037 _rfRxCounter::
      000401                       1038 	.ds 4
      000405                       1039 _rfRxProcessed::
      000405                       1040 	.ds 2
      000407                       1041 _rftxbuf::
      000407                       1042 	.ds 2
      000409                       1043 _txTotal::
      000409                       1044 	.ds 2
      00040B                       1045 _rf_status::
      00040B                       1046 	.ds 1
      00040C                       1047 _rf_MAC_timer::
      00040C                       1048 	.ds 2
      00040E                       1049 _rf_tLastRecv::
      00040E                       1050 	.ds 2
      000410                       1051 _macdata::
      000410                       1052 	.ds 21
      000425                       1053 _transmit_PARM_2:
      000425                       1054 	.ds 2
      000427                       1055 _transmit_PARM_3:
      000427                       1056 	.ds 2
      000429                       1057 _transmit_PARM_4:
      000429                       1058 	.ds 2
      00042B                       1059 _transmit_buf_1_96:
      00042B                       1060 	.ds 2
      00042D                       1061 _transmit_encoffset_1_97:
      00042D                       1062 	.ds 1
      00042E                       1063 _byte_shuffle_PARM_2:
      00042E                       1064 	.ds 2
      000430                       1065 _byte_shuffle_PARM_3:
      000430                       1066 	.ds 2
      000432                       1067 _byte_shuffle_buf_1_146:
      000432                       1068 	.ds 2
                                   1069 ;--------------------------------------------------------
                                   1070 ; absolute external ram data
                                   1071 ;--------------------------------------------------------
                                   1072 	.area XABS    (ABS,XDATA)
                                   1073 ;--------------------------------------------------------
                                   1074 ; external initialized ram data
                                   1075 ;--------------------------------------------------------
                                   1076 	.area XISEG   (XDATA)
      000000                       1077 _rfRxInfMode::
      000000                       1078 	.ds 1
      000001                       1079 _rfRxTotalRXLen::
      000001                       1080 	.ds 2
      000003                       1081 _rfRxLargeLen::
      000003                       1082 	.ds 2
      000005                       1083 _rfTxCurBufIdx::
      000005                       1084 	.ds 1
      000006                       1085 _rfTxBufCount::
      000006                       1086 	.ds 1
      000007                       1087 _rfTxCounter::
      000007                       1088 	.ds 2
      000009                       1089 _rfTxRepeatCounter::
      000009                       1090 	.ds 2
      00000B                       1091 _rfTxBufferEnd::
      00000B                       1092 	.ds 2
      00000D                       1093 _rfTxRepeatLen::
      00000D                       1094 	.ds 2
      00000F                       1095 _rfTxRepeatOffset::
      00000F                       1096 	.ds 2
      000011                       1097 _rfTxTotalTXLen::
      000011                       1098 	.ds 2
      000013                       1099 _rfTxInfMode::
      000013                       1100 	.ds 1
      000014                       1101 _rfAESMode::
      000014                       1102 	.ds 1
      000015                       1103 _rfAmpMode::
      000015                       1104 	.ds 1
      000016                       1105 _bRepeatMode::
      000016                       1106 	.ds 1
                                   1107 	.area HOME    (CODE)
                                   1108 	.area GSINIT0 (CODE)
                                   1109 	.area GSINIT1 (CODE)
                                   1110 	.area GSINIT2 (CODE)
                                   1111 	.area GSINIT3 (CODE)
                                   1112 	.area GSINIT4 (CODE)
                                   1113 	.area GSINIT5 (CODE)
                                   1114 	.area GSINIT  (CODE)
                                   1115 	.area GSFINAL (CODE)
                                   1116 	.area CSEG    (CODE)
                                   1117 ;--------------------------------------------------------
                                   1118 ; global & static initialisations
                                   1119 ;--------------------------------------------------------
                                   1120 	.area HOME    (CODE)
                                   1121 	.area GSINIT  (CODE)
                                   1122 	.area GSFINAL (CODE)
                                   1123 	.area GSINIT  (CODE)
                                   1124 ;--------------------------------------------------------
                                   1125 ; Home
                                   1126 ;--------------------------------------------------------
                                   1127 	.area HOME    (CODE)
                                   1128 	.area HOME    (CODE)
                                   1129 ;--------------------------------------------------------
                                   1130 ; code
                                   1131 ;--------------------------------------------------------
                                   1132 	.area CSEG    (CODE)
                                   1133 ;------------------------------------------------------------
                                   1134 ;Allocation info for local variables in function 'setFreq'
                                   1135 ;------------------------------------------------------------
                                   1136 ;freq                      Allocated to registers r4 r5 r6 r7 
                                   1137 ;num                       Allocated to registers r4 r5 r6 r7 
                                   1138 ;------------------------------------------------------------
                                   1139 ;	cc1111rf.c:56: void setFreq(u32 freq)
                                   1140 ;	-----------------------------------------
                                   1141 ;	 function setFreq
                                   1142 ;	-----------------------------------------
      000000                       1143 _setFreq:
                           000007  1144 	ar7 = 0x07
                           000006  1145 	ar6 = 0x06
                           000005  1146 	ar5 = 0x05
                           000004  1147 	ar4 = 0x04
                           000003  1148 	ar3 = 0x03
                           000002  1149 	ar2 = 0x02
                           000001  1150 	ar1 = 0x01
                           000000  1151 	ar0 = 0x00
                                   1152 ;	cc1111rf.c:61: num = freq * (0x10000 / 1000000.0) / PLATFORM_CLOCK_FREQ;
      000000 12r00r00         [24] 1153 	lcall	___ulong2fs
      000003 AC 82            [24] 1154 	mov	r4,dpl
      000005 AD 83            [24] 1155 	mov	r5,dph
      000007 AE F0            [24] 1156 	mov	r6,b
      000009 FF               [12] 1157 	mov	r7,a
      00000A C0 04            [24] 1158 	push	ar4
      00000C C0 05            [24] 1159 	push	ar5
      00000E C0 06            [24] 1160 	push	ar6
      000010 C0 07            [24] 1161 	push	ar7
      000012 90 37 BD         [24] 1162 	mov	dptr,#0x37BD
      000015 75 F0 86         [24] 1163 	mov	b,#0x86
      000018 74 3D            [12] 1164 	mov	a,#0x3D
      00001A 12r00r00         [24] 1165 	lcall	___fsmul
      00001D AC 82            [24] 1166 	mov	r4,dpl
      00001F AD 83            [24] 1167 	mov	r5,dph
      000021 AE F0            [24] 1168 	mov	r6,b
      000023 FF               [12] 1169 	mov	r7,a
      000024 E5 81            [12] 1170 	mov	a,sp
      000026 24 FC            [12] 1171 	add	a,#0xfc
      000028 F5 81            [12] 1172 	mov	sp,a
      00002A E4               [12] 1173 	clr	a
      00002B C0 E0            [24] 1174 	push	acc
      00002D C0 E0            [24] 1175 	push	acc
      00002F 74 C0            [12] 1176 	mov	a,#0xC0
      000031 C0 E0            [24] 1177 	push	acc
      000033 74 41            [12] 1178 	mov	a,#0x41
      000035 C0 E0            [24] 1179 	push	acc
      000037 8C 82            [24] 1180 	mov	dpl,r4
      000039 8D 83            [24] 1181 	mov	dph,r5
      00003B 8E F0            [24] 1182 	mov	b,r6
      00003D EF               [12] 1183 	mov	a,r7
      00003E 12r00r00         [24] 1184 	lcall	___fsdiv
      000041 AC 82            [24] 1185 	mov	r4,dpl
      000043 AD 83            [24] 1186 	mov	r5,dph
      000045 AE F0            [24] 1187 	mov	r6,b
      000047 FF               [12] 1188 	mov	r7,a
      000048 E5 81            [12] 1189 	mov	a,sp
      00004A 24 FC            [12] 1190 	add	a,#0xfc
      00004C F5 81            [12] 1191 	mov	sp,a
      00004E 8C 82            [24] 1192 	mov	dpl,r4
      000050 8D 83            [24] 1193 	mov	dph,r5
      000052 8E F0            [24] 1194 	mov	b,r6
      000054 EF               [12] 1195 	mov	a,r7
      000055 12r00r00         [24] 1196 	lcall	___fs2ulong
      000058 AC 82            [24] 1197 	mov	r4,dpl
      00005A AD 83            [24] 1198 	mov	r5,dph
      00005C AE F0            [24] 1199 	mov	r6,b
                                   1200 ;	cc1111rf.c:62: FREQ2 = num >> 16;
      00005E 90 DF 09         [24] 1201 	mov	dptr,#_FREQ2
      000061 EE               [12] 1202 	mov	a,r6
      000062 F0               [24] 1203 	movx	@dptr,a
                                   1204 ;	cc1111rf.c:63: FREQ1 = (num>>8) & 0xff;
      000063 8D 03            [24] 1205 	mov	ar3,r5
      000065 90 DF 0A         [24] 1206 	mov	dptr,#_FREQ1
      000068 EB               [12] 1207 	mov	a,r3
      000069 F0               [24] 1208 	movx	@dptr,a
                                   1209 ;	cc1111rf.c:64: FREQ0 = num & 0xff;
      00006A 90 DF 0B         [24] 1210 	mov	dptr,#_FREQ0
      00006D EC               [12] 1211 	mov	a,r4
      00006E F0               [24] 1212 	movx	@dptr,a
      00006F 22               [24] 1213 	ret
                                   1214 ;------------------------------------------------------------
                                   1215 ;Allocation info for local variables in function 'resetRFSTATE'
                                   1216 ;------------------------------------------------------------
                                   1217 ;	cc1111rf.c:67: void resetRFSTATE(void)
                                   1218 ;	-----------------------------------------
                                   1219 ;	 function resetRFSTATE
                                   1220 ;	-----------------------------------------
      000070                       1221 _resetRFSTATE:
                                   1222 ;	cc1111rf.c:70: RFST = RFST_SIDLE; while ((MARCSTATE) != MARC_STATE_IDLE);
      000070 75 E1 04         [24] 1223 	mov	_RFST,#0x04
      000073                       1224 00101$:
      000073 90 DF 3B         [24] 1225 	mov	dptr,#_MARCSTATE
      000076 E0               [24] 1226 	movx	a,@dptr
      000077 FF               [12] 1227 	mov	r7,a
      000078 BF 01 F8         [24] 1228 	cjne	r7,#0x01,00101$
                                   1229 ;	cc1111rf.c:72: RFST = rf_status;
      00007B 90r04r0B         [24] 1230 	mov	dptr,#_rf_status
      00007E E0               [24] 1231 	movx	a,@dptr
      00007F F5 E1            [12] 1232 	mov	_RFST,a
                                   1233 ;	cc1111rf.c:73: while (rf_status != RFST_SIDLE && MARCSTATE == MARC_STATE_IDLE)
      000081                       1234 00105$:
      000081 90r04r0B         [24] 1235 	mov	dptr,#_rf_status
      000084 E0               [24] 1236 	movx	a,@dptr
      000085 FF               [12] 1237 	mov	r7,a
      000086 BF 04 01         [24] 1238 	cjne	r7,#0x04,00124$
      000089 22               [24] 1239 	ret
      00008A                       1240 00124$:
      00008A 90 DF 3B         [24] 1241 	mov	dptr,#_MARCSTATE
      00008D E0               [24] 1242 	movx	a,@dptr
      00008E FF               [12] 1243 	mov	r7,a
      00008F BF 01 02         [24] 1244 	cjne	r7,#0x01,00125$
      000092 80 ED            [24] 1245 	sjmp	00105$
      000094                       1246 00125$:
      000094 22               [24] 1247 	ret
                                   1248 ;------------------------------------------------------------
                                   1249 ;Allocation info for local variables in function 'RxMode'
                                   1250 ;------------------------------------------------------------
                                   1251 ;	cc1111rf.c:78: void RxMode(void)
                                   1252 ;	-----------------------------------------
                                   1253 ;	 function RxMode
                                   1254 ;	-----------------------------------------
      000095                       1255 _RxMode:
                                   1256 ;	cc1111rf.c:80: if (rf_status != RFST_SRX)
      000095 90r04r0B         [24] 1257 	mov	dptr,#_rf_status
      000098 E0               [24] 1258 	movx	a,@dptr
      000099 FF               [12] 1259 	mov	r7,a
      00009A BF 02 01         [24] 1260 	cjne	r7,#0x02,00108$
      00009D 22               [24] 1261 	ret
      00009E                       1262 00108$:
                                   1263 ;	cc1111rf.c:82: MCSM1 &= 0xf0;
      00009E 90 DF 13         [24] 1264 	mov	dptr,#_MCSM1
      0000A1 E0               [24] 1265 	movx	a,@dptr
      0000A2 FF               [12] 1266 	mov	r7,a
      0000A3 74 F0            [12] 1267 	mov	a,#0xF0
      0000A5 5F               [12] 1268 	anl	a,r7
      0000A6 F0               [24] 1269 	movx	@dptr,a
                                   1270 ;	cc1111rf.c:83: MCSM1 |= 0x0f;
      0000A7 E0               [24] 1271 	movx	a,@dptr
      0000A8 FF               [12] 1272 	mov	r7,a
      0000A9 74 0F            [12] 1273 	mov	a,#0x0F
      0000AB 4F               [12] 1274 	orl	a,r7
      0000AC F0               [24] 1275 	movx	@dptr,a
                                   1276 ;	cc1111rf.c:84: rf_status = RFST_SRX;
      0000AD 90r04r0B         [24] 1277 	mov	dptr,#_rf_status
      0000B0 74 02            [12] 1278 	mov	a,#0x02
      0000B2 F0               [24] 1279 	movx	@dptr,a
                                   1280 ;	cc1111rf.c:86: startRX();
      0000B3 02r04rD4         [24] 1281 	ljmp	_startRX
                                   1282 ;------------------------------------------------------------
                                   1283 ;Allocation info for local variables in function 'TxMode'
                                   1284 ;------------------------------------------------------------
                                   1285 ;	cc1111rf.c:91: void TxMode(void)
                                   1286 ;	-----------------------------------------
                                   1287 ;	 function TxMode
                                   1288 ;	-----------------------------------------
      0000B6                       1289 _TxMode:
                                   1290 ;	cc1111rf.c:93: if (rf_status != RFST_STX)
      0000B6 90r04r0B         [24] 1291 	mov	dptr,#_rf_status
      0000B9 E0               [24] 1292 	movx	a,@dptr
      0000BA FF               [12] 1293 	mov	r7,a
      0000BB BF 03 01         [24] 1294 	cjne	r7,#0x03,00117$
      0000BE 22               [24] 1295 	ret
      0000BF                       1296 00117$:
                                   1297 ;	cc1111rf.c:95: MCSM1 &= 0xf0;
      0000BF 90 DF 13         [24] 1298 	mov	dptr,#_MCSM1
      0000C2 E0               [24] 1299 	movx	a,@dptr
      0000C3 FF               [12] 1300 	mov	r7,a
      0000C4 74 F0            [12] 1301 	mov	a,#0xF0
      0000C6 5F               [12] 1302 	anl	a,r7
      0000C7 F0               [24] 1303 	movx	@dptr,a
                                   1304 ;	cc1111rf.c:96: MCSM1 |= 0x0a;
      0000C8 E0               [24] 1305 	movx	a,@dptr
      0000C9 FF               [12] 1306 	mov	r7,a
      0000CA 74 0A            [12] 1307 	mov	a,#0x0A
      0000CC 4F               [12] 1308 	orl	a,r7
      0000CD F0               [24] 1309 	movx	@dptr,a
                                   1310 ;	cc1111rf.c:98: rf_status = RFST_STX;
      0000CE 90r04r0B         [24] 1311 	mov	dptr,#_rf_status
      0000D1 74 03            [12] 1312 	mov	a,#0x03
      0000D3 F0               [24] 1313 	movx	@dptr,a
                                   1314 ;	cc1111rf.c:99: RFTX;
                                   1315 ;	1-genFromRTrack replaced	mov	_RFST,#0x03
      0000D4 F5 E1            [12] 1316 	mov	_RFST,a
      0000D6                       1317 00101$:
      0000D6 90 DF 3B         [24] 1318 	mov	dptr,#_MARCSTATE
      0000D9 E0               [24] 1319 	movx	a,@dptr
      0000DA FF               [12] 1320 	mov	r7,a
      0000DB BF 13 F8         [24] 1321 	cjne	r7,#0x13,00101$
      0000DE 22               [24] 1322 	ret
                                   1323 ;------------------------------------------------------------
                                   1324 ;Allocation info for local variables in function 'IdleMode'
                                   1325 ;------------------------------------------------------------
                                   1326 ;	cc1111rf.c:104: void IdleMode(void)
                                   1327 ;	-----------------------------------------
                                   1328 ;	 function IdleMode
                                   1329 ;	-----------------------------------------
      0000DF                       1330 _IdleMode:
                                   1331 ;	cc1111rf.c:106: if (rf_status != RFST_SIDLE)
      0000DF 90r04r0B         [24] 1332 	mov	dptr,#_rf_status
      0000E2 E0               [24] 1333 	movx	a,@dptr
      0000E3 FF               [12] 1334 	mov	r7,a
      0000E4 BF 04 01         [24] 1335 	cjne	r7,#0x04,00120$
      0000E7 22               [24] 1336 	ret
      0000E8                       1337 00120$:
                                   1338 ;	cc1111rf.c:109: MCSM1 &= 0xf0;
      0000E8 90 DF 13         [24] 1339 	mov	dptr,#_MCSM1
      0000EB E0               [24] 1340 	movx	a,@dptr
      0000EC FF               [12] 1341 	mov	r7,a
      0000ED 74 F0            [12] 1342 	mov	a,#0xF0
      0000EF 5F               [12] 1343 	anl	a,r7
      0000F0 F0               [24] 1344 	movx	@dptr,a
                                   1345 ;	cc1111rf.c:110: RFIM &= ~RFIF_IRQ_DONE;
      0000F1 AF 91            [24] 1346 	mov	r7,_RFIM
      0000F3 74 EF            [12] 1347 	mov	a,#0xEF
      0000F5 5F               [12] 1348 	anl	a,r7
      0000F6 F5 91            [12] 1349 	mov	_RFIM,a
                                   1350 ;	cc1111rf.c:111: RFOFF;
      0000F8 75 E1 04         [24] 1351 	mov	_RFST,#0x04
      0000FB                       1352 00101$:
      0000FB 90 DF 3B         [24] 1353 	mov	dptr,#_MARCSTATE
      0000FE E0               [24] 1354 	movx	a,@dptr
      0000FF FF               [12] 1355 	mov	r7,a
      000100 BF 01 F8         [24] 1356 	cjne	r7,#0x01,00101$
                                   1357 ;	cc1111rf.c:118: S1CON &= ~(S1CON_RFIF_0|S1CON_RFIF_1);  // clear RFIF interrupts
      000103 AF 9B            [24] 1358 	mov	r7,_S1CON
      000105 74 FC            [12] 1359 	mov	a,#0xFC
      000107 5F               [12] 1360 	anl	a,r7
      000108 F5 9B            [12] 1361 	mov	_S1CON,a
                                   1362 ;	cc1111rf.c:119: RFIF &= ~RFIF_IRQ_DONE;
      00010A AF E9            [24] 1363 	mov	r7,_RFIF
      00010C 74 EF            [12] 1364 	mov	a,#0xEF
      00010E 5F               [12] 1365 	anl	a,r7
      00010F F5 E9            [12] 1366 	mov	_RFIF,a
                                   1367 ;	cc1111rf.c:121: rf_status = RFST_SIDLE;
      000111 90r04r0B         [24] 1368 	mov	dptr,#_rf_status
      000114 74 04            [12] 1369 	mov	a,#0x04
      000116 F0               [24] 1370 	movx	@dptr,a
      000117 22               [24] 1371 	ret
                                   1372 ;------------------------------------------------------------
                                   1373 ;Allocation info for local variables in function 'init_RF'
                                   1374 ;------------------------------------------------------------
                                   1375 ;	cc1111rf.c:130: void init_RF()
                                   1376 ;	-----------------------------------------
                                   1377 ;	 function init_RF
                                   1378 ;	-----------------------------------------
      000118                       1379 _init_RF:
                                   1380 ;	cc1111rf.c:133: rf_tLastRecv = 0;
      000118 90r04r0E         [24] 1381 	mov	dptr,#_rf_tLastRecv
      00011B E4               [12] 1382 	clr	a
      00011C F0               [24] 1383 	movx	@dptr,a
      00011D A3               [24] 1384 	inc	dptr
      00011E F0               [24] 1385 	movx	@dptr,a
                                   1386 ;	cc1111rf.c:136: rfRxCounter[FIRST_BUFFER] = 0;
      00011F 90r04r01         [24] 1387 	mov	dptr,#_rfRxCounter
      000122 F0               [24] 1388 	movx	@dptr,a
      000123 A3               [24] 1389 	inc	dptr
      000124 F0               [24] 1390 	movx	@dptr,a
                                   1391 ;	cc1111rf.c:137: rfRxCounter[SECOND_BUFFER] = 0;
      000125 90r04r03         [24] 1392 	mov	dptr,#(_rfRxCounter + 0x0002)
      000128 F0               [24] 1393 	movx	@dptr,a
      000129 A3               [24] 1394 	inc	dptr
      00012A F0               [24] 1395 	movx	@dptr,a
                                   1396 ;	cc1111rf.c:150: CLKCON &= 0xc7;
      00012B 53 C6 C7         [24] 1397 	anl	_CLKCON,#0xC7
                                   1398 ;	cc1111rf.c:152: T2PR = 0;
      00012E 75 9D 00         [24] 1399 	mov	_T2PR,#0x00
                                   1400 ;	cc1111rf.c:153: T2CTL |= T2CTL_TIP_64;  // 64, 128, 256, 1024
      000131 85 9E 9E         [24] 1401 	mov	_T2CTL,_T2CTL
                                   1402 ;	cc1111rf.c:154: T2CTL |= T2CTL_TIG;
      000134 43 9E 04         [24] 1403 	orl	_T2CTL,#0x04
                                   1404 ;	cc1111rf.c:158: IP0 |= 0;       // grp0 is RF/RFTXRX/DMA
      000137 85 A9 A9         [24] 1405 	mov	_IP0,_IP0
                                   1406 ;	cc1111rf.c:159: IP1 |= BIT0;
      00013A 43 B9 01         [24] 1407 	orl	_IP1,#0x01
                                   1408 ;	cc1111rf.c:162: rf_status = RFST_SIDLE;
      00013D 90r04r0B         [24] 1409 	mov	dptr,#_rf_status
      000140 74 04            [12] 1410 	mov	a,#0x04
      000142 F0               [24] 1411 	movx	@dptr,a
                                   1412 ;	cc1111rf.c:171: memset(rfrxbuf,0,(BUFFER_AMOUNT * BUFFER_SIZE));
      000143 75*00 00         [24] 1413 	mov	_memset_PARM_2,#0x00
      000146 75*00 00         [24] 1414 	mov	_memset_PARM_3,#0x00
                                   1415 ;	1-genFromRTrack replaced	mov	(_memset_PARM_3 + 1),#0x04
      000149 F5*01            [12] 1416 	mov	(_memset_PARM_3 + 1),a
      00014B 90r00r01         [24] 1417 	mov	dptr,#_rfrxbuf
      00014E 75 F0 00         [24] 1418 	mov	b,#0x00
      000151 12r00r00         [24] 1419 	lcall	_memset
                                   1420 ;	cc1111rf.c:173: appInitRf();
      000154 12r00r00         [24] 1421 	lcall	_appInitRf
                                   1422 ;	cc1111rf.c:176: RFTXRXIE = 1;                   // FIXME: should this be something that is enabled/disabled by usb?
      000157 D2 A8            [12] 1423 	setb	_RFTXRXIE
                                   1424 ;	cc1111rf.c:177: RFIM = 0xd1;    // TXUNF, RXOVF, DONE, SFD  (SFD to mark time of receipt)
      000159 75 91 D1         [24] 1425 	mov	_RFIM,#0xD1
                                   1426 ;	cc1111rf.c:178: RFIF = 0;
      00015C 75 E9 00         [24] 1427 	mov	_RFIF,#0x00
                                   1428 ;	cc1111rf.c:179: rfif = 0;
      00015F 75*00 00         [24] 1429 	mov	_rfif,#0x00
                                   1430 ;	cc1111rf.c:180: IEN2 |= IEN2_RFIE;
      000162 43 9A 01         [24] 1431 	orl	_IEN2,#0x01
                                   1432 ;	cc1111rf.c:183: RFOFF;
      000165 75 E1 04         [24] 1433 	mov	_RFST,#0x04
      000168                       1434 00101$:
      000168 90 DF 3B         [24] 1435 	mov	dptr,#_MARCSTATE
      00016B E0               [24] 1436 	movx	a,@dptr
      00016C FF               [12] 1437 	mov	r7,a
      00016D BF 01 F8         [24] 1438 	cjne	r7,#0x01,00101$
      000170 22               [24] 1439 	ret
                                   1440 ;------------------------------------------------------------
                                   1441 ;Allocation info for local variables in function 'waitRSSI'
                                   1442 ;------------------------------------------------------------
                                   1443 ;u16WaitTime               Allocated to registers r6 r7 
                                   1444 ;------------------------------------------------------------
                                   1445 ;	cc1111rf.c:188: int waitRSSI()
                                   1446 ;	-----------------------------------------
                                   1447 ;	 function waitRSSI
                                   1448 ;	-----------------------------------------
      000171                       1449 _waitRSSI:
                                   1450 ;	cc1111rf.c:191: while(u16WaitTime < RSSI_TIMEOUT_US)
      000171 7E 00            [12] 1451 	mov	r6,#0x00
      000173 7F 00            [12] 1452 	mov	r7,#0x00
      000175                       1453 00104$:
      000175 C3               [12] 1454 	clr	c
      000176 EE               [12] 1455 	mov	a,r6
      000177 94 DC            [12] 1456 	subb	a,#0xDC
      000179 EF               [12] 1457 	mov	a,r7
      00017A 94 05            [12] 1458 	subb	a,#0x05
      00017C 50 24            [24] 1459 	jnc	00106$
                                   1460 ;	cc1111rf.c:193: if(PKTSTATUS & (PKTSTATUS_CCA | PKTSTATUS_CS))
      00017E 90 DF 3C         [24] 1461 	mov	dptr,#_PKTSTATUS
      000181 E0               [24] 1462 	movx	a,@dptr
      000182 FD               [12] 1463 	mov	r5,a
      000183 54 50            [12] 1464 	anl	a,#0x50
      000185 60 04            [24] 1465 	jz	00102$
                                   1466 ;	cc1111rf.c:195: return 1;
      000187 90 00 01         [24] 1467 	mov	dptr,#0x0001
      00018A 22               [24] 1468 	ret
      00018B                       1469 00102$:
                                   1470 ;	cc1111rf.c:199: sleepMicros(50);
      00018B 90 00 32         [24] 1471 	mov	dptr,#0x0032
      00018E C0 07            [24] 1472 	push	ar7
      000190 C0 06            [24] 1473 	push	ar6
      000192 12r00r00         [24] 1474 	lcall	_sleepMicros
      000195 D0 06            [24] 1475 	pop	ar6
      000197 D0 07            [24] 1476 	pop	ar7
                                   1477 ;	cc1111rf.c:200: u16WaitTime += 50;
      000199 74 32            [12] 1478 	mov	a,#0x32
      00019B 2E               [12] 1479 	add	a,r6
      00019C FE               [12] 1480 	mov	r6,a
      00019D E4               [12] 1481 	clr	a
      00019E 3F               [12] 1482 	addc	a,r7
      00019F FF               [12] 1483 	mov	r7,a
      0001A0 80 D3            [24] 1484 	sjmp	00104$
      0001A2                       1485 00106$:
                                   1486 ;	cc1111rf.c:203: return 0;
      0001A2 90 00 00         [24] 1487 	mov	dptr,#0x0000
      0001A5 22               [24] 1488 	ret
                                   1489 ;------------------------------------------------------------
                                   1490 ;Allocation info for local variables in function 'transmit'
                                   1491 ;------------------------------------------------------------
                                   1492 ;sloc0                     Allocated with name '_transmit_sloc0_1_0'
                                   1493 ;len                       Allocated with name '_transmit_PARM_2'
                                   1494 ;repeat                    Allocated with name '_transmit_PARM_3'
                                   1495 ;offset                    Allocated with name '_transmit_PARM_4'
                                   1496 ;buf                       Allocated with name '_transmit_buf_1_96'
                                   1497 ;countdown                 Allocated with name '_transmit_countdown_1_97'
                                   1498 ;encoffset                 Allocated with name '_transmit_encoffset_1_97'
                                   1499 ;original_pktlen           Allocated with name '_transmit_original_pktlen_1_97'
                                   1500 ;------------------------------------------------------------
                                   1501 ;	cc1111rf.c:214: u8 transmit(__xdata u8* __xdata buf, __xdata u16 len, __xdata u16 repeat, __xdata u16 offset)
                                   1502 ;	-----------------------------------------
                                   1503 ;	 function transmit
                                   1504 ;	-----------------------------------------
      0001A6                       1505 _transmit:
      0001A6 AF 83            [24] 1506 	mov	r7,dph
      0001A8 E5 82            [12] 1507 	mov	a,dpl
      0001AA 90r04r2B         [24] 1508 	mov	dptr,#_transmit_buf_1_96
      0001AD F0               [24] 1509 	movx	@dptr,a
      0001AE EF               [12] 1510 	mov	a,r7
      0001AF A3               [24] 1511 	inc	dptr
      0001B0 F0               [24] 1512 	movx	@dptr,a
                                   1513 ;	cc1111rf.c:217: __xdata u8 encoffset = 0;
      0001B1 90r04r2D         [24] 1514 	mov	dptr,#_transmit_encoffset_1_97
      0001B4 E4               [12] 1515 	clr	a
      0001B5 F0               [24] 1516 	movx	@dptr,a
                                   1517 ;	cc1111rf.c:218: __xdata u8 original_pktlen = PKTLEN;
      0001B6 90 DF 02         [24] 1518 	mov	dptr,#_PKTLEN
      0001B9 E0               [24] 1519 	movx	a,@dptr
      0001BA FF               [12] 1520 	mov	r7,a
                                   1521 ;	cc1111rf.c:220: while (MARCSTATE == MARC_STATE_TX)
      0001BB                       1522 00101$:
      0001BB 90 DF 3B         [24] 1523 	mov	dptr,#_MARCSTATE
      0001BE E0               [24] 1524 	movx	a,@dptr
      0001BF FE               [12] 1525 	mov	r6,a
      0001C0 BE 13 0B         [24] 1526 	cjne	r6,#0x13,00103$
                                   1527 ;	cc1111rf.c:222: LED = !LED;
      0001C3 B2 91            [12] 1528 	cpl	_P1_1
                                   1529 ;	cc1111rf.c:224: usbProcessEvents();
      0001C5 C0 07            [24] 1530 	push	ar7
      0001C7 12r00r00         [24] 1531 	lcall	_usbProcessEvents
      0001CA D0 07            [24] 1532 	pop	ar7
      0001CC 80 ED            [24] 1533 	sjmp	00101$
      0001CE                       1534 00103$:
                                   1535 ;	cc1111rf.c:228: LED = 0;
      0001CE C2 91            [12] 1536 	clr	_P1_1
                                   1537 ;	cc1111rf.c:231: rfTxInfMode = 0;
      0001D0 90r00r13         [24] 1538 	mov	dptr,#_rfTxInfMode
      0001D3 E4               [12] 1539 	clr	a
      0001D4 F0               [24] 1540 	movx	@dptr,a
                                   1541 ;	cc1111rf.c:232: rfTxRepeatCounter = repeat;
      0001D5 90r04r27         [24] 1542 	mov	dptr,#_transmit_PARM_3
      0001D8 E0               [24] 1543 	movx	a,@dptr
      0001D9 FD               [12] 1544 	mov	r5,a
      0001DA A3               [24] 1545 	inc	dptr
      0001DB E0               [24] 1546 	movx	a,@dptr
      0001DC FE               [12] 1547 	mov	r6,a
      0001DD 90r00r09         [24] 1548 	mov	dptr,#_rfTxRepeatCounter
      0001E0 ED               [12] 1549 	mov	a,r5
      0001E1 F0               [24] 1550 	movx	@dptr,a
      0001E2 EE               [12] 1551 	mov	a,r6
      0001E3 A3               [24] 1552 	inc	dptr
      0001E4 F0               [24] 1553 	movx	@dptr,a
                                   1554 ;	cc1111rf.c:233: rfTxRepeatOffset = offset;
      0001E5 90r04r29         [24] 1555 	mov	dptr,#_transmit_PARM_4
      0001E8 E0               [24] 1556 	movx	a,@dptr
      0001E9 FB               [12] 1557 	mov	r3,a
      0001EA A3               [24] 1558 	inc	dptr
      0001EB E0               [24] 1559 	movx	a,@dptr
      0001EC FC               [12] 1560 	mov	r4,a
      0001ED 90r00r0F         [24] 1561 	mov	dptr,#_rfTxRepeatOffset
      0001F0 EB               [12] 1562 	mov	a,r3
      0001F1 F0               [24] 1563 	movx	@dptr,a
      0001F2 EC               [12] 1564 	mov	a,r4
      0001F3 A3               [24] 1565 	inc	dptr
      0001F4 F0               [24] 1566 	movx	@dptr,a
                                   1567 ;	cc1111rf.c:234: rfTxBufferEnd = len;
      0001F5 90r04r25         [24] 1568 	mov	dptr,#_transmit_PARM_2
      0001F8 E0               [24] 1569 	movx	a,@dptr
      0001F9 F9               [12] 1570 	mov	r1,a
      0001FA A3               [24] 1571 	inc	dptr
      0001FB E0               [24] 1572 	movx	a,@dptr
      0001FC FA               [12] 1573 	mov	r2,a
      0001FD 90r00r0B         [24] 1574 	mov	dptr,#_rfTxBufferEnd
      000200 E9               [12] 1575 	mov	a,r1
      000201 F0               [24] 1576 	movx	@dptr,a
      000202 EA               [12] 1577 	mov	a,r2
      000203 A3               [24] 1578 	inc	dptr
      000204 F0               [24] 1579 	movx	@dptr,a
                                   1580 ;	cc1111rf.c:235: rfTxRepeatLen = len - offset;
      000205 90r00r0D         [24] 1581 	mov	dptr,#_rfTxRepeatLen
      000208 E9               [12] 1582 	mov	a,r1
      000209 C3               [12] 1583 	clr	c
      00020A 9B               [12] 1584 	subb	a,r3
      00020B F0               [24] 1585 	movx	@dptr,a
      00020C EA               [12] 1586 	mov	a,r2
      00020D 9C               [12] 1587 	subb	a,r4
      00020E A3               [24] 1588 	inc	dptr
      00020F F0               [24] 1589 	movx	@dptr,a
                                   1590 ;	cc1111rf.c:237: rfTxTotalTXLen = len + (rfTxRepeatLen * repeat);
      000210 90r00r0D         [24] 1591 	mov	dptr,#_rfTxRepeatLen
      000213 E0               [24] 1592 	movx	a,@dptr
      000214 FB               [12] 1593 	mov	r3,a
      000215 A3               [24] 1594 	inc	dptr
      000216 E0               [24] 1595 	movx	a,@dptr
      000217 FC               [12] 1596 	mov	r4,a
      000218 8D*00            [24] 1597 	mov	__mulint_PARM_2,r5
      00021A 8E*01            [24] 1598 	mov	(__mulint_PARM_2 + 1),r6
      00021C 8B 82            [24] 1599 	mov	dpl,r3
      00021E 8C 83            [24] 1600 	mov	dph,r4
      000220 C0 07            [24] 1601 	push	ar7
      000222 C0 06            [24] 1602 	push	ar6
      000224 C0 05            [24] 1603 	push	ar5
      000226 C0 02            [24] 1604 	push	ar2
      000228 C0 01            [24] 1605 	push	ar1
      00022A 12r00r00         [24] 1606 	lcall	__mulint
      00022D AB 82            [24] 1607 	mov	r3,dpl
      00022F AC 83            [24] 1608 	mov	r4,dph
      000231 D0 01            [24] 1609 	pop	ar1
      000233 D0 02            [24] 1610 	pop	ar2
      000235 D0 05            [24] 1611 	pop	ar5
      000237 D0 06            [24] 1612 	pop	ar6
      000239 D0 07            [24] 1613 	pop	ar7
      00023B 90r00r11         [24] 1614 	mov	dptr,#_rfTxTotalTXLen
      00023E EB               [12] 1615 	mov	a,r3
      00023F 29               [12] 1616 	add	a,r1
      000240 F0               [24] 1617 	movx	@dptr,a
      000241 EC               [12] 1618 	mov	a,r4
      000242 3A               [12] 1619 	addc	a,r2
      000243 A3               [24] 1620 	inc	dptr
      000244 F0               [24] 1621 	movx	@dptr,a
                                   1622 ;	cc1111rf.c:242: if(len == 0)
      000245 E9               [12] 1623 	mov	a,r1
      000246 4A               [12] 1624 	orl	a,r2
      000247 70 5D            [24] 1625 	jnz	00118$
                                   1626 ;	cc1111rf.c:244: len = buf[0];
      000249 90r04r2B         [24] 1627 	mov	dptr,#_transmit_buf_1_96
      00024C E0               [24] 1628 	movx	a,@dptr
      00024D FB               [12] 1629 	mov	r3,a
      00024E A3               [24] 1630 	inc	dptr
      00024F E0               [24] 1631 	movx	a,@dptr
      000250 FC               [12] 1632 	mov	r4,a
      000251 8B 82            [24] 1633 	mov	dpl,r3
      000253 8C 83            [24] 1634 	mov	dph,r4
      000255 E0               [24] 1635 	movx	a,@dptr
      000256 F8               [12] 1636 	mov	r0,a
      000257 88*01            [24] 1637 	mov	_transmit_sloc0_1_0,r0
      000259 75*02 00         [24] 1638 	mov	(_transmit_sloc0_1_0 + 1),#0x00
      00025C 90r04r25         [24] 1639 	mov	dptr,#_transmit_PARM_2
      00025F E5*01            [12] 1640 	mov	a,_transmit_sloc0_1_0
      000261 F0               [24] 1641 	movx	@dptr,a
      000262 E5*02            [12] 1642 	mov	a,(_transmit_sloc0_1_0 + 1)
      000264 A3               [24] 1643 	inc	dptr
      000265 F0               [24] 1644 	movx	@dptr,a
                                   1645 ;	cc1111rf.c:246: switch (PKTCTRL0 & PKTCTRL0_LENGTH_CONFIG)
      000266 90 DF 04         [24] 1646 	mov	dptr,#_PKTCTRL0
      000269 E0               [24] 1647 	movx	a,@dptr
      00026A F8               [12] 1648 	mov	r0,a
      00026B 53 00 03         [24] 1649 	anl	ar0,#0x03
      00026E B8 00 02         [24] 1650 	cjne	r0,#0x00,00214$
      000271 80 18            [24] 1651 	sjmp	00105$
      000273                       1652 00214$:
      000273 B8 01 02         [24] 1653 	cjne	r0,#0x01,00215$
      000276 80 03            [24] 1654 	sjmp	00216$
      000278                       1655 00215$:
      000278 02r03r38         [24] 1656 	ljmp	00119$
      00027B                       1657 00216$:
                                   1658 ;	cc1111rf.c:249: len++;  // we need to send the length byte too...
      00027B 90r04r25         [24] 1659 	mov	dptr,#_transmit_PARM_2
      00027E 74 01            [12] 1660 	mov	a,#0x01
      000280 25*01            [12] 1661 	add	a,_transmit_sloc0_1_0
      000282 F0               [24] 1662 	movx	@dptr,a
      000283 E4               [12] 1663 	clr	a
      000284 35*02            [12] 1664 	addc	a,(_transmit_sloc0_1_0 + 1)
      000286 A3               [24] 1665 	inc	dptr
      000287 F0               [24] 1666 	movx	@dptr,a
                                   1667 ;	cc1111rf.c:250: break;
      000288 02r03r38         [24] 1668 	ljmp	00119$
                                   1669 ;	cc1111rf.c:251: case PKTCTRL0_LENGTH_CONFIG_FIX:
      00028B                       1670 00105$:
                                   1671 ;	cc1111rf.c:252: buf++;  // skip sending the length byte
      00028B 90r04r2B         [24] 1672 	mov	dptr,#_transmit_buf_1_96
      00028E 74 01            [12] 1673 	mov	a,#0x01
      000290 2B               [12] 1674 	add	a,r3
      000291 F0               [24] 1675 	movx	@dptr,a
      000292 E4               [12] 1676 	clr	a
      000293 3C               [12] 1677 	addc	a,r4
      000294 A3               [24] 1678 	inc	dptr
      000295 F0               [24] 1679 	movx	@dptr,a
                                   1680 ;	cc1111rf.c:253: PKTLEN= len;
      000296 90r04r25         [24] 1681 	mov	dptr,#_transmit_PARM_2
      000299 E0               [24] 1682 	movx	a,@dptr
      00029A FB               [12] 1683 	mov	r3,a
      00029B A3               [24] 1684 	inc	dptr
      00029C E0               [24] 1685 	movx	a,@dptr
      00029D FC               [12] 1686 	mov	r4,a
      00029E 90 DF 02         [24] 1687 	mov	dptr,#_PKTLEN
      0002A1 EB               [12] 1688 	mov	a,r3
      0002A2 F0               [24] 1689 	movx	@dptr,a
                                   1690 ;	cc1111rf.c:254: break;
      0002A3 02r03r38         [24] 1691 	ljmp	00119$
                                   1692 ;	cc1111rf.c:257: }
      0002A6                       1693 00118$:
                                   1694 ;	cc1111rf.c:263: switch (PKTCTRL0 & PKTCTRL0_LENGTH_CONFIG)
      0002A6 90 DF 04         [24] 1695 	mov	dptr,#_PKTCTRL0
      0002A9 E0               [24] 1696 	movx	a,@dptr
      0002AA FC               [12] 1697 	mov	r4,a
      0002AB 53 04 03         [24] 1698 	anl	ar4,#0x03
      0002AE BC 00 02         [24] 1699 	cjne	r4,#0x00,00217$
      0002B1 80 46            [24] 1700 	sjmp	00109$
      0002B3                       1701 00217$:
      0002B3 BC 01 02         [24] 1702 	cjne	r4,#0x01,00218$
      0002B6 80 03            [24] 1703 	sjmp	00219$
      0002B8                       1704 00218$:
      0002B8 02r03r38         [24] 1705 	ljmp	00119$
      0002BB                       1706 00219$:
                                   1707 ;	cc1111rf.c:267: byte_shuffle(buf, len, 1);
      0002BB 90r04r2B         [24] 1708 	mov	dptr,#_transmit_buf_1_96
      0002BE E0               [24] 1709 	movx	a,@dptr
      0002BF FB               [12] 1710 	mov	r3,a
      0002C0 A3               [24] 1711 	inc	dptr
      0002C1 E0               [24] 1712 	movx	a,@dptr
      0002C2 FC               [12] 1713 	mov	r4,a
      0002C3 90r04r2E         [24] 1714 	mov	dptr,#_byte_shuffle_PARM_2
      0002C6 E9               [12] 1715 	mov	a,r1
      0002C7 F0               [24] 1716 	movx	@dptr,a
      0002C8 EA               [12] 1717 	mov	a,r2
      0002C9 A3               [24] 1718 	inc	dptr
      0002CA F0               [24] 1719 	movx	@dptr,a
      0002CB 90r04r30         [24] 1720 	mov	dptr,#_byte_shuffle_PARM_3
      0002CE 74 01            [12] 1721 	mov	a,#0x01
      0002D0 F0               [24] 1722 	movx	@dptr,a
      0002D1 E4               [12] 1723 	clr	a
      0002D2 A3               [24] 1724 	inc	dptr
      0002D3 F0               [24] 1725 	movx	@dptr,a
      0002D4 8B 82            [24] 1726 	mov	dpl,r3
      0002D6 8C 83            [24] 1727 	mov	dph,r4
      0002D8 C0 07            [24] 1728 	push	ar7
      0002DA C0 02            [24] 1729 	push	ar2
      0002DC C0 01            [24] 1730 	push	ar1
      0002DE 12r0Ar75         [24] 1731 	lcall	_byte_shuffle
      0002E1 D0 01            [24] 1732 	pop	ar1
      0002E3 D0 02            [24] 1733 	pop	ar2
      0002E5 D0 07            [24] 1734 	pop	ar7
                                   1735 ;	cc1111rf.c:268: buf[0] = (u8) len;
      0002E7 90r04r2B         [24] 1736 	mov	dptr,#_transmit_buf_1_96
      0002EA E0               [24] 1737 	movx	a,@dptr
      0002EB FB               [12] 1738 	mov	r3,a
      0002EC A3               [24] 1739 	inc	dptr
      0002ED E0               [24] 1740 	movx	a,@dptr
      0002EE FC               [12] 1741 	mov	r4,a
      0002EF 89 00            [24] 1742 	mov	ar0,r1
      0002F1 8B 82            [24] 1743 	mov	dpl,r3
      0002F3 8C 83            [24] 1744 	mov	dph,r4
      0002F5 E8               [12] 1745 	mov	a,r0
      0002F6 F0               [24] 1746 	movx	@dptr,a
                                   1747 ;	cc1111rf.c:269: break;
                                   1748 ;	cc1111rf.c:270: case PKTCTRL0_LENGTH_CONFIG_FIX:
      0002F7 80 3F            [24] 1749 	sjmp	00119$
      0002F9                       1750 00109$:
                                   1751 ;	cc1111rf.c:274: if(repeat)
      0002F9 ED               [12] 1752 	mov	a,r5
      0002FA 4E               [12] 1753 	orl	a,r6
      0002FB 60 36            [24] 1754 	jz	00113$
                                   1755 ;	cc1111rf.c:278: PKTLEN = (u8) (rfTxTotalTXLen % 256);
      0002FD 90r00r11         [24] 1756 	mov	dptr,#_rfTxTotalTXLen
      000300 E0               [24] 1757 	movx	a,@dptr
      000301 FD               [12] 1758 	mov	r5,a
      000302 A3               [24] 1759 	inc	dptr
      000303 E0               [24] 1760 	movx	a,@dptr
      000304 90 DF 02         [24] 1761 	mov	dptr,#_PKTLEN
      000307 ED               [12] 1762 	mov	a,r5
      000308 F0               [24] 1763 	movx	@dptr,a
                                   1764 ;	cc1111rf.c:279: PKTCTRL0 &= ~PKTCTRL0_LENGTH_CONFIG;
      000309 90 DF 04         [24] 1765 	mov	dptr,#_PKTCTRL0
      00030C E0               [24] 1766 	movx	a,@dptr
      00030D FE               [12] 1767 	mov	r6,a
      00030E 74 FC            [12] 1768 	mov	a,#0xFC
      000310 5E               [12] 1769 	anl	a,r6
      000311 F0               [24] 1770 	movx	@dptr,a
                                   1771 ;	cc1111rf.c:281: if(rfTxTotalTXLen > RF_MAX_TX_BLOCK)
      000312 90r00r11         [24] 1772 	mov	dptr,#_rfTxTotalTXLen
      000315 E0               [24] 1773 	movx	a,@dptr
      000316 FD               [12] 1774 	mov	r5,a
      000317 A3               [24] 1775 	inc	dptr
      000318 E0               [24] 1776 	movx	a,@dptr
      000319 FE               [12] 1777 	mov	r6,a
      00031A C3               [12] 1778 	clr	c
      00031B 74 FF            [12] 1779 	mov	a,#0xFF
      00031D 9D               [12] 1780 	subb	a,r5
      00031E E4               [12] 1781 	clr	a
      00031F 9E               [12] 1782 	subb	a,r6
      000320 50 09            [24] 1783 	jnc	00111$
                                   1784 ;	cc1111rf.c:282: PKTCTRL0 |= PKTCTRL0_LENGTH_CONFIG_INF;
      000322 90 DF 04         [24] 1785 	mov	dptr,#_PKTCTRL0
      000325 E0               [24] 1786 	movx	a,@dptr
      000326 FE               [12] 1787 	mov	r6,a
      000327 74 02            [12] 1788 	mov	a,#0x02
      000329 4E               [12] 1789 	orl	a,r6
      00032A F0               [24] 1790 	movx	@dptr,a
      00032B                       1791 00111$:
                                   1792 ;	cc1111rf.c:284: rfTxInfMode = 1;
      00032B 90r00r13         [24] 1793 	mov	dptr,#_rfTxInfMode
      00032E 74 01            [12] 1794 	mov	a,#0x01
      000330 F0               [24] 1795 	movx	@dptr,a
      000331 80 05            [24] 1796 	sjmp	00119$
      000333                       1797 00113$:
                                   1798 ;	cc1111rf.c:287: PKTLEN = len;
      000333 90 DF 02         [24] 1799 	mov	dptr,#_PKTLEN
      000336 E9               [12] 1800 	mov	a,r1
      000337 F0               [24] 1801 	movx	@dptr,a
                                   1802 ;	cc1111rf.c:291: }
      000338                       1803 00119$:
                                   1804 ;	cc1111rf.c:296: RFTXRXIE = 1;
      000338 D2 A8            [12] 1805 	setb	_RFTXRXIE
                                   1806 ;	cc1111rf.c:302: if(rfAESMode & AES_CRYPTO_OUT_ENABLE)
      00033A 90r00r14         [24] 1807 	mov	dptr,#_rfAESMode
      00033D E0               [24] 1808 	movx	a,@dptr
      00033E FE               [12] 1809 	mov	r6,a
      00033F 20 E3 03         [24] 1810 	jb	acc.3,00222$
      000342 02r04r66         [24] 1811 	ljmp	00135$
      000345                       1812 00222$:
                                   1813 ;	cc1111rf.c:304: if((PKTCTRL0 & PKTCTRL0_LENGTH_CONFIG) == PKTCTRL0_LENGTH_CONFIG_VAR)
      000345 90 DF 04         [24] 1814 	mov	dptr,#_PKTCTRL0
      000348 E0               [24] 1815 	movx	a,@dptr
      000349 FE               [12] 1816 	mov	r6,a
      00034A 53 06 03         [24] 1817 	anl	ar6,#0x03
      00034D BE 01 06         [24] 1818 	cjne	r6,#0x01,00121$
                                   1819 ;	cc1111rf.c:305: encoffset= 1;
      000350 90r04r2D         [24] 1820 	mov	dptr,#_transmit_encoffset_1_97
      000353 74 01            [12] 1821 	mov	a,#0x01
      000355 F0               [24] 1822 	movx	@dptr,a
      000356                       1823 00121$:
                                   1824 ;	cc1111rf.c:307: len= padAES(buf + encoffset, len);
      000356 90r04r2D         [24] 1825 	mov	dptr,#_transmit_encoffset_1_97
      000359 E0               [24] 1826 	movx	a,@dptr
      00035A FE               [12] 1827 	mov	r6,a
      00035B 90r04r2B         [24] 1828 	mov	dptr,#_transmit_buf_1_96
      00035E E0               [24] 1829 	movx	a,@dptr
      00035F FC               [12] 1830 	mov	r4,a
      000360 A3               [24] 1831 	inc	dptr
      000361 E0               [24] 1832 	movx	a,@dptr
      000362 FD               [12] 1833 	mov	r5,a
      000363 EE               [12] 1834 	mov	a,r6
      000364 2C               [12] 1835 	add	a,r4
      000365 FA               [12] 1836 	mov	r2,a
      000366 E4               [12] 1837 	clr	a
      000367 3D               [12] 1838 	addc	a,r5
      000368 FB               [12] 1839 	mov	r3,a
      000369 90r04r25         [24] 1840 	mov	dptr,#_transmit_PARM_2
      00036C E0               [24] 1841 	movx	a,@dptr
      00036D F8               [12] 1842 	mov	r0,a
      00036E A3               [24] 1843 	inc	dptr
      00036F E0               [24] 1844 	movx	a,@dptr
      000370 F9               [12] 1845 	mov	r1,a
      000371 90r00r00         [24] 1846 	mov	dptr,#_padAES_PARM_2
      000374 E8               [12] 1847 	mov	a,r0
      000375 F0               [24] 1848 	movx	@dptr,a
      000376 E9               [12] 1849 	mov	a,r1
      000377 A3               [24] 1850 	inc	dptr
      000378 F0               [24] 1851 	movx	@dptr,a
      000379 8A 82            [24] 1852 	mov	dpl,r2
      00037B 8B 83            [24] 1853 	mov	dph,r3
      00037D C0 07            [24] 1854 	push	ar7
      00037F C0 06            [24] 1855 	push	ar6
      000381 C0 05            [24] 1856 	push	ar5
      000383 C0 04            [24] 1857 	push	ar4
      000385 12r00r00         [24] 1858 	lcall	_padAES
      000388 AA 82            [24] 1859 	mov	r2,dpl
      00038A AB 83            [24] 1860 	mov	r3,dph
      00038C D0 04            [24] 1861 	pop	ar4
      00038E D0 05            [24] 1862 	pop	ar5
      000390 D0 06            [24] 1863 	pop	ar6
      000392 D0 07            [24] 1864 	pop	ar7
                                   1865 ;	cc1111rf.c:309: if((rfAESMode & AES_CRYPTO_OUT_TYPE) == AES_CRYPTO_OUT_ENCRYPT)
      000394 90r00r14         [24] 1866 	mov	dptr,#_rfAESMode
      000397 E0               [24] 1867 	movx	a,@dptr
      000398 F9               [12] 1868 	mov	r1,a
      000399 53 01 04         [24] 1869 	anl	ar1,#0x04
      00039C B9 04 48         [24] 1870 	cjne	r1,#0x04,00123$
                                   1871 ;	cc1111rf.c:310: encAES(buf + encoffset, buf + encoffset, len, (rfAESMode & AES_CRYPTO_MODE));
      00039F C0 07            [24] 1872 	push	ar7
      0003A1 EE               [12] 1873 	mov	a,r6
      0003A2 2C               [12] 1874 	add	a,r4
      0003A3 F8               [12] 1875 	mov	r0,a
      0003A4 E4               [12] 1876 	clr	a
      0003A5 3D               [12] 1877 	addc	a,r5
      0003A6 F9               [12] 1878 	mov	r1,a
      0003A7 90r00r14         [24] 1879 	mov	dptr,#_rfAESMode
      0003AA E0               [24] 1880 	movx	a,@dptr
      0003AB FF               [12] 1881 	mov	r7,a
      0003AC 53 07 F0         [24] 1882 	anl	ar7,#0xF0
      0003AF 90r00r00         [24] 1883 	mov	dptr,#_encAES_PARM_2
      0003B2 E8               [12] 1884 	mov	a,r0
      0003B3 F0               [24] 1885 	movx	@dptr,a
      0003B4 E9               [12] 1886 	mov	a,r1
      0003B5 A3               [24] 1887 	inc	dptr
      0003B6 F0               [24] 1888 	movx	@dptr,a
      0003B7 90r00r00         [24] 1889 	mov	dptr,#_encAES_PARM_3
      0003BA EA               [12] 1890 	mov	a,r2
      0003BB F0               [24] 1891 	movx	@dptr,a
      0003BC EB               [12] 1892 	mov	a,r3
      0003BD A3               [24] 1893 	inc	dptr
      0003BE F0               [24] 1894 	movx	@dptr,a
      0003BF 90r00r00         [24] 1895 	mov	dptr,#_encAES_PARM_4
      0003C2 EF               [12] 1896 	mov	a,r7
      0003C3 F0               [24] 1897 	movx	@dptr,a
      0003C4 88 82            [24] 1898 	mov	dpl,r0
      0003C6 89 83            [24] 1899 	mov	dph,r1
      0003C8 C0 07            [24] 1900 	push	ar7
      0003CA C0 06            [24] 1901 	push	ar6
      0003CC C0 05            [24] 1902 	push	ar5
      0003CE C0 04            [24] 1903 	push	ar4
      0003D0 C0 03            [24] 1904 	push	ar3
      0003D2 C0 02            [24] 1905 	push	ar2
      0003D4 12r00r00         [24] 1906 	lcall	_encAES
      0003D7 D0 02            [24] 1907 	pop	ar2
      0003D9 D0 03            [24] 1908 	pop	ar3
      0003DB D0 04            [24] 1909 	pop	ar4
      0003DD D0 05            [24] 1910 	pop	ar5
      0003DF D0 06            [24] 1911 	pop	ar6
      0003E1 D0 07            [24] 1912 	pop	ar7
      0003E3 D0 07            [24] 1913 	pop	ar7
      0003E5 80 46            [24] 1914 	sjmp	00124$
      0003E7                       1915 00123$:
                                   1916 ;	cc1111rf.c:312: decAES(buf + encoffset, buf + encoffset, len, (rfAESMode & AES_CRYPTO_MODE));
      0003E7 C0 07            [24] 1917 	push	ar7
      0003E9 EE               [12] 1918 	mov	a,r6
      0003EA 2C               [12] 1919 	add	a,r4
      0003EB F8               [12] 1920 	mov	r0,a
      0003EC E4               [12] 1921 	clr	a
      0003ED 3D               [12] 1922 	addc	a,r5
      0003EE F9               [12] 1923 	mov	r1,a
      0003EF 90r00r14         [24] 1924 	mov	dptr,#_rfAESMode
      0003F2 E0               [24] 1925 	movx	a,@dptr
      0003F3 FF               [12] 1926 	mov	r7,a
      0003F4 53 07 F0         [24] 1927 	anl	ar7,#0xF0
      0003F7 90r00r00         [24] 1928 	mov	dptr,#_decAES_PARM_2
      0003FA E8               [12] 1929 	mov	a,r0
      0003FB F0               [24] 1930 	movx	@dptr,a
      0003FC E9               [12] 1931 	mov	a,r1
      0003FD A3               [24] 1932 	inc	dptr
      0003FE F0               [24] 1933 	movx	@dptr,a
      0003FF 90r00r00         [24] 1934 	mov	dptr,#_decAES_PARM_3
      000402 EA               [12] 1935 	mov	a,r2
      000403 F0               [24] 1936 	movx	@dptr,a
      000404 EB               [12] 1937 	mov	a,r3
      000405 A3               [24] 1938 	inc	dptr
      000406 F0               [24] 1939 	movx	@dptr,a
      000407 90r00r00         [24] 1940 	mov	dptr,#_decAES_PARM_4
      00040A EF               [12] 1941 	mov	a,r7
      00040B F0               [24] 1942 	movx	@dptr,a
      00040C 88 82            [24] 1943 	mov	dpl,r0
      00040E 89 83            [24] 1944 	mov	dph,r1
      000410 C0 07            [24] 1945 	push	ar7
      000412 C0 06            [24] 1946 	push	ar6
      000414 C0 05            [24] 1947 	push	ar5
      000416 C0 04            [24] 1948 	push	ar4
      000418 C0 03            [24] 1949 	push	ar3
      00041A C0 02            [24] 1950 	push	ar2
      00041C 12r00r00         [24] 1951 	lcall	_decAES
      00041F D0 02            [24] 1952 	pop	ar2
      000421 D0 03            [24] 1953 	pop	ar3
      000423 D0 04            [24] 1954 	pop	ar4
      000425 D0 05            [24] 1955 	pop	ar5
      000427 D0 06            [24] 1956 	pop	ar6
      000429 D0 07            [24] 1957 	pop	ar7
                                   1958 ;	cc1111rf.c:426: return 1;
      00042B D0 07            [24] 1959 	pop	ar7
                                   1960 ;	cc1111rf.c:312: decAES(buf + encoffset, buf + encoffset, len, (rfAESMode & AES_CRYPTO_MODE));
      00042D                       1961 00124$:
                                   1962 ;	cc1111rf.c:314: if(encoffset)
      00042D EE               [12] 1963 	mov	a,r6
      00042E 60 1E            [24] 1964 	jz	00132$
                                   1965 ;	cc1111rf.c:318: if((rfAESMode & AES_CRYPTO_MODE) == ENCCS_MODE_CBCMAC)
      000430 90r00r14         [24] 1966 	mov	dptr,#_rfAESMode
      000433 E0               [24] 1967 	movx	a,@dptr
      000434 FE               [12] 1968 	mov	r6,a
      000435 53 06 F0         [24] 1969 	anl	ar6,#0xF0
      000438 BE 50 09         [24] 1970 	cjne	r6,#0x50,00126$
                                   1971 ;	cc1111rf.c:319: buf[0] = 16;
      00043B 8C 82            [24] 1972 	mov	dpl,r4
      00043D 8D 83            [24] 1973 	mov	dph,r5
      00043F 74 10            [12] 1974 	mov	a,#0x10
      000441 F0               [24] 1975 	movx	@dptr,a
      000442 80 22            [24] 1976 	sjmp	00135$
      000444                       1977 00126$:
                                   1978 ;	cc1111rf.c:321: buf[0] = (u8) len;
      000444 8A 06            [24] 1979 	mov	ar6,r2
      000446 8C 82            [24] 1980 	mov	dpl,r4
      000448 8D 83            [24] 1981 	mov	dph,r5
      00044A EE               [12] 1982 	mov	a,r6
      00044B F0               [24] 1983 	movx	@dptr,a
      00044C 80 18            [24] 1984 	sjmp	00135$
      00044E                       1985 00132$:
                                   1986 ;	cc1111rf.c:325: if((rfAESMode & AES_CRYPTO_MODE) == ENCCS_MODE_CBCMAC)
      00044E 90r00r14         [24] 1987 	mov	dptr,#_rfAESMode
      000451 E0               [24] 1988 	movx	a,@dptr
      000452 FE               [12] 1989 	mov	r6,a
      000453 53 06 F0         [24] 1990 	anl	ar6,#0xF0
      000456 BE 50 08         [24] 1991 	cjne	r6,#0x50,00129$
                                   1992 ;	cc1111rf.c:326: PKTLEN = 16;
      000459 90 DF 02         [24] 1993 	mov	dptr,#_PKTLEN
      00045C 74 10            [12] 1994 	mov	a,#0x10
      00045E F0               [24] 1995 	movx	@dptr,a
      00045F 80 05            [24] 1996 	sjmp	00135$
      000461                       1997 00129$:
                                   1998 ;	cc1111rf.c:328: PKTLEN = (u8) len;
      000461 90 DF 02         [24] 1999 	mov	dptr,#_PKTLEN
      000464 EA               [12] 2000 	mov	a,r2
      000465 F0               [24] 2001 	movx	@dptr,a
      000466                       2002 00135$:
                                   2003 ;	cc1111rf.c:333: rftxbuf = buf;
      000466 90r04r2B         [24] 2004 	mov	dptr,#_transmit_buf_1_96
      000469 E0               [24] 2005 	movx	a,@dptr
      00046A FD               [12] 2006 	mov	r5,a
      00046B A3               [24] 2007 	inc	dptr
      00046C E0               [24] 2008 	movx	a,@dptr
      00046D FE               [12] 2009 	mov	r6,a
      00046E 90r04r07         [24] 2010 	mov	dptr,#_rftxbuf
      000471 ED               [12] 2011 	mov	a,r5
      000472 F0               [24] 2012 	movx	@dptr,a
      000473 EE               [12] 2013 	mov	a,r6
      000474 A3               [24] 2014 	inc	dptr
      000475 F0               [24] 2015 	movx	@dptr,a
                                   2016 ;	cc1111rf.c:336: rfTxCounter = 0;
      000476 90r00r07         [24] 2017 	mov	dptr,#_rfTxCounter
      000479 E4               [12] 2018 	clr	a
      00047A F0               [24] 2019 	movx	@dptr,a
      00047B A3               [24] 2020 	inc	dptr
      00047C F0               [24] 2021 	movx	@dptr,a
                                   2022 ;	cc1111rf.c:393: RFST = RFST_STX;
      00047D 75 E1 03         [24] 2023 	mov	_RFST,#0x03
                                   2024 ;	cc1111rf.c:397: while (MARCSTATE != MARC_STATE_TX && --countdown)
      000480 7D 60            [12] 2025 	mov	r5,#0x60
      000482 7E EA            [12] 2026 	mov	r6,#0xEA
      000484                       2027 00137$:
      000484 90 DF 3B         [24] 2028 	mov	dptr,#_MARCSTATE
      000487 E0               [24] 2029 	movx	a,@dptr
      000488 FC               [12] 2030 	mov	r4,a
      000489 BC 13 02         [24] 2031 	cjne	r4,#0x13,00232$
      00048C 80 1C            [24] 2032 	sjmp	00139$
      00048E                       2033 00232$:
      00048E 1D               [12] 2034 	dec	r5
      00048F BD FF 01         [24] 2035 	cjne	r5,#0xFF,00233$
      000492 1E               [12] 2036 	dec	r6
      000493                       2037 00233$:
      000493 ED               [12] 2038 	mov	a,r5
      000494 4E               [12] 2039 	orl	a,r6
      000495 60 13            [24] 2040 	jz	00139$
                                   2041 ;	cc1111rf.c:400: LED = !LED;
      000497 B2 91            [12] 2042 	cpl	_P1_1
                                   2043 ;	cc1111rf.c:402: usbProcessEvents(); 
      000499 C0 07            [24] 2044 	push	ar7
      00049B C0 06            [24] 2045 	push	ar6
      00049D C0 05            [24] 2046 	push	ar5
      00049F 12r00r00         [24] 2047 	lcall	_usbProcessEvents
      0004A2 D0 05            [24] 2048 	pop	ar5
      0004A4 D0 06            [24] 2049 	pop	ar6
      0004A6 D0 07            [24] 2050 	pop	ar7
      0004A8 80 DA            [24] 2051 	sjmp	00137$
      0004AA                       2052 00139$:
                                   2053 ;	cc1111rf.c:406: LED = 1;
      0004AA D2 91            [12] 2054 	setb	_P1_1
                                   2055 ;	cc1111rf.c:407: if (!countdown)
      0004AC ED               [12] 2056 	mov	a,r5
      0004AD 4E               [12] 2057 	orl	a,r6
      0004AE 70 06            [24] 2058 	jnz	00142$
                                   2059 ;	cc1111rf.c:409: lastCode[1] = LCE_RFTX_NEVER_TX;
      0004B0 90r00r01         [24] 2060 	mov	dptr,#(_lastCode + 0x0001)
      0004B3 74 13            [12] 2061 	mov	a,#0x13
      0004B5 F0               [24] 2062 	movx	@dptr,a
                                   2063 ;	cc1111rf.c:412: while (MARCSTATE == MARC_STATE_TX)
      0004B6                       2064 00142$:
      0004B6 90 DF 3B         [24] 2065 	mov	dptr,#_MARCSTATE
      0004B9 E0               [24] 2066 	movx	a,@dptr
      0004BA FE               [12] 2067 	mov	r6,a
      0004BB BE 13 0B         [24] 2068 	cjne	r6,#0x13,00144$
                                   2069 ;	cc1111rf.c:414: LED = !LED;
      0004BE B2 91            [12] 2070 	cpl	_P1_1
                                   2071 ;	cc1111rf.c:416: usbProcessEvents();
      0004C0 C0 07            [24] 2072 	push	ar7
      0004C2 12r00r00         [24] 2073 	lcall	_usbProcessEvents
      0004C5 D0 07            [24] 2074 	pop	ar7
      0004C7 80 ED            [24] 2075 	sjmp	00142$
      0004C9                       2076 00144$:
                                   2077 ;	cc1111rf.c:421: LED = 0;
      0004C9 C2 91            [12] 2078 	clr	_P1_1
                                   2079 ;	cc1111rf.c:424: PKTLEN = original_pktlen;
      0004CB 90 DF 02         [24] 2080 	mov	dptr,#_PKTLEN
      0004CE EF               [12] 2081 	mov	a,r7
      0004CF F0               [24] 2082 	movx	@dptr,a
                                   2083 ;	cc1111rf.c:426: return 1;
      0004D0 75 82 01         [24] 2084 	mov	dpl,#0x01
      0004D3 22               [24] 2085 	ret
                                   2086 ;------------------------------------------------------------
                                   2087 ;Allocation info for local variables in function 'startRX'
                                   2088 ;------------------------------------------------------------
                                   2089 ;	cc1111rf.c:433: void startRX(void)
                                   2090 ;	-----------------------------------------
                                   2091 ;	 function startRX
                                   2092 ;	-----------------------------------------
      0004D4                       2093 _startRX:
                                   2094 ;	cc1111rf.c:439: RFTXRXIE = 1;
      0004D4 D2 A8            [12] 2095 	setb	_RFTXRXIE
                                   2096 ;	cc1111rf.c:443: memset(rfrxbuf,0,BUFFER_SIZE);
      0004D6 75*00 00         [24] 2097 	mov	_memset_PARM_2,#0x00
      0004D9 75*00 00         [24] 2098 	mov	_memset_PARM_3,#0x00
      0004DC 75*01 02         [24] 2099 	mov	(_memset_PARM_3 + 1),#0x02
      0004DF 90r00r01         [24] 2100 	mov	dptr,#_rfrxbuf
      0004E2 75 F0 00         [24] 2101 	mov	b,#0x00
      0004E5 12r00r00         [24] 2102 	lcall	_memset
                                   2103 ;	cc1111rf.c:446: rfRxCounter[FIRST_BUFFER] = 0;
      0004E8 90r04r01         [24] 2104 	mov	dptr,#_rfRxCounter
      0004EB E4               [12] 2105 	clr	a
      0004EC F0               [24] 2106 	movx	@dptr,a
      0004ED A3               [24] 2107 	inc	dptr
      0004EE F0               [24] 2108 	movx	@dptr,a
                                   2109 ;	cc1111rf.c:447: rfRxCounter[SECOND_BUFFER] = 0;
      0004EF 90r04r03         [24] 2110 	mov	dptr,#(_rfRxCounter + 0x0002)
      0004F2 F0               [24] 2111 	movx	@dptr,a
      0004F3 A3               [24] 2112 	inc	dptr
      0004F4 F0               [24] 2113 	movx	@dptr,a
                                   2114 ;	cc1111rf.c:453: rfRxProcessed[FIRST_BUFFER] = RX_UNPROCESSED;
      0004F5 90r04r05         [24] 2115 	mov	dptr,#_rfRxProcessed
      0004F8 F0               [24] 2116 	movx	@dptr,a
                                   2117 ;	cc1111rf.c:454: rfRxProcessed[SECOND_BUFFER] = RX_PROCESSED;
      0004F9 90r04r06         [24] 2118 	mov	dptr,#(_rfRxProcessed + 0x0001)
      0004FC 04               [12] 2119 	inc	a
      0004FD F0               [24] 2120 	movx	@dptr,a
                                   2121 ;	cc1111rf.c:457: rfRxCurrentBuffer = 0;
      0004FE 90r00r00         [24] 2122 	mov	dptr,#_rfRxCurrentBuffer
      000501 E4               [12] 2123 	clr	a
      000502 F0               [24] 2124 	movx	@dptr,a
                                   2125 ;	cc1111rf.c:459: S1CON &= ~(S1CON_RFIF_0|S1CON_RFIF_1);
      000503 AF 9B            [24] 2126 	mov	r7,_S1CON
      000505 74 FC            [12] 2127 	mov	a,#0xFC
      000507 5F               [12] 2128 	anl	a,r7
      000508 F5 9B            [12] 2129 	mov	_S1CON,a
                                   2130 ;	cc1111rf.c:460: RFIF &= ~RFIF_IRQ_DONE;
      00050A AF E9            [24] 2131 	mov	r7,_RFIF
      00050C 74 EF            [12] 2132 	mov	a,#0xEF
      00050E 5F               [12] 2133 	anl	a,r7
      00050F F5 E9            [12] 2134 	mov	_RFIF,a
                                   2135 ;	cc1111rf.c:493: RFRX;
      000511 75 E1 02         [24] 2136 	mov	_RFST,#0x02
      000514                       2137 00101$:
      000514 90 DF 3B         [24] 2138 	mov	dptr,#_MARCSTATE
      000517 E0               [24] 2139 	movx	a,@dptr
      000518 FF               [12] 2140 	mov	r7,a
      000519 BF 0D F8         [24] 2141 	cjne	r7,#0x0D,00101$
                                   2142 ;	cc1111rf.c:495: RFIM |= RFIF_IRQ_DONE;
      00051C 43 91 10         [24] 2143 	orl	_RFIM,#0x10
      00051F 22               [24] 2144 	ret
                                   2145 ;------------------------------------------------------------
                                   2146 ;Allocation info for local variables in function 'RepeaterStart'
                                   2147 ;------------------------------------------------------------
                                   2148 ;	cc1111rf.c:506: void RepeaterStart()
                                   2149 ;	-----------------------------------------
                                   2150 ;	 function RepeaterStart
                                   2151 ;	-----------------------------------------
      000520                       2152 _RepeaterStart:
                                   2153 ;	cc1111rf.c:508: bRepeatMode = 1;
      000520 90r00r16         [24] 2154 	mov	dptr,#_bRepeatMode
      000523 74 01            [12] 2155 	mov	a,#0x01
      000525 F0               [24] 2156 	movx	@dptr,a
      000526 22               [24] 2157 	ret
                                   2158 ;------------------------------------------------------------
                                   2159 ;Allocation info for local variables in function 'RepeaterStop'
                                   2160 ;------------------------------------------------------------
                                   2161 ;	cc1111rf.c:511: void RepeaterStop()
                                   2162 ;	-----------------------------------------
                                   2163 ;	 function RepeaterStop
                                   2164 ;	-----------------------------------------
      000527                       2165 _RepeaterStop:
                                   2166 ;	cc1111rf.c:513: bRepeatMode = 0;
      000527 90r00r16         [24] 2167 	mov	dptr,#_bRepeatMode
      00052A E4               [12] 2168 	clr	a
      00052B F0               [24] 2169 	movx	@dptr,a
      00052C 22               [24] 2170 	ret
                                   2171 ;------------------------------------------------------------
                                   2172 ;Allocation info for local variables in function 'rfTxRxIntHandler'
                                   2173 ;------------------------------------------------------------
                                   2174 ;	cc1111rf.c:525: void rfTxRxIntHandler(void) __interrupt RFTXRX_VECTOR  // interrupt handler should transmit or receive the next byte
                                   2175 ;	-----------------------------------------
                                   2176 ;	 function rfTxRxIntHandler
                                   2177 ;	-----------------------------------------
      00052D                       2178 _rfTxRxIntHandler:
      00052D C0*00            [24] 2179 	push	bits
      00052F C0 E0            [24] 2180 	push	acc
      000531 C0 F0            [24] 2181 	push	b
      000533 C0 82            [24] 2182 	push	dpl
      000535 C0 83            [24] 2183 	push	dph
      000537 C0 07            [24] 2184 	push	(0+7)
      000539 C0 06            [24] 2185 	push	(0+6)
      00053B C0 05            [24] 2186 	push	(0+5)
      00053D C0 04            [24] 2187 	push	(0+4)
      00053F C0 03            [24] 2188 	push	(0+3)
      000541 C0 02            [24] 2189 	push	(0+2)
      000543 C0 01            [24] 2190 	push	(0+1)
      000545 C0 00            [24] 2191 	push	(0+0)
      000547 C0 D0            [24] 2192 	push	psw
      000549 75 D0 00         [24] 2193 	mov	psw,#0x00
                                   2194 ;	cc1111rf.c:527: lastCode[0] = LC_RFTXRX_VECTOR;
      00054C 90r00r00         [24] 2195 	mov	dptr,#_lastCode
      00054F 74 11            [12] 2196 	mov	a,#0x11
      000551 F0               [24] 2197 	movx	@dptr,a
                                   2198 ;	cc1111rf.c:531: RFTXRXIF = 0;
      000552 C2 89            [12] 2199 	clr	_RFTXRXIF
                                   2200 ;	cc1111rf.c:533: if(MARCSTATE == MARC_STATE_RX)
      000554 90 DF 3B         [24] 2201 	mov	dptr,#_MARCSTATE
      000557 E0               [24] 2202 	movx	a,@dptr
      000558 FF               [12] 2203 	mov	r7,a
      000559 BF 0D 02         [24] 2204 	cjne	r7,#0x0D,00176$
      00055C 80 03            [24] 2205 	sjmp	00177$
      00055E                       2206 00176$:
      00055E 02r06r70         [24] 2207 	ljmp	00130$
      000561                       2208 00177$:
                                   2209 ;	cc1111rf.c:536: LED = 1;
      000561 D2 91            [12] 2210 	setb	_P1_1
                                   2211 ;	cc1111rf.c:538: if(rfRxInfMode)
      000563 90r00r00         [24] 2212 	mov	dptr,#_rfRxInfMode
      000566 E0               [24] 2213 	movx	a,@dptr
      000567 FF               [12] 2214 	mov	r7,a
      000568 60 2A            [24] 2215 	jz	00104$
                                   2216 ;	cc1111rf.c:539: if(rfRxTotalRXLen-- < 256)
      00056A 90r00r01         [24] 2217 	mov	dptr,#_rfRxTotalRXLen
      00056D E0               [24] 2218 	movx	a,@dptr
      00056E FE               [12] 2219 	mov	r6,a
      00056F A3               [24] 2220 	inc	dptr
      000570 E0               [24] 2221 	movx	a,@dptr
      000571 FF               [12] 2222 	mov	r7,a
      000572 90r00r01         [24] 2223 	mov	dptr,#_rfRxTotalRXLen
      000575 E0               [24] 2224 	movx	a,@dptr
      000576 24 FF            [12] 2225 	add	a,#0xFF
      000578 FC               [12] 2226 	mov	r4,a
      000579 A3               [24] 2227 	inc	dptr
      00057A E0               [24] 2228 	movx	a,@dptr
      00057B 34 FF            [12] 2229 	addc	a,#0xFF
      00057D FD               [12] 2230 	mov	r5,a
      00057E 90r00r01         [24] 2231 	mov	dptr,#_rfRxTotalRXLen
      000581 EC               [12] 2232 	mov	a,r4
      000582 F0               [24] 2233 	movx	@dptr,a
      000583 ED               [12] 2234 	mov	a,r5
      000584 A3               [24] 2235 	inc	dptr
      000585 F0               [24] 2236 	movx	@dptr,a
      000586 74 FF            [12] 2237 	mov	a,#0x100 - 0x01
      000588 2F               [12] 2238 	add	a,r7
      000589 40 09            [24] 2239 	jc	00104$
                                   2240 ;	cc1111rf.c:540: PKTCTRL0 &= ~PKTCTRL0_LENGTH_CONFIG;
      00058B 90 DF 04         [24] 2241 	mov	dptr,#_PKTCTRL0
      00058E E0               [24] 2242 	movx	a,@dptr
      00058F FF               [12] 2243 	mov	r7,a
      000590 74 FC            [12] 2244 	mov	a,#0xFC
      000592 5F               [12] 2245 	anl	a,r7
      000593 F0               [24] 2246 	movx	@dptr,a
      000594                       2247 00104$:
                                   2248 ;	cc1111rf.c:541: rf_status = RFST_SRX;
      000594 90r04r0B         [24] 2249 	mov	dptr,#_rf_status
      000597 74 02            [12] 2250 	mov	a,#0x02
      000599 F0               [24] 2251 	movx	@dptr,a
                                   2252 ;	cc1111rf.c:542: rfrxbuf[rfRxCurrentBuffer][rfRxCounter[rfRxCurrentBuffer]++] = RFD;
      00059A 90r00r00         [24] 2253 	mov	dptr,#_rfRxCurrentBuffer
      00059D E0               [24] 2254 	movx	a,@dptr
      00059E 25 E0            [12] 2255 	add	a,acc
      0005A0 FE               [12] 2256 	mov	r6,a
      0005A1 E4               [12] 2257 	clr	a
      0005A2 24r01            [12] 2258 	add	a,#_rfrxbuf
      0005A4 FF               [12] 2259 	mov	r7,a
      0005A5 EE               [12] 2260 	mov	a,r6
      0005A6 34s00            [12] 2261 	addc	a,#(_rfrxbuf >> 8)
      0005A8 FE               [12] 2262 	mov	r6,a
      0005A9 E0               [24] 2263 	movx	a,@dptr
      0005AA 75 F0 02         [24] 2264 	mov	b,#0x02
      0005AD A4               [48] 2265 	mul	ab
      0005AE 24r01            [12] 2266 	add	a,#_rfRxCounter
      0005B0 FC               [12] 2267 	mov	r4,a
      0005B1 74s04            [12] 2268 	mov	a,#(_rfRxCounter >> 8)
      0005B3 35 F0            [12] 2269 	addc	a,b
      0005B5 FD               [12] 2270 	mov	r5,a
      0005B6 8C 82            [24] 2271 	mov	dpl,r4
      0005B8 8D 83            [24] 2272 	mov	dph,r5
      0005BA E0               [24] 2273 	movx	a,@dptr
      0005BB FA               [12] 2274 	mov	r2,a
      0005BC A3               [24] 2275 	inc	dptr
      0005BD E0               [24] 2276 	movx	a,@dptr
      0005BE FB               [12] 2277 	mov	r3,a
      0005BF 74 01            [12] 2278 	mov	a,#0x01
      0005C1 2A               [12] 2279 	add	a,r2
      0005C2 F8               [12] 2280 	mov	r0,a
      0005C3 E4               [12] 2281 	clr	a
      0005C4 3B               [12] 2282 	addc	a,r3
      0005C5 F9               [12] 2283 	mov	r1,a
      0005C6 8C 82            [24] 2284 	mov	dpl,r4
      0005C8 8D 83            [24] 2285 	mov	dph,r5
      0005CA E8               [12] 2286 	mov	a,r0
      0005CB F0               [24] 2287 	movx	@dptr,a
      0005CC E9               [12] 2288 	mov	a,r1
      0005CD A3               [24] 2289 	inc	dptr
      0005CE F0               [24] 2290 	movx	@dptr,a
      0005CF EA               [12] 2291 	mov	a,r2
      0005D0 2F               [12] 2292 	add	a,r7
      0005D1 F5 82            [12] 2293 	mov	dpl,a
      0005D3 EB               [12] 2294 	mov	a,r3
      0005D4 3E               [12] 2295 	addc	a,r6
      0005D5 F5 83            [12] 2296 	mov	dph,a
      0005D7 E5 D9            [12] 2297 	mov	a,_RFD
      0005D9 F0               [24] 2298 	movx	@dptr,a
                                   2299 ;	cc1111rf.c:543: if(rfRxCounter[rfRxCurrentBuffer] >= BUFFER_SIZE || rfRxCounter[rfRxCurrentBuffer] == 0)
      0005DA 90r00r00         [24] 2300 	mov	dptr,#_rfRxCurrentBuffer
      0005DD E0               [24] 2301 	movx	a,@dptr
      0005DE 75 F0 02         [24] 2302 	mov	b,#0x02
      0005E1 A4               [48] 2303 	mul	ab
      0005E2 24r01            [12] 2304 	add	a,#_rfRxCounter
      0005E4 F5 82            [12] 2305 	mov	dpl,a
      0005E6 74s04            [12] 2306 	mov	a,#(_rfRxCounter >> 8)
      0005E8 35 F0            [12] 2307 	addc	a,b
      0005EA F5 83            [12] 2308 	mov	dph,a
      0005EC E0               [24] 2309 	movx	a,@dptr
      0005ED FE               [12] 2310 	mov	r6,a
      0005EE A3               [24] 2311 	inc	dptr
      0005EF E0               [24] 2312 	movx	a,@dptr
      0005F0 FF               [12] 2313 	mov	r7,a
      0005F1 C3               [12] 2314 	clr	c
      0005F2 94 02            [12] 2315 	subb	a,#0x02
      0005F4 50 1A            [24] 2316 	jnc	00105$
      0005F6 90r00r00         [24] 2317 	mov	dptr,#_rfRxCurrentBuffer
      0005F9 E0               [24] 2318 	movx	a,@dptr
      0005FA 75 F0 02         [24] 2319 	mov	b,#0x02
      0005FD A4               [48] 2320 	mul	ab
      0005FE 24r01            [12] 2321 	add	a,#_rfRxCounter
      000600 F5 82            [12] 2322 	mov	dpl,a
      000602 74s04            [12] 2323 	mov	a,#(_rfRxCounter >> 8)
      000604 35 F0            [12] 2324 	addc	a,b
      000606 F5 83            [12] 2325 	mov	dph,a
      000608 E0               [24] 2326 	movx	a,@dptr
      000609 FE               [12] 2327 	mov	r6,a
      00060A A3               [24] 2328 	inc	dptr
      00060B E0               [24] 2329 	movx	a,@dptr
      00060C FF               [12] 2330 	mov	r7,a
      00060D 4E               [12] 2331 	orl	a,r6
      00060E 70 1A            [24] 2332 	jnz	00106$
      000610                       2333 00105$:
                                   2334 ;	cc1111rf.c:545: rfRxCounter[rfRxCurrentBuffer] = BUFFER_SIZE-1;
      000610 90r00r00         [24] 2335 	mov	dptr,#_rfRxCurrentBuffer
      000613 E0               [24] 2336 	movx	a,@dptr
      000614 FF               [12] 2337 	mov	r7,a
      000615 75 F0 02         [24] 2338 	mov	b,#0x02
      000618 A4               [48] 2339 	mul	ab
      000619 24r01            [12] 2340 	add	a,#_rfRxCounter
      00061B F5 82            [12] 2341 	mov	dpl,a
      00061D 74s04            [12] 2342 	mov	a,#(_rfRxCounter >> 8)
      00061F 35 F0            [12] 2343 	addc	a,b
      000621 F5 83            [12] 2344 	mov	dph,a
      000623 74 FF            [12] 2345 	mov	a,#0xFF
      000625 F0               [24] 2346 	movx	@dptr,a
      000626 74 01            [12] 2347 	mov	a,#0x01
      000628 A3               [24] 2348 	inc	dptr
      000629 F0               [24] 2349 	movx	@dptr,a
      00062A                       2350 00106$:
                                   2351 ;	cc1111rf.c:548: if(!rfRxTotalRXLen && rfRxInfMode)
      00062A 90r00r01         [24] 2352 	mov	dptr,#_rfRxTotalRXLen
      00062D E0               [24] 2353 	movx	a,@dptr
      00062E FE               [12] 2354 	mov	r6,a
      00062F A3               [24] 2355 	inc	dptr
      000630 E0               [24] 2356 	movx	a,@dptr
      000631 FF               [12] 2357 	mov	r7,a
      000632 4E               [12] 2358 	orl	a,r6
      000633 60 03            [24] 2359 	jz	00182$
      000635 02r08r26         [24] 2360 	ljmp	00132$
      000638                       2361 00182$:
      000638 90r00r00         [24] 2362 	mov	dptr,#_rfRxInfMode
      00063B E0               [24] 2363 	movx	a,@dptr
      00063C FF               [12] 2364 	mov	r7,a
      00063D 70 03            [24] 2365 	jnz	00183$
      00063F 02r08r26         [24] 2366 	ljmp	00132$
      000642                       2367 00183$:
                                   2368 ;	cc1111rf.c:550: rfRxTotalRXLen = rfRxLargeLen;
      000642 90r00r03         [24] 2369 	mov	dptr,#_rfRxLargeLen
      000645 E0               [24] 2370 	movx	a,@dptr
      000646 FE               [12] 2371 	mov	r6,a
      000647 A3               [24] 2372 	inc	dptr
      000648 E0               [24] 2373 	movx	a,@dptr
      000649 FF               [12] 2374 	mov	r7,a
      00064A 90r00r01         [24] 2375 	mov	dptr,#_rfRxTotalRXLen
      00064D EE               [12] 2376 	mov	a,r6
      00064E F0               [24] 2377 	movx	@dptr,a
      00064F EF               [12] 2378 	mov	a,r7
      000650 A3               [24] 2379 	inc	dptr
      000651 F0               [24] 2380 	movx	@dptr,a
                                   2381 ;	cc1111rf.c:551: PKTLEN = (u8) (rfRxTotalRXLen % 256);
      000652 90r00r01         [24] 2382 	mov	dptr,#_rfRxTotalRXLen
      000655 E0               [24] 2383 	movx	a,@dptr
      000656 FE               [12] 2384 	mov	r6,a
      000657 A3               [24] 2385 	inc	dptr
      000658 E0               [24] 2386 	movx	a,@dptr
      000659 90 DF 02         [24] 2387 	mov	dptr,#_PKTLEN
      00065C EE               [12] 2388 	mov	a,r6
      00065D F0               [24] 2389 	movx	@dptr,a
                                   2390 ;	cc1111rf.c:552: PKTCTRL0 &= ~PKTCTRL0_LENGTH_CONFIG;
      00065E 90 DF 04         [24] 2391 	mov	dptr,#_PKTCTRL0
      000661 E0               [24] 2392 	movx	a,@dptr
      000662 FF               [12] 2393 	mov	r7,a
      000663 74 FC            [12] 2394 	mov	a,#0xFC
      000665 5F               [12] 2395 	anl	a,r7
      000666 F0               [24] 2396 	movx	@dptr,a
                                   2397 ;	cc1111rf.c:553: PKTCTRL0 |= PKTCTRL0_LENGTH_CONFIG_INF;
      000667 E0               [24] 2398 	movx	a,@dptr
      000668 FF               [12] 2399 	mov	r7,a
      000669 74 02            [12] 2400 	mov	a,#0x02
      00066B 4F               [12] 2401 	orl	a,r7
      00066C F0               [24] 2402 	movx	@dptr,a
      00066D 02r08r26         [24] 2403 	ljmp	00132$
      000670                       2404 00130$:
                                   2405 ;	cc1111rf.c:557: else if(MARCSTATE == MARC_STATE_TX)
      000670 90 DF 3B         [24] 2406 	mov	dptr,#_MARCSTATE
      000673 E0               [24] 2407 	movx	a,@dptr
      000674 FF               [12] 2408 	mov	r7,a
      000675 BF 13 02         [24] 2409 	cjne	r7,#0x13,00184$
      000678 80 03            [24] 2410 	sjmp	00185$
      00067A                       2411 00184$:
      00067A 02r08r26         [24] 2412 	ljmp	00132$
      00067D                       2413 00185$:
                                   2414 ;	cc1111rf.c:560: if (rfTxInfMode)
      00067D 90r00r13         [24] 2415 	mov	dptr,#_rfTxInfMode
      000680 E0               [24] 2416 	movx	a,@dptr
      000681 FF               [12] 2417 	mov	r7,a
      000682 70 03            [24] 2418 	jnz	00186$
      000684 02r07rB7         [24] 2419 	ljmp	00125$
      000687                       2420 00186$:
                                   2421 ;	cc1111rf.c:567: macdata.tLastHop ++;
      000687 90r04r1D         [24] 2422 	mov	dptr,#(_macdata + 0x000d)
      00068A E0               [24] 2423 	movx	a,@dptr
      00068B FE               [12] 2424 	mov	r6,a
      00068C A3               [24] 2425 	inc	dptr
      00068D E0               [24] 2426 	movx	a,@dptr
      00068E FF               [12] 2427 	mov	r7,a
      00068F 0E               [12] 2428 	inc	r6
      000690 BE 00 01         [24] 2429 	cjne	r6,#0x00,00187$
      000693 0F               [12] 2430 	inc	r7
      000694                       2431 00187$:
      000694 90r04r1D         [24] 2432 	mov	dptr,#(_macdata + 0x000d)
      000697 EE               [12] 2433 	mov	a,r6
      000698 F0               [24] 2434 	movx	@dptr,a
      000699 EF               [12] 2435 	mov	a,r7
      00069A A3               [24] 2436 	inc	dptr
      00069B F0               [24] 2437 	movx	@dptr,a
                                   2438 ;	cc1111rf.c:569: if (rfTxCounter == rfTxBufferEnd)
      00069C 90r00r07         [24] 2439 	mov	dptr,#_rfTxCounter
      00069F E0               [24] 2440 	movx	a,@dptr
      0006A0 FE               [12] 2441 	mov	r6,a
      0006A1 A3               [24] 2442 	inc	dptr
      0006A2 E0               [24] 2443 	movx	a,@dptr
      0006A3 FF               [12] 2444 	mov	r7,a
      0006A4 90r00r0B         [24] 2445 	mov	dptr,#_rfTxBufferEnd
      0006A7 E0               [24] 2446 	movx	a,@dptr
      0006A8 FC               [12] 2447 	mov	r4,a
      0006A9 A3               [24] 2448 	inc	dptr
      0006AA E0               [24] 2449 	movx	a,@dptr
      0006AB FD               [12] 2450 	mov	r5,a
      0006AC EE               [12] 2451 	mov	a,r6
      0006AD B5 04 06         [24] 2452 	cjne	a,ar4,00188$
      0006B0 EF               [12] 2453 	mov	a,r7
      0006B1 B5 05 02         [24] 2454 	cjne	a,ar5,00188$
      0006B4 80 03            [24] 2455 	sjmp	00189$
      0006B6                       2456 00188$:
      0006B6 02r07r8A         [24] 2457 	ljmp	00121$
      0006B9                       2458 00189$:
                                   2459 ;	cc1111rf.c:571: if (rfTxRepeatCounter)
      0006B9 90r00r09         [24] 2460 	mov	dptr,#_rfTxRepeatCounter
      0006BC E0               [24] 2461 	movx	a,@dptr
      0006BD FE               [12] 2462 	mov	r6,a
      0006BE A3               [24] 2463 	inc	dptr
      0006BF E0               [24] 2464 	movx	a,@dptr
      0006C0 FF               [12] 2465 	mov	r7,a
      0006C1 4E               [12] 2466 	orl	a,r6
      0006C2 60 37            [24] 2467 	jz	00118$
                                   2468 ;	cc1111rf.c:573: if(rfTxRepeatCounter != 0xff)
      0006C4 90r00r09         [24] 2469 	mov	dptr,#_rfTxRepeatCounter
      0006C7 E0               [24] 2470 	movx	a,@dptr
      0006C8 FE               [12] 2471 	mov	r6,a
      0006C9 A3               [24] 2472 	inc	dptr
      0006CA E0               [24] 2473 	movx	a,@dptr
      0006CB FF               [12] 2474 	mov	r7,a
      0006CC BE FF 05         [24] 2475 	cjne	r6,#0xFF,00191$
      0006CF BF 00 02         [24] 2476 	cjne	r7,#0x00,00191$
      0006D2 80 14            [24] 2477 	sjmp	00112$
      0006D4                       2478 00191$:
                                   2479 ;	cc1111rf.c:574: rfTxRepeatCounter--;
      0006D4 90r00r09         [24] 2480 	mov	dptr,#_rfTxRepeatCounter
      0006D7 E0               [24] 2481 	movx	a,@dptr
      0006D8 24 FF            [12] 2482 	add	a,#0xFF
      0006DA FE               [12] 2483 	mov	r6,a
      0006DB A3               [24] 2484 	inc	dptr
      0006DC E0               [24] 2485 	movx	a,@dptr
      0006DD 34 FF            [12] 2486 	addc	a,#0xFF
      0006DF FF               [12] 2487 	mov	r7,a
      0006E0 90r00r09         [24] 2488 	mov	dptr,#_rfTxRepeatCounter
      0006E3 EE               [12] 2489 	mov	a,r6
      0006E4 F0               [24] 2490 	movx	@dptr,a
      0006E5 EF               [12] 2491 	mov	a,r7
      0006E6 A3               [24] 2492 	inc	dptr
      0006E7 F0               [24] 2493 	movx	@dptr,a
      0006E8                       2494 00112$:
                                   2495 ;	cc1111rf.c:575: rfTxCounter = rfTxRepeatOffset;
      0006E8 90r00r0F         [24] 2496 	mov	dptr,#_rfTxRepeatOffset
      0006EB E0               [24] 2497 	movx	a,@dptr
      0006EC FE               [12] 2498 	mov	r6,a
      0006ED A3               [24] 2499 	inc	dptr
      0006EE E0               [24] 2500 	movx	a,@dptr
      0006EF FF               [12] 2501 	mov	r7,a
      0006F0 90r00r07         [24] 2502 	mov	dptr,#_rfTxCounter
      0006F3 EE               [12] 2503 	mov	a,r6
      0006F4 F0               [24] 2504 	movx	@dptr,a
      0006F5 EF               [12] 2505 	mov	a,r7
      0006F6 A3               [24] 2506 	inc	dptr
      0006F7 F0               [24] 2507 	movx	@dptr,a
      0006F8 02r07r8A         [24] 2508 	ljmp	00121$
      0006FB                       2509 00118$:
                                   2510 ;	cc1111rf.c:581: rftxbuf[(rfTxCurBufIdx * rfTxBufferEnd)] = BUFFER_AVAILABLE;
      0006FB 90r00r0B         [24] 2511 	mov	dptr,#_rfTxBufferEnd
      0006FE E0               [24] 2512 	movx	a,@dptr
      0006FF F5*00            [12] 2513 	mov	__mulint_PARM_2,a
      000701 A3               [24] 2514 	inc	dptr
      000702 E0               [24] 2515 	movx	a,@dptr
      000703 F5*01            [12] 2516 	mov	(__mulint_PARM_2 + 1),a
      000705 90r00r05         [24] 2517 	mov	dptr,#_rfTxCurBufIdx
      000708 E0               [24] 2518 	movx	a,@dptr
      000709 FF               [12] 2519 	mov	r7,a
      00070A 7E 00            [12] 2520 	mov	r6,#0x00
      00070C 8F 82            [24] 2521 	mov	dpl,r7
      00070E 8E 83            [24] 2522 	mov	dph,r6
      000710 12r00r00         [24] 2523 	lcall	__mulint
      000713 AE 82            [24] 2524 	mov	r6,dpl
      000715 AF 83            [24] 2525 	mov	r7,dph
      000717 90r04r07         [24] 2526 	mov	dptr,#_rftxbuf
      00071A E0               [24] 2527 	movx	a,@dptr
      00071B FC               [12] 2528 	mov	r4,a
      00071C A3               [24] 2529 	inc	dptr
      00071D E0               [24] 2530 	movx	a,@dptr
      00071E FD               [12] 2531 	mov	r5,a
      00071F EE               [12] 2532 	mov	a,r6
      000720 2C               [12] 2533 	add	a,r4
      000721 F5 82            [12] 2534 	mov	dpl,a
      000723 EF               [12] 2535 	mov	a,r7
      000724 3D               [12] 2536 	addc	a,r5
      000725 F5 83            [12] 2537 	mov	dph,a
      000727 E4               [12] 2538 	clr	a
      000728 F0               [24] 2539 	movx	@dptr,a
                                   2540 ;	cc1111rf.c:583: if (++rfTxCurBufIdx == rfTxBufCount)
      000729 90r00r05         [24] 2541 	mov	dptr,#_rfTxCurBufIdx
      00072C E0               [24] 2542 	movx	a,@dptr
      00072D 24 01            [12] 2543 	add	a,#0x01
      00072F F0               [24] 2544 	movx	@dptr,a
      000730 E0               [24] 2545 	movx	a,@dptr
      000731 FF               [12] 2546 	mov	r7,a
      000732 90r00r06         [24] 2547 	mov	dptr,#_rfTxBufCount
      000735 E0               [24] 2548 	movx	a,@dptr
      000736 FE               [12] 2549 	mov	r6,a
      000737 EF               [12] 2550 	mov	a,r7
      000738 B5 06 05         [24] 2551 	cjne	a,ar6,00114$
                                   2552 ;	cc1111rf.c:585: rfTxCurBufIdx = 0;
      00073B 90r00r05         [24] 2553 	mov	dptr,#_rfTxCurBufIdx
      00073E E4               [12] 2554 	clr	a
      00073F F0               [24] 2555 	movx	@dptr,a
      000740                       2556 00114$:
                                   2557 ;	cc1111rf.c:588: if (rftxbuf[(rfTxCurBufIdx * rfTxBufferEnd)] == BUFFER_AVAILABLE)
      000740 90r00r0B         [24] 2558 	mov	dptr,#_rfTxBufferEnd
      000743 E0               [24] 2559 	movx	a,@dptr
      000744 F5*00            [12] 2560 	mov	__mulint_PARM_2,a
      000746 A3               [24] 2561 	inc	dptr
      000747 E0               [24] 2562 	movx	a,@dptr
      000748 F5*01            [12] 2563 	mov	(__mulint_PARM_2 + 1),a
      00074A 90r00r05         [24] 2564 	mov	dptr,#_rfTxCurBufIdx
      00074D E0               [24] 2565 	movx	a,@dptr
      00074E FF               [12] 2566 	mov	r7,a
      00074F 7E 00            [12] 2567 	mov	r6,#0x00
      000751 8F 82            [24] 2568 	mov	dpl,r7
      000753 8E 83            [24] 2569 	mov	dph,r6
      000755 12r00r00         [24] 2570 	lcall	__mulint
      000758 AE 82            [24] 2571 	mov	r6,dpl
      00075A AF 83            [24] 2572 	mov	r7,dph
      00075C 90r04r07         [24] 2573 	mov	dptr,#_rftxbuf
      00075F E0               [24] 2574 	movx	a,@dptr
      000760 FC               [12] 2575 	mov	r4,a
      000761 A3               [24] 2576 	inc	dptr
      000762 E0               [24] 2577 	movx	a,@dptr
      000763 FD               [12] 2578 	mov	r5,a
      000764 EE               [12] 2579 	mov	a,r6
      000765 2C               [12] 2580 	add	a,r4
      000766 FE               [12] 2581 	mov	r6,a
      000767 EF               [12] 2582 	mov	a,r7
      000768 3D               [12] 2583 	addc	a,r5
      000769 FF               [12] 2584 	mov	r7,a
      00076A 8E 82            [24] 2585 	mov	dpl,r6
      00076C 8F 83            [24] 2586 	mov	dph,r7
      00076E E0               [24] 2587 	movx	a,@dptr
      00076F 70 10            [24] 2588 	jnz	00116$
                                   2589 ;	cc1111rf.c:591: macdata.mac_state = MAC_STATE_NONHOPPING;
      000771 90r04r10         [24] 2590 	mov	dptr,#_macdata
      000774 E4               [12] 2591 	clr	a
      000775 F0               [24] 2592 	movx	@dptr,a
                                   2593 ;	cc1111rf.c:592: lastCode[1] = LCE_DROPPED_PACKET;
      000776 90r00r01         [24] 2594 	mov	dptr,#(_lastCode + 0x0001)
      000779 74 12            [12] 2595 	mov	a,#0x12
      00077B F0               [24] 2596 	movx	@dptr,a
                                   2597 ;	cc1111rf.c:593: resetRFSTATE();
      00077C 12r00r70         [24] 2598 	lcall	_resetRFSTATE
                                   2599 ;	cc1111rf.c:594: LED = 0;
      00077F C2 91            [12] 2600 	clr	_P1_1
      000781                       2601 00116$:
                                   2602 ;	cc1111rf.c:598: rfTxCounter = 1;
      000781 90r00r07         [24] 2603 	mov	dptr,#_rfTxCounter
      000784 74 01            [12] 2604 	mov	a,#0x01
      000786 F0               [24] 2605 	movx	@dptr,a
      000787 E4               [12] 2606 	clr	a
      000788 A3               [24] 2607 	inc	dptr
      000789 F0               [24] 2608 	movx	@dptr,a
      00078A                       2609 00121$:
                                   2610 ;	cc1111rf.c:602: if(rfTxTotalTXLen-- == 255)
      00078A 90r00r11         [24] 2611 	mov	dptr,#_rfTxTotalTXLen
      00078D E0               [24] 2612 	movx	a,@dptr
      00078E FE               [12] 2613 	mov	r6,a
      00078F A3               [24] 2614 	inc	dptr
      000790 E0               [24] 2615 	movx	a,@dptr
      000791 FF               [12] 2616 	mov	r7,a
      000792 90r00r11         [24] 2617 	mov	dptr,#_rfTxTotalTXLen
      000795 E0               [24] 2618 	movx	a,@dptr
      000796 24 FF            [12] 2619 	add	a,#0xFF
      000798 FC               [12] 2620 	mov	r4,a
      000799 A3               [24] 2621 	inc	dptr
      00079A E0               [24] 2622 	movx	a,@dptr
      00079B 34 FF            [12] 2623 	addc	a,#0xFF
      00079D FD               [12] 2624 	mov	r5,a
      00079E 90r00r11         [24] 2625 	mov	dptr,#_rfTxTotalTXLen
      0007A1 EC               [12] 2626 	mov	a,r4
      0007A2 F0               [24] 2627 	movx	@dptr,a
      0007A3 ED               [12] 2628 	mov	a,r5
      0007A4 A3               [24] 2629 	inc	dptr
      0007A5 F0               [24] 2630 	movx	@dptr,a
      0007A6 BE FF 22         [24] 2631 	cjne	r6,#0xFF,00126$
      0007A9 BF 00 1F         [24] 2632 	cjne	r7,#0x00,00126$
                                   2633 ;	cc1111rf.c:604: PKTCTRL0 &= ~PKTCTRL0_LENGTH_CONFIG;
      0007AC 90 DF 04         [24] 2634 	mov	dptr,#_PKTCTRL0
      0007AF E0               [24] 2635 	movx	a,@dptr
      0007B0 FF               [12] 2636 	mov	r7,a
      0007B1 74 FC            [12] 2637 	mov	a,#0xFC
      0007B3 5F               [12] 2638 	anl	a,r7
      0007B4 F0               [24] 2639 	movx	@dptr,a
      0007B5 80 14            [24] 2640 	sjmp	00126$
      0007B7                       2641 00125$:
                                   2642 ;	cc1111rf.c:611: rfTxTotalTXLen--;
      0007B7 90r00r11         [24] 2643 	mov	dptr,#_rfTxTotalTXLen
      0007BA E0               [24] 2644 	movx	a,@dptr
      0007BB 24 FF            [12] 2645 	add	a,#0xFF
      0007BD FE               [12] 2646 	mov	r6,a
      0007BE A3               [24] 2647 	inc	dptr
      0007BF E0               [24] 2648 	movx	a,@dptr
      0007C0 34 FF            [12] 2649 	addc	a,#0xFF
      0007C2 FF               [12] 2650 	mov	r7,a
      0007C3 90r00r11         [24] 2651 	mov	dptr,#_rfTxTotalTXLen
      0007C6 EE               [12] 2652 	mov	a,r6
      0007C7 F0               [24] 2653 	movx	@dptr,a
      0007C8 EF               [12] 2654 	mov	a,r7
      0007C9 A3               [24] 2655 	inc	dptr
      0007CA F0               [24] 2656 	movx	@dptr,a
      0007CB                       2657 00126$:
                                   2658 ;	cc1111rf.c:612: rf_status = RFST_STX;
      0007CB 90r04r0B         [24] 2659 	mov	dptr,#_rf_status
      0007CE 74 03            [12] 2660 	mov	a,#0x03
      0007D0 F0               [24] 2661 	movx	@dptr,a
                                   2662 ;	cc1111rf.c:614: RFD = rftxbuf[(rfTxCurBufIdx * rfTxBufferEnd) + rfTxCounter++];
      0007D1 90r00r0B         [24] 2663 	mov	dptr,#_rfTxBufferEnd
      0007D4 E0               [24] 2664 	movx	a,@dptr
      0007D5 F5*00            [12] 2665 	mov	__mulint_PARM_2,a
      0007D7 A3               [24] 2666 	inc	dptr
      0007D8 E0               [24] 2667 	movx	a,@dptr
      0007D9 F5*01            [12] 2668 	mov	(__mulint_PARM_2 + 1),a
      0007DB 90r00r05         [24] 2669 	mov	dptr,#_rfTxCurBufIdx
      0007DE E0               [24] 2670 	movx	a,@dptr
      0007DF FF               [12] 2671 	mov	r7,a
      0007E0 7E 00            [12] 2672 	mov	r6,#0x00
      0007E2 8F 82            [24] 2673 	mov	dpl,r7
      0007E4 8E 83            [24] 2674 	mov	dph,r6
      0007E6 12r00r00         [24] 2675 	lcall	__mulint
      0007E9 AE 82            [24] 2676 	mov	r6,dpl
      0007EB AF 83            [24] 2677 	mov	r7,dph
      0007ED 90r00r07         [24] 2678 	mov	dptr,#_rfTxCounter
      0007F0 E0               [24] 2679 	movx	a,@dptr
      0007F1 FC               [12] 2680 	mov	r4,a
      0007F2 A3               [24] 2681 	inc	dptr
      0007F3 E0               [24] 2682 	movx	a,@dptr
      0007F4 FD               [12] 2683 	mov	r5,a
      0007F5 90r00r07         [24] 2684 	mov	dptr,#_rfTxCounter
      0007F8 E0               [24] 2685 	movx	a,@dptr
      0007F9 24 01            [12] 2686 	add	a,#0x01
      0007FB F0               [24] 2687 	movx	@dptr,a
      0007FC A3               [24] 2688 	inc	dptr
      0007FD E0               [24] 2689 	movx	a,@dptr
      0007FE 34 00            [12] 2690 	addc	a,#0x00
      000800 F0               [24] 2691 	movx	@dptr,a
      000801 EC               [12] 2692 	mov	a,r4
      000802 2E               [12] 2693 	add	a,r6
      000803 FE               [12] 2694 	mov	r6,a
      000804 ED               [12] 2695 	mov	a,r5
      000805 3F               [12] 2696 	addc	a,r7
      000806 FF               [12] 2697 	mov	r7,a
      000807 90r04r07         [24] 2698 	mov	dptr,#_rftxbuf
      00080A E0               [24] 2699 	movx	a,@dptr
      00080B FC               [12] 2700 	mov	r4,a
      00080C A3               [24] 2701 	inc	dptr
      00080D E0               [24] 2702 	movx	a,@dptr
      00080E FD               [12] 2703 	mov	r5,a
      00080F EE               [12] 2704 	mov	a,r6
      000810 2C               [12] 2705 	add	a,r4
      000811 F5 82            [12] 2706 	mov	dpl,a
      000813 EF               [12] 2707 	mov	a,r7
      000814 3D               [12] 2708 	addc	a,r5
      000815 F5 83            [12] 2709 	mov	dph,a
      000817 E0               [24] 2710 	movx	a,@dptr
      000818 F5 D9            [12] 2711 	mov	_RFD,a
                                   2712 ;	cc1111rf.c:615: txTotal++;
      00081A 90r04r09         [24] 2713 	mov	dptr,#_txTotal
      00081D E0               [24] 2714 	movx	a,@dptr
      00081E 24 01            [12] 2715 	add	a,#0x01
      000820 F0               [24] 2716 	movx	@dptr,a
      000821 A3               [24] 2717 	inc	dptr
      000822 E0               [24] 2718 	movx	a,@dptr
      000823 34 00            [12] 2719 	addc	a,#0x00
      000825 F0               [24] 2720 	movx	@dptr,a
      000826                       2721 00132$:
      000826 D0 D0            [24] 2722 	pop	psw
      000828 D0 00            [24] 2723 	pop	(0+0)
      00082A D0 01            [24] 2724 	pop	(0+1)
      00082C D0 02            [24] 2725 	pop	(0+2)
      00082E D0 03            [24] 2726 	pop	(0+3)
      000830 D0 04            [24] 2727 	pop	(0+4)
      000832 D0 05            [24] 2728 	pop	(0+5)
      000834 D0 06            [24] 2729 	pop	(0+6)
      000836 D0 07            [24] 2730 	pop	(0+7)
      000838 D0 83            [24] 2731 	pop	dph
      00083A D0 82            [24] 2732 	pop	dpl
      00083C D0 F0            [24] 2733 	pop	b
      00083E D0 E0            [24] 2734 	pop	acc
      000840 D0*00            [24] 2735 	pop	bits
      000842 32               [24] 2736 	reti
                                   2737 ;------------------------------------------------------------
                                   2738 ;Allocation info for local variables in function 'rfIntHandler'
                                   2739 ;------------------------------------------------------------
                                   2740 ;encoffset                 Allocated with name '_rfIntHandler_encoffset_1_136'
                                   2741 ;------------------------------------------------------------
                                   2742 ;	cc1111rf.c:619: void rfIntHandler(void) __interrupt RF_VECTOR  // interrupt handler should trigger on rf events
                                   2743 ;	-----------------------------------------
                                   2744 ;	 function rfIntHandler
                                   2745 ;	-----------------------------------------
      000843                       2746 _rfIntHandler:
      000843 C0*00            [24] 2747 	push	bits
      000845 C0 E0            [24] 2748 	push	acc
      000847 C0 F0            [24] 2749 	push	b
      000849 C0 82            [24] 2750 	push	dpl
      00084B C0 83            [24] 2751 	push	dph
      00084D C0 07            [24] 2752 	push	(0+7)
      00084F C0 06            [24] 2753 	push	(0+6)
      000851 C0 05            [24] 2754 	push	(0+5)
      000853 C0 04            [24] 2755 	push	(0+4)
      000855 C0 03            [24] 2756 	push	(0+3)
      000857 C0 02            [24] 2757 	push	(0+2)
      000859 C0 01            [24] 2758 	push	(0+1)
      00085B C0 00            [24] 2759 	push	(0+0)
      00085D C0 D0            [24] 2760 	push	psw
      00085F 75 D0 00         [24] 2761 	mov	psw,#0x00
                                   2762 ;	cc1111rf.c:621: u8 encoffset= 0;
      000862 75*03 00         [24] 2763 	mov	_rfIntHandler_encoffset_1_136,#0x00
                                   2764 ;	cc1111rf.c:624: lastCode[0] = LC_RF_VECTOR;
      000865 90r00r00         [24] 2765 	mov	dptr,#_lastCode
      000868 74 10            [12] 2766 	mov	a,#0x10
      00086A F0               [24] 2767 	movx	@dptr,a
                                   2768 ;	cc1111rf.c:625: S1CON &= ~(S1CON_RFIF_0 | S1CON_RFIF_1);
      00086B AE 9B            [24] 2769 	mov	r6,_S1CON
      00086D 74 FC            [12] 2770 	mov	a,#0xFC
      00086F 5E               [12] 2771 	anl	a,r6
      000870 F5 9B            [12] 2772 	mov	_S1CON,a
                                   2773 ;	cc1111rf.c:628: rfif |= RFIF;
      000872 E5 E9            [12] 2774 	mov	a,_RFIF
      000874 42*00            [12] 2775 	orl	_rfif,a
                                   2776 ;	cc1111rf.c:630: if (RFIF & RFIF_IRQ_SFD)
      000876 E5 E9            [12] 2777 	mov	a,_RFIF
      000878 30 E0 20         [24] 2778 	jnb	acc.0,00102$
                                   2779 ;	cc1111rf.c:634: rf_tLastRecv = T2CT | (rf_MAC_timer << 8);
      00087B 90r04r0C         [24] 2780 	mov	dptr,#_rf_MAC_timer
      00087E E0               [24] 2781 	movx	a,@dptr
      00087F FD               [12] 2782 	mov	r5,a
      000880 A3               [24] 2783 	inc	dptr
      000881 E0               [24] 2784 	movx	a,@dptr
      000882 8D 06            [24] 2785 	mov	ar6,r5
      000884 7D 00            [12] 2786 	mov	r5,#0x00
      000886 AB 9C            [24] 2787 	mov	r3,_T2CT
      000888 7C 00            [12] 2788 	mov	r4,#0x00
      00088A 90r04r0E         [24] 2789 	mov	dptr,#_rf_tLastRecv
      00088D ED               [12] 2790 	mov	a,r5
      00088E 4B               [12] 2791 	orl	a,r3
      00088F F0               [24] 2792 	movx	@dptr,a
      000890 EE               [12] 2793 	mov	a,r6
      000891 4C               [12] 2794 	orl	a,r4
      000892 A3               [24] 2795 	inc	dptr
      000893 F0               [24] 2796 	movx	@dptr,a
                                   2797 ;	cc1111rf.c:635: RFIF &= ~RFIF_IRQ_SFD;
      000894 AE E9            [24] 2798 	mov	r6,_RFIF
      000896 74 FE            [12] 2799 	mov	a,#0xFE
      000898 5E               [12] 2800 	anl	a,r6
      000899 F5 E9            [12] 2801 	mov	_RFIF,a
      00089B                       2802 00102$:
                                   2803 ;	cc1111rf.c:640: if (RFIF & ( RFIF_IRQ_DONE | RFIF_IRQ_RXOVF | RFIF_IRQ_TIMEOUT ))
      00089B E5 E9            [12] 2804 	mov	a,_RFIF
      00089D 54 70            [12] 2805 	anl	a,#0x70
      00089F 70 03            [24] 2806 	jnz	00152$
      0008A1 02r0Ar26         [24] 2807 	ljmp	00117$
      0008A4                       2808 00152$:
                                   2809 ;	cc1111rf.c:643: if(rf_status == RFST_STX)
      0008A4 90r04r0B         [24] 2810 	mov	dptr,#_rf_status
      0008A7 E0               [24] 2811 	movx	a,@dptr
      0008A8 FE               [12] 2812 	mov	r6,a
      0008A9 BE 03 0A         [24] 2813 	cjne	r6,#0x03,00114$
                                   2814 ;	cc1111rf.c:649: rfif &= ~( RFIF_IRQ_DONE | RFIF_IRQ_RXOVF | RFIF_IRQ_TIMEOUT );
      0008AC AE*00            [24] 2815 	mov	r6,_rfif
      0008AE 74 8F            [12] 2816 	mov	a,#0x8F
      0008B0 5E               [12] 2817 	anl	a,r6
      0008B1 F5*00            [12] 2818 	mov	_rfif,a
      0008B3 02r0Ar1F         [24] 2819 	ljmp	00115$
      0008B6                       2820 00114$:
                                   2821 ;	cc1111rf.c:655: if(rfRxProcessed[!rfRxCurrentBuffer] == RX_PROCESSED)
      0008B6 90r00r00         [24] 2822 	mov	dptr,#_rfRxCurrentBuffer
      0008B9 E0               [24] 2823 	movx	a,@dptr
      0008BA FE               [12] 2824 	mov	r6,a
      0008BB B4 01 00         [24] 2825 	cjne	a,#0x01,00155$
      0008BE                       2826 00155$:
      0008BE E4               [12] 2827 	clr	a
      0008BF 33               [12] 2828 	rlc	a
      0008C0 24r05            [12] 2829 	add	a,#_rfRxProcessed
      0008C2 F5 82            [12] 2830 	mov	dpl,a
      0008C4 E4               [12] 2831 	clr	a
      0008C5 34s04            [12] 2832 	addc	a,#(_rfRxProcessed >> 8)
      0008C7 F5 83            [12] 2833 	mov	dph,a
      0008C9 E0               [24] 2834 	movx	a,@dptr
      0008CA FE               [12] 2835 	mov	r6,a
      0008CB BE 01 02         [24] 2836 	cjne	r6,#0x01,00156$
      0008CE 80 03            [24] 2837 	sjmp	00157$
      0008D0                       2838 00156$:
      0008D0 02r09rFC         [24] 2839 	ljmp	00111$
      0008D3                       2840 00157$:
                                   2841 ;	cc1111rf.c:660: if(rfAESMode & AES_CRYPTO_IN_ENABLE)
      0008D3 90r00r14         [24] 2842 	mov	dptr,#_rfAESMode
      0008D6 E0               [24] 2843 	movx	a,@dptr
      0008D7 FE               [12] 2844 	mov	r6,a
      0008D8 20 E1 03         [24] 2845 	jb	acc.1,00158$
      0008DB 02r09rD5         [24] 2846 	ljmp	00109$
      0008DE                       2847 00158$:
                                   2848 ;	cc1111rf.c:662: if((PKTCTRL0 & PKTCTRL0_LENGTH_CONFIG) == PKTCTRL0_LENGTH_CONFIG_VAR)
      0008DE 90 DF 04         [24] 2849 	mov	dptr,#_PKTCTRL0
      0008E1 E0               [24] 2850 	movx	a,@dptr
      0008E2 FE               [12] 2851 	mov	r6,a
      0008E3 53 06 03         [24] 2852 	anl	ar6,#0x03
      0008E6 BE 01 03         [24] 2853 	cjne	r6,#0x01,00104$
                                   2854 ;	cc1111rf.c:663: encoffset= 1;
      0008E9 75*03 01         [24] 2855 	mov	_rfIntHandler_encoffset_1_136,#0x01
      0008EC                       2856 00104$:
                                   2857 ;	cc1111rf.c:664: if((rfAESMode & AES_CRYPTO_IN_TYPE) == AES_CRYPTO_IN_ENCRYPT)
      0008EC 90r00r14         [24] 2858 	mov	dptr,#_rfAESMode
      0008EF E0               [24] 2859 	movx	a,@dptr
      0008F0 FE               [12] 2860 	mov	r6,a
      0008F1 53 06 01         [24] 2861 	anl	ar6,#0x01
      0008F4 BE 01 70         [24] 2862 	cjne	r6,#0x01,00106$
                                   2863 ;	cc1111rf.c:665: encAES(&rfrxbuf[rfRxCurrentBuffer][encoffset], &rfrxbuf[rfRxCurrentBuffer][encoffset], rfRxCounter[rfRxCurrentBuffer] - encoffset, (rfAESMode & AES_CRYPTO_MODE));
      0008F7 90r00r00         [24] 2864 	mov	dptr,#_rfRxCurrentBuffer
      0008FA E0               [24] 2865 	movx	a,@dptr
      0008FB 25 E0            [12] 2866 	add	a,acc
      0008FD FD               [12] 2867 	mov	r5,a
      0008FE E4               [12] 2868 	clr	a
      0008FF 24r01            [12] 2869 	add	a,#_rfrxbuf
      000901 FE               [12] 2870 	mov	r6,a
      000902 ED               [12] 2871 	mov	a,r5
      000903 34s00            [12] 2872 	addc	a,#(_rfrxbuf >> 8)
      000905 FD               [12] 2873 	mov	r5,a
      000906 AB*03            [24] 2874 	mov	r3,_rfIntHandler_encoffset_1_136
      000908 7C 00            [12] 2875 	mov	r4,#0x00
      00090A EB               [12] 2876 	mov	a,r3
      00090B 2E               [12] 2877 	add	a,r6
      00090C FE               [12] 2878 	mov	r6,a
      00090D EC               [12] 2879 	mov	a,r4
      00090E 3D               [12] 2880 	addc	a,r5
      00090F FD               [12] 2881 	mov	r5,a
      000910 E0               [24] 2882 	movx	a,@dptr
      000911 F9               [12] 2883 	mov	r1,a
      000912 29               [12] 2884 	add	a,r1
      000913 FA               [12] 2885 	mov	r2,a
      000914 E4               [12] 2886 	clr	a
      000915 24r01            [12] 2887 	add	a,#_rfrxbuf
      000917 F9               [12] 2888 	mov	r1,a
      000918 EA               [12] 2889 	mov	a,r2
      000919 34s00            [12] 2890 	addc	a,#(_rfrxbuf >> 8)
      00091B FA               [12] 2891 	mov	r2,a
      00091C EB               [12] 2892 	mov	a,r3
      00091D 29               [12] 2893 	add	a,r1
      00091E FB               [12] 2894 	mov	r3,a
      00091F EC               [12] 2895 	mov	a,r4
      000920 3A               [12] 2896 	addc	a,r2
      000921 FC               [12] 2897 	mov	r4,a
      000922 E0               [24] 2898 	movx	a,@dptr
      000923 75 F0 02         [24] 2899 	mov	b,#0x02
      000926 A4               [48] 2900 	mul	ab
      000927 24r01            [12] 2901 	add	a,#_rfRxCounter
      000929 F5 82            [12] 2902 	mov	dpl,a
      00092B 74s04            [12] 2903 	mov	a,#(_rfRxCounter >> 8)
      00092D 35 F0            [12] 2904 	addc	a,b
      00092F F5 83            [12] 2905 	mov	dph,a
      000931 E0               [24] 2906 	movx	a,@dptr
      000932 F9               [12] 2907 	mov	r1,a
      000933 A3               [24] 2908 	inc	dptr
      000934 E0               [24] 2909 	movx	a,@dptr
      000935 FA               [12] 2910 	mov	r2,a
      000936 A8*03            [24] 2911 	mov	r0,_rfIntHandler_encoffset_1_136
      000938 7F 00            [12] 2912 	mov	r7,#0x00
      00093A E9               [12] 2913 	mov	a,r1
      00093B C3               [12] 2914 	clr	c
      00093C 98               [12] 2915 	subb	a,r0
      00093D F9               [12] 2916 	mov	r1,a
      00093E EA               [12] 2917 	mov	a,r2
      00093F 9F               [12] 2918 	subb	a,r7
      000940 FA               [12] 2919 	mov	r2,a
      000941 90r00r14         [24] 2920 	mov	dptr,#_rfAESMode
      000944 E0               [24] 2921 	movx	a,@dptr
      000945 FF               [12] 2922 	mov	r7,a
      000946 53 07 F0         [24] 2923 	anl	ar7,#0xF0
      000949 90r00r00         [24] 2924 	mov	dptr,#_encAES_PARM_2
      00094C EB               [12] 2925 	mov	a,r3
      00094D F0               [24] 2926 	movx	@dptr,a
      00094E EC               [12] 2927 	mov	a,r4
      00094F A3               [24] 2928 	inc	dptr
      000950 F0               [24] 2929 	movx	@dptr,a
      000951 90r00r00         [24] 2930 	mov	dptr,#_encAES_PARM_3
      000954 E9               [12] 2931 	mov	a,r1
      000955 F0               [24] 2932 	movx	@dptr,a
      000956 EA               [12] 2933 	mov	a,r2
      000957 A3               [24] 2934 	inc	dptr
      000958 F0               [24] 2935 	movx	@dptr,a
      000959 90r00r00         [24] 2936 	mov	dptr,#_encAES_PARM_4
      00095C EF               [12] 2937 	mov	a,r7
      00095D F0               [24] 2938 	movx	@dptr,a
      00095E 8E 82            [24] 2939 	mov	dpl,r6
      000960 8D 83            [24] 2940 	mov	dph,r5
      000962 12r00r00         [24] 2941 	lcall	_encAES
      000965 80 6E            [24] 2942 	sjmp	00109$
      000967                       2943 00106$:
                                   2944 ;	cc1111rf.c:667: decAES(&rfrxbuf[rfRxCurrentBuffer][encoffset], &rfrxbuf[rfRxCurrentBuffer][encoffset], rfRxCounter[rfRxCurrentBuffer] - encoffset, (rfAESMode & AES_CRYPTO_MODE));
      000967 90r00r00         [24] 2945 	mov	dptr,#_rfRxCurrentBuffer
      00096A E0               [24] 2946 	movx	a,@dptr
      00096B 25 E0            [12] 2947 	add	a,acc
      00096D FE               [12] 2948 	mov	r6,a
      00096E E4               [12] 2949 	clr	a
      00096F 24r01            [12] 2950 	add	a,#_rfrxbuf
      000971 FF               [12] 2951 	mov	r7,a
      000972 EE               [12] 2952 	mov	a,r6
      000973 34s00            [12] 2953 	addc	a,#(_rfrxbuf >> 8)
      000975 FE               [12] 2954 	mov	r6,a
      000976 AC*03            [24] 2955 	mov	r4,_rfIntHandler_encoffset_1_136
      000978 7D 00            [12] 2956 	mov	r5,#0x00
      00097A EC               [12] 2957 	mov	a,r4
      00097B 2F               [12] 2958 	add	a,r7
      00097C FF               [12] 2959 	mov	r7,a
      00097D ED               [12] 2960 	mov	a,r5
      00097E 3E               [12] 2961 	addc	a,r6
      00097F FE               [12] 2962 	mov	r6,a
      000980 E0               [24] 2963 	movx	a,@dptr
      000981 25 E0            [12] 2964 	add	a,acc
      000983 FA               [12] 2965 	mov	r2,a
      000984 E4               [12] 2966 	clr	a
      000985 24r01            [12] 2967 	add	a,#_rfrxbuf
      000987 FB               [12] 2968 	mov	r3,a
      000988 EA               [12] 2969 	mov	a,r2
      000989 34s00            [12] 2970 	addc	a,#(_rfrxbuf >> 8)
      00098B FA               [12] 2971 	mov	r2,a
      00098C EC               [12] 2972 	mov	a,r4
      00098D 2B               [12] 2973 	add	a,r3
      00098E FC               [12] 2974 	mov	r4,a
      00098F ED               [12] 2975 	mov	a,r5
      000990 3A               [12] 2976 	addc	a,r2
      000991 FD               [12] 2977 	mov	r5,a
      000992 E0               [24] 2978 	movx	a,@dptr
      000993 75 F0 02         [24] 2979 	mov	b,#0x02
      000996 A4               [48] 2980 	mul	ab
      000997 24r01            [12] 2981 	add	a,#_rfRxCounter
      000999 F5 82            [12] 2982 	mov	dpl,a
      00099B 74s04            [12] 2983 	mov	a,#(_rfRxCounter >> 8)
      00099D 35 F0            [12] 2984 	addc	a,b
      00099F F5 83            [12] 2985 	mov	dph,a
      0009A1 E0               [24] 2986 	movx	a,@dptr
      0009A2 FA               [12] 2987 	mov	r2,a
      0009A3 A3               [24] 2988 	inc	dptr
      0009A4 E0               [24] 2989 	movx	a,@dptr
      0009A5 FB               [12] 2990 	mov	r3,a
      0009A6 A8*03            [24] 2991 	mov	r0,_rfIntHandler_encoffset_1_136
      0009A8 79 00            [12] 2992 	mov	r1,#0x00
      0009AA EA               [12] 2993 	mov	a,r2
      0009AB C3               [12] 2994 	clr	c
      0009AC 98               [12] 2995 	subb	a,r0
      0009AD FA               [12] 2996 	mov	r2,a
      0009AE EB               [12] 2997 	mov	a,r3
      0009AF 99               [12] 2998 	subb	a,r1
      0009B0 FB               [12] 2999 	mov	r3,a
      0009B1 90r00r14         [24] 3000 	mov	dptr,#_rfAESMode
      0009B4 E0               [24] 3001 	movx	a,@dptr
      0009B5 F9               [12] 3002 	mov	r1,a
      0009B6 53 01 F0         [24] 3003 	anl	ar1,#0xF0
      0009B9 90r00r00         [24] 3004 	mov	dptr,#_decAES_PARM_2
      0009BC EC               [12] 3005 	mov	a,r4
      0009BD F0               [24] 3006 	movx	@dptr,a
      0009BE ED               [12] 3007 	mov	a,r5
      0009BF A3               [24] 3008 	inc	dptr
      0009C0 F0               [24] 3009 	movx	@dptr,a
      0009C1 90r00r00         [24] 3010 	mov	dptr,#_decAES_PARM_3
      0009C4 EA               [12] 3011 	mov	a,r2
      0009C5 F0               [24] 3012 	movx	@dptr,a
      0009C6 EB               [12] 3013 	mov	a,r3
      0009C7 A3               [24] 3014 	inc	dptr
      0009C8 F0               [24] 3015 	movx	@dptr,a
      0009C9 90r00r00         [24] 3016 	mov	dptr,#_decAES_PARM_4
      0009CC E9               [12] 3017 	mov	a,r1
      0009CD F0               [24] 3018 	movx	@dptr,a
      0009CE 8F 82            [24] 3019 	mov	dpl,r7
      0009D0 8E 83            [24] 3020 	mov	dph,r6
      0009D2 12r00r00         [24] 3021 	lcall	_decAES
      0009D5                       3022 00109$:
                                   3023 ;	cc1111rf.c:671: rfRxCurrentBuffer ^= 1;
      0009D5 90r00r00         [24] 3024 	mov	dptr,#_rfRxCurrentBuffer
      0009D8 E0               [24] 3025 	movx	a,@dptr
      0009D9 FF               [12] 3026 	mov	r7,a
      0009DA 74 01            [12] 3027 	mov	a,#0x01
      0009DC 6F               [12] 3028 	xrl	a,r7
      0009DD F0               [24] 3029 	movx	@dptr,a
                                   3030 ;	cc1111rf.c:672: rfRxCounter[rfRxCurrentBuffer] = 0;
      0009DE E0               [24] 3031 	movx	a,@dptr
      0009DF FF               [12] 3032 	mov	r7,a
      0009E0 75 F0 02         [24] 3033 	mov	b,#0x02
      0009E3 A4               [48] 3034 	mul	ab
      0009E4 24r01            [12] 3035 	add	a,#_rfRxCounter
      0009E6 F5 82            [12] 3036 	mov	dpl,a
      0009E8 74s04            [12] 3037 	mov	a,#(_rfRxCounter >> 8)
      0009EA 35 F0            [12] 3038 	addc	a,b
      0009EC F5 83            [12] 3039 	mov	dph,a
      0009EE E4               [12] 3040 	clr	a
      0009EF F0               [24] 3041 	movx	@dptr,a
      0009F0 A3               [24] 3042 	inc	dptr
      0009F1 F0               [24] 3043 	movx	@dptr,a
                                   3044 ;	cc1111rf.c:674: rfRxProcessed[FIRST_BUFFER] = RX_UNPROCESSED;
      0009F2 90r04r05         [24] 3045 	mov	dptr,#_rfRxProcessed
      0009F5 F0               [24] 3046 	movx	@dptr,a
                                   3047 ;	cc1111rf.c:675: rfRxProcessed[SECOND_BUFFER] = RX_UNPROCESSED;
      0009F6 90r04r06         [24] 3048 	mov	dptr,#(_rfRxProcessed + 0x0001)
      0009F9 F0               [24] 3049 	movx	@dptr,a
      0009FA 80 21            [24] 3050 	sjmp	00112$
      0009FC                       3051 00111$:
                                   3052 ;	cc1111rf.c:692: lastCode[1] = LCE_DROPPED_PACKET;
      0009FC 90r00r01         [24] 3053 	mov	dptr,#(_lastCode + 0x0001)
      0009FF 74 12            [12] 3054 	mov	a,#0x12
      000A01 F0               [24] 3055 	movx	@dptr,a
                                   3056 ;	cc1111rf.c:693: LED = !LED;
      000A02 B2 91            [12] 3057 	cpl	_P1_1
                                   3058 ;	cc1111rf.c:694: rfRxCounter[rfRxCurrentBuffer] = 0;
      000A04 90r00r00         [24] 3059 	mov	dptr,#_rfRxCurrentBuffer
      000A07 E0               [24] 3060 	movx	a,@dptr
      000A08 FF               [12] 3061 	mov	r7,a
      000A09 75 F0 02         [24] 3062 	mov	b,#0x02
      000A0C A4               [48] 3063 	mul	ab
      000A0D 24r01            [12] 3064 	add	a,#_rfRxCounter
      000A0F F5 82            [12] 3065 	mov	dpl,a
      000A11 74s04            [12] 3066 	mov	a,#(_rfRxCounter >> 8)
      000A13 35 F0            [12] 3067 	addc	a,b
      000A15 F5 83            [12] 3068 	mov	dph,a
      000A17 E4               [12] 3069 	clr	a
      000A18 F0               [24] 3070 	movx	@dptr,a
      000A19 A3               [24] 3071 	inc	dptr
      000A1A F0               [24] 3072 	movx	@dptr,a
                                   3073 ;	cc1111rf.c:695: LED = !LED;
      000A1B B2 91            [12] 3074 	cpl	_P1_1
      000A1D                       3075 00112$:
                                   3076 ;	cc1111rf.c:698: LED = 0;
      000A1D C2 91            [12] 3077 	clr	_P1_1
      000A1F                       3078 00115$:
                                   3079 ;	cc1111rf.c:700: RFIF &= ~(RFIF_IRQ_DONE | RFIF_IRQ_TIMEOUT);        // OVF needs to be handled next...
      000A1F AF E9            [24] 3080 	mov	r7,_RFIF
      000A21 74 CF            [12] 3081 	mov	a,#0xCF
      000A23 5F               [12] 3082 	anl	a,r7
      000A24 F5 E9            [12] 3083 	mov	_RFIF,a
      000A26                       3084 00117$:
                                   3085 ;	cc1111rf.c:704: if(RFIF & RFIF_IRQ_RXOVF)
      000A26 E5 E9            [12] 3086 	mov	a,_RFIF
      000A28 30 E6 14         [24] 3087 	jnb	acc.6,00119$
                                   3088 ;	cc1111rf.c:709: lastCode[1] = LCE_RF_RXOVF;
      000A2B 90r00r01         [24] 3089 	mov	dptr,#(_lastCode + 0x0001)
      000A2E 74 10            [12] 3090 	mov	a,#0x10
      000A30 F0               [24] 3091 	movx	@dptr,a
                                   3092 ;	cc1111rf.c:710: LED = !LED;
      000A31 B2 91            [12] 3093 	cpl	_P1_1
                                   3094 ;	cc1111rf.c:712: resetRFSTATE();
      000A33 12r00r70         [24] 3095 	lcall	_resetRFSTATE
                                   3096 ;	cc1111rf.c:714: LED = !LED;
      000A36 B2 91            [12] 3097 	cpl	_P1_1
                                   3098 ;	cc1111rf.c:715: RFIF &= ~RFIF_IRQ_RXOVF;
      000A38 AF E9            [24] 3099 	mov	r7,_RFIF
      000A3A 74 BF            [12] 3100 	mov	a,#0xBF
      000A3C 5F               [12] 3101 	anl	a,r7
      000A3D F5 E9            [12] 3102 	mov	_RFIF,a
      000A3F                       3103 00119$:
                                   3104 ;	cc1111rf.c:718: if(RFIF & RFIF_IRQ_TXUNF)
      000A3F E5 E9            [12] 3105 	mov	a,_RFIF
      000A41 30 E7 14         [24] 3106 	jnb	acc.7,00122$
                                   3107 ;	cc1111rf.c:721: lastCode[1] = LCE_RF_TXUNF;
      000A44 90r00r01         [24] 3108 	mov	dptr,#(_lastCode + 0x0001)
      000A47 74 11            [12] 3109 	mov	a,#0x11
      000A49 F0               [24] 3110 	movx	@dptr,a
                                   3111 ;	cc1111rf.c:722: LED = !LED;
      000A4A B2 91            [12] 3112 	cpl	_P1_1
                                   3113 ;	cc1111rf.c:724: resetRFSTATE();
      000A4C 12r00r70         [24] 3114 	lcall	_resetRFSTATE
                                   3115 ;	cc1111rf.c:726: LED = !LED;
      000A4F B2 91            [12] 3116 	cpl	_P1_1
                                   3117 ;	cc1111rf.c:728: RFIF &= ~RFIF_IRQ_TXUNF;
      000A51 AF E9            [24] 3118 	mov	r7,_RFIF
      000A53 74 7F            [12] 3119 	mov	a,#0x7F
      000A55 5F               [12] 3120 	anl	a,r7
      000A56 F5 E9            [12] 3121 	mov	_RFIF,a
      000A58                       3122 00122$:
      000A58 D0 D0            [24] 3123 	pop	psw
      000A5A D0 00            [24] 3124 	pop	(0+0)
      000A5C D0 01            [24] 3125 	pop	(0+1)
      000A5E D0 02            [24] 3126 	pop	(0+2)
      000A60 D0 03            [24] 3127 	pop	(0+3)
      000A62 D0 04            [24] 3128 	pop	(0+4)
      000A64 D0 05            [24] 3129 	pop	(0+5)
      000A66 D0 06            [24] 3130 	pop	(0+6)
      000A68 D0 07            [24] 3131 	pop	(0+7)
      000A6A D0 83            [24] 3132 	pop	dph
      000A6C D0 82            [24] 3133 	pop	dpl
      000A6E D0 F0            [24] 3134 	pop	b
      000A70 D0 E0            [24] 3135 	pop	acc
      000A72 D0*00            [24] 3136 	pop	bits
      000A74 32               [24] 3137 	reti
                                   3138 ;------------------------------------------------------------
                                   3139 ;Allocation info for local variables in function 'byte_shuffle'
                                   3140 ;------------------------------------------------------------
                                   3141 ;len                       Allocated with name '_byte_shuffle_PARM_2'
                                   3142 ;offset                    Allocated with name '_byte_shuffle_PARM_3'
                                   3143 ;buf                       Allocated with name '_byte_shuffle_buf_1_146'
                                   3144 ;------------------------------------------------------------
                                   3145 ;	cc1111rf.c:733: void byte_shuffle(__xdata u8* __xdata buf, __xdata u16 len, __xdata u16 offset)
                                   3146 ;	-----------------------------------------
                                   3147 ;	 function byte_shuffle
                                   3148 ;	-----------------------------------------
      000A75                       3149 _byte_shuffle:
      000A75 AF 83            [24] 3150 	mov	r7,dph
      000A77 E5 82            [12] 3151 	mov	a,dpl
      000A79 90r04r32         [24] 3152 	mov	dptr,#_byte_shuffle_buf_1_146
      000A7C F0               [24] 3153 	movx	@dptr,a
      000A7D EF               [12] 3154 	mov	a,r7
      000A7E A3               [24] 3155 	inc	dptr
      000A7F F0               [24] 3156 	movx	@dptr,a
                                   3157 ;	cc1111rf.c:735: while(len--)
      000A80 90r04r30         [24] 3158 	mov	dptr,#_byte_shuffle_PARM_3
      000A83 E0               [24] 3159 	movx	a,@dptr
      000A84 FE               [12] 3160 	mov	r6,a
      000A85 A3               [24] 3161 	inc	dptr
      000A86 E0               [24] 3162 	movx	a,@dptr
      000A87 FF               [12] 3163 	mov	r7,a
      000A88 90r04r32         [24] 3164 	mov	dptr,#_byte_shuffle_buf_1_146
      000A8B E0               [24] 3165 	movx	a,@dptr
      000A8C FC               [12] 3166 	mov	r4,a
      000A8D A3               [24] 3167 	inc	dptr
      000A8E E0               [24] 3168 	movx	a,@dptr
      000A8F FD               [12] 3169 	mov	r5,a
      000A90 90r04r2E         [24] 3170 	mov	dptr,#_byte_shuffle_PARM_2
      000A93 E0               [24] 3171 	movx	a,@dptr
      000A94 FA               [12] 3172 	mov	r2,a
      000A95 A3               [24] 3173 	inc	dptr
      000A96 E0               [24] 3174 	movx	a,@dptr
      000A97 FB               [12] 3175 	mov	r3,a
      000A98                       3176 00101$:
      000A98 8A 00            [24] 3177 	mov	ar0,r2
      000A9A 8B 01            [24] 3178 	mov	ar1,r3
      000A9C 1A               [12] 3179 	dec	r2
      000A9D BA FF 01         [24] 3180 	cjne	r2,#0xFF,00113$
      000AA0 1B               [12] 3181 	dec	r3
      000AA1                       3182 00113$:
      000AA1 E8               [12] 3183 	mov	a,r0
      000AA2 49               [12] 3184 	orl	a,r1
      000AA3 60 24            [24] 3185 	jz	00104$
                                   3186 ;	cc1111rf.c:736: buf[len + offset] = buf[len];
      000AA5 EE               [12] 3187 	mov	a,r6
      000AA6 2A               [12] 3188 	add	a,r2
      000AA7 F8               [12] 3189 	mov	r0,a
      000AA8 EF               [12] 3190 	mov	a,r7
      000AA9 3B               [12] 3191 	addc	a,r3
      000AAA F9               [12] 3192 	mov	r1,a
      000AAB E8               [12] 3193 	mov	a,r0
      000AAC 2C               [12] 3194 	add	a,r4
      000AAD F8               [12] 3195 	mov	r0,a
      000AAE E9               [12] 3196 	mov	a,r1
      000AAF 3D               [12] 3197 	addc	a,r5
      000AB0 F9               [12] 3198 	mov	r1,a
      000AB1 EA               [12] 3199 	mov	a,r2
      000AB2 2C               [12] 3200 	add	a,r4
      000AB3 F5 82            [12] 3201 	mov	dpl,a
      000AB5 EB               [12] 3202 	mov	a,r3
      000AB6 3D               [12] 3203 	addc	a,r5
      000AB7 F5 83            [12] 3204 	mov	dph,a
      000AB9 C0 06            [24] 3205 	push	ar6
      000ABB C0 07            [24] 3206 	push	ar7
      000ABD E0               [24] 3207 	movx	a,@dptr
      000ABE 88 82            [24] 3208 	mov	dpl,r0
      000AC0 89 83            [24] 3209 	mov	dph,r1
      000AC2 F0               [24] 3210 	movx	@dptr,a
      000AC3 D0 07            [24] 3211 	pop	ar7
      000AC5 D0 06            [24] 3212 	pop	ar6
      000AC7 80 CF            [24] 3213 	sjmp	00101$
      000AC9                       3214 00104$:
      000AC9 22               [24] 3215 	ret
                                   3216 	.area CSEG    (CODE)
                                   3217 	.area CONST   (CODE)
                                   3218 	.area XINIT   (CODE)
      000000                       3219 __xinit__rfRxInfMode:
      000000 00                    3220 	.db #0x00	; 0
      000001                       3221 __xinit__rfRxTotalRXLen:
      000001 00 00                 3222 	.byte #0x00,#0x00	; 0
      000003                       3223 __xinit__rfRxLargeLen:
      000003 00 00                 3224 	.byte #0x00,#0x00	; 0
      000005                       3225 __xinit__rfTxCurBufIdx:
      000005 00                    3226 	.db #0x00	; 0
      000006                       3227 __xinit__rfTxBufCount:
      000006 01                    3228 	.db #0x01	; 1
      000007                       3229 __xinit__rfTxCounter:
      000007 00 00                 3230 	.byte #0x00,#0x00	; 0
      000009                       3231 __xinit__rfTxRepeatCounter:
      000009 00 00                 3232 	.byte #0x00,#0x00	; 0
      00000B                       3233 __xinit__rfTxBufferEnd:
      00000B 00 00                 3234 	.byte #0x00,#0x00	; 0
      00000D                       3235 __xinit__rfTxRepeatLen:
      00000D 00 00                 3236 	.byte #0x00,#0x00	; 0
      00000F                       3237 __xinit__rfTxRepeatOffset:
      00000F 00 00                 3238 	.byte #0x00,#0x00	; 0
      000011                       3239 __xinit__rfTxTotalTXLen:
      000011 00 00                 3240 	.byte #0x00,#0x00	; 0
      000013                       3241 __xinit__rfTxInfMode:
      000013 00                    3242 	.db #0x00	; 0
      000014                       3243 __xinit__rfAESMode:
      000014 00                    3244 	.db #0x00	; 0
      000015                       3245 __xinit__rfAmpMode:
      000015 00                    3246 	.db #0x00	; 0
      000016                       3247 __xinit__bRepeatMode:
      000016 00                    3248 	.db #0x00	; 0
                                   3249 	.area CABS    (ABS,CODE)
