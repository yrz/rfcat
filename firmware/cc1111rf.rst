                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Jul  5 2014) (Linux)
                                      4 ; This file was generated Mon Jan 30 22:00:42 2017
                                      5 ;--------------------------------------------------------
                                      6 	.module cc1111rf
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _RepeaterStop
                                     13 	.globl _RepeaterStart
                                     14 	.globl _setFreq
                                     15 	.globl _memset
                                     16 	.globl _decAES
                                     17 	.globl _encAES
                                     18 	.globl _padAES
                                     19 	.globl _appInitRf
                                     20 	.globl _usbProcessEvents
                                     21 	.globl _sleepMicros
                                     22 	.globl _USBIF
                                     23 	.globl _MODE
                                     24 	.globl _RE
                                     25 	.globl _SLAVE
                                     26 	.globl _FE
                                     27 	.globl _ERR
                                     28 	.globl _RX_BYTE
                                     29 	.globl _TX_BYTE
                                     30 	.globl _ACTIVE
                                     31 	.globl _B_7
                                     32 	.globl _B_6
                                     33 	.globl _B_5
                                     34 	.globl _B_4
                                     35 	.globl _B_3
                                     36 	.globl _B_2
                                     37 	.globl _B_1
                                     38 	.globl _B_0
                                     39 	.globl _WDTIF
                                     40 	.globl _P1IF
                                     41 	.globl _UTX1IF
                                     42 	.globl _UTX0IF
                                     43 	.globl _P2IF
                                     44 	.globl _ACC_7
                                     45 	.globl _ACC_6
                                     46 	.globl _ACC_5
                                     47 	.globl _ACC_4
                                     48 	.globl _ACC_3
                                     49 	.globl _ACC_2
                                     50 	.globl _ACC_1
                                     51 	.globl _ACC_0
                                     52 	.globl _OVFIM
                                     53 	.globl _T4CH1IF
                                     54 	.globl _T4CH0IF
                                     55 	.globl _T4OVFIF
                                     56 	.globl _T3CH1IF
                                     57 	.globl _T3CH0IF
                                     58 	.globl _T3OVFIF
                                     59 	.globl _CY
                                     60 	.globl _AC
                                     61 	.globl _F0
                                     62 	.globl _RS1
                                     63 	.globl _RS0
                                     64 	.globl _OV
                                     65 	.globl _F1
                                     66 	.globl _P
                                     67 	.globl _STIF
                                     68 	.globl _P0IF
                                     69 	.globl _T4IF
                                     70 	.globl _T3IF
                                     71 	.globl _T2IF
                                     72 	.globl _T1IF
                                     73 	.globl _DMAIF
                                     74 	.globl _P0IE
                                     75 	.globl _T4IE
                                     76 	.globl _T3IE
                                     77 	.globl _T2IE
                                     78 	.globl _T1IE
                                     79 	.globl _DMAIE
                                     80 	.globl _EA
                                     81 	.globl _STIE
                                     82 	.globl _ENCIE
                                     83 	.globl _URX1IE
                                     84 	.globl _URX0IE
                                     85 	.globl _ADCIE
                                     86 	.globl _RFTXRXIE
                                     87 	.globl _P2_7
                                     88 	.globl _P2_6
                                     89 	.globl _P2_5
                                     90 	.globl _P2_4
                                     91 	.globl _P2_3
                                     92 	.globl _P2_2
                                     93 	.globl _P2_1
                                     94 	.globl _P2_0
                                     95 	.globl _ENCIF_1
                                     96 	.globl _ENCIF_0
                                     97 	.globl _P1_7
                                     98 	.globl _P1_6
                                     99 	.globl _P1_5
                                    100 	.globl _P1_4
                                    101 	.globl _P1_3
                                    102 	.globl _P1_2
                                    103 	.globl _P1_1
                                    104 	.globl _P1_0
                                    105 	.globl _URX1IF
                                    106 	.globl _ADCIF
                                    107 	.globl _URX0IF
                                    108 	.globl _IT1
                                    109 	.globl _RFTXRXIF
                                    110 	.globl _IT0
                                    111 	.globl _P0_7
                                    112 	.globl _P0_6
                                    113 	.globl _P0_5
                                    114 	.globl _P0_4
                                    115 	.globl _P0_3
                                    116 	.globl _P0_2
                                    117 	.globl _P0_1
                                    118 	.globl _P0_0
                                    119 	.globl _P2DIR
                                    120 	.globl _P1DIR
                                    121 	.globl _P0DIR
                                    122 	.globl _U1GCR
                                    123 	.globl _U1UCR
                                    124 	.globl _U1BAUD
                                    125 	.globl _U1DBUF
                                    126 	.globl _U1CSR
                                    127 	.globl _P2INP
                                    128 	.globl _P1INP
                                    129 	.globl _P2SEL
                                    130 	.globl _P1SEL
                                    131 	.globl _P0SEL
                                    132 	.globl _ADCCFG
                                    133 	.globl _PERCFG
                                    134 	.globl _B
                                    135 	.globl _T4CC1
                                    136 	.globl _T4CCTL1
                                    137 	.globl _T4CC0
                                    138 	.globl _T4CCTL0
                                    139 	.globl _T4CTL
                                    140 	.globl _T4CNT
                                    141 	.globl _RFIF
                                    142 	.globl _IRCON2
                                    143 	.globl _T1CCTL2
                                    144 	.globl _T1CCTL1
                                    145 	.globl _T1CCTL0
                                    146 	.globl _T1CTL
                                    147 	.globl _T1CNTH
                                    148 	.globl _T1CNTL
                                    149 	.globl _RFST
                                    150 	.globl _ACC
                                    151 	.globl _T1CC2H
                                    152 	.globl _T1CC2L
                                    153 	.globl _T1CC1H
                                    154 	.globl _T1CC1L
                                    155 	.globl _T1CC0H
                                    156 	.globl _T1CC0L
                                    157 	.globl _RFD
                                    158 	.globl _TIMIF
                                    159 	.globl _DMAREQ
                                    160 	.globl _DMAARM
                                    161 	.globl _DMA0CFGH
                                    162 	.globl _DMA0CFGL
                                    163 	.globl _DMA1CFGH
                                    164 	.globl _DMA1CFGL
                                    165 	.globl _DMAIRQ
                                    166 	.globl _PSW
                                    167 	.globl _T3CC1
                                    168 	.globl _T3CCTL1
                                    169 	.globl _T3CC0
                                    170 	.globl _T3CCTL0
                                    171 	.globl _T3CTL
                                    172 	.globl _T3CNT
                                    173 	.globl _WDCTL
                                    174 	.globl __SFRC8
                                    175 	.globl _MEMCTR
                                    176 	.globl _CLKCON
                                    177 	.globl _U0GCR
                                    178 	.globl _U0UCR
                                    179 	.globl __SFRC3
                                    180 	.globl _U0BAUD
                                    181 	.globl _U0DBUF
                                    182 	.globl _IRCON
                                    183 	.globl __SFRBF
                                    184 	.globl _SLEEP
                                    185 	.globl _RNDH
                                    186 	.globl _RNDL
                                    187 	.globl _ADCH
                                    188 	.globl _ADCL
                                    189 	.globl _IP1
                                    190 	.globl _IEN1
                                    191 	.globl __SFRB7
                                    192 	.globl _ADCCON3
                                    193 	.globl _ADCCON2
                                    194 	.globl _ADCCON1
                                    195 	.globl _ENCCS
                                    196 	.globl _ENCDO
                                    197 	.globl _ENCDI
                                    198 	.globl __SFRB0
                                    199 	.globl _FWDATA
                                    200 	.globl _FCTL
                                    201 	.globl _FADDRH
                                    202 	.globl _FADDRL
                                    203 	.globl _FWT
                                    204 	.globl __SFRAA
                                    205 	.globl _IP0
                                    206 	.globl _IEN0
                                    207 	.globl __SFRA7
                                    208 	.globl _WORTIME1
                                    209 	.globl _WORTIME0
                                    210 	.globl _WOREVT1
                                    211 	.globl _WOREVT0
                                    212 	.globl _WORCTRL
                                    213 	.globl _WORIRQ
                                    214 	.globl _P2
                                    215 	.globl __SFR9F
                                    216 	.globl _T2CTL
                                    217 	.globl _T2PR
                                    218 	.globl _T2CT
                                    219 	.globl _S1CON
                                    220 	.globl _IEN2
                                    221 	.globl __SFR99
                                    222 	.globl _S0CON
                                    223 	.globl __SFR97
                                    224 	.globl __SFR96
                                    225 	.globl __SFR95
                                    226 	.globl __SFR94
                                    227 	.globl __XPAGE
                                    228 	.globl _MPAGE
                                    229 	.globl _DPS
                                    230 	.globl _RFIM
                                    231 	.globl _P1
                                    232 	.globl _P0INP
                                    233 	.globl __SFR8E
                                    234 	.globl _P1IEN
                                    235 	.globl _PICTL
                                    236 	.globl _P2IFG
                                    237 	.globl _P1IFG
                                    238 	.globl _P0IFG
                                    239 	.globl _TCON
                                    240 	.globl _PCON
                                    241 	.globl _U0CSR
                                    242 	.globl _DPH1
                                    243 	.globl _DPL1
                                    244 	.globl _DPH0
                                    245 	.globl _DPL0
                                    246 	.globl _SP
                                    247 	.globl _P0
                                    248 	.globl _bRepeatMode
                                    249 	.globl _rfAmpMode
                                    250 	.globl _rfAESMode
                                    251 	.globl _rfTxInfMode
                                    252 	.globl _rfTxTotalTXLen
                                    253 	.globl _rfTxRepeatOffset
                                    254 	.globl _rfTxRepeatLen
                                    255 	.globl _rfTxBufferEnd
                                    256 	.globl _rfTxRepeatCounter
                                    257 	.globl _rfTxCounter
                                    258 	.globl _rfTxBufCount
                                    259 	.globl _rfTxCurBufIdx
                                    260 	.globl _rfRxLargeLen
                                    261 	.globl _rfRxTotalRXLen
                                    262 	.globl _rfRxInfMode
                                    263 	.globl _byte_shuffle_PARM_3
                                    264 	.globl _byte_shuffle_PARM_2
                                    265 	.globl _transmit_PARM_4
                                    266 	.globl _transmit_PARM_3
                                    267 	.globl _transmit_PARM_2
                                    268 	.globl _macdata
                                    269 	.globl _rf_tLastRecv
                                    270 	.globl _rf_MAC_timer
                                    271 	.globl _rf_status
                                    272 	.globl _txTotal
                                    273 	.globl _rftxbuf
                                    274 	.globl _rfRxProcessed
                                    275 	.globl _rfRxCounter
                                    276 	.globl _rfrxbuf
                                    277 	.globl _rfRxCurrentBuffer
                                    278 	.globl _USBF5
                                    279 	.globl _USBF4
                                    280 	.globl _USBF3
                                    281 	.globl _USBF2
                                    282 	.globl _USBF1
                                    283 	.globl _USBF0
                                    284 	.globl _USBCNTH
                                    285 	.globl _USBCNTL
                                    286 	.globl _USBCNT0
                                    287 	.globl _USBCSOH
                                    288 	.globl _USBCSOL
                                    289 	.globl _USBMAXO
                                    290 	.globl _USBCSIH
                                    291 	.globl _USBCSIL
                                    292 	.globl _USBCS0
                                    293 	.globl _USBMAXI
                                    294 	.globl _USBINDEX
                                    295 	.globl _USBFRMH
                                    296 	.globl _USBFRML
                                    297 	.globl _USBCIE
                                    298 	.globl _USBOIE
                                    299 	.globl _USBIIE
                                    300 	.globl _USBCIF
                                    301 	.globl _USBOIF
                                    302 	.globl _USBIIF
                                    303 	.globl _USBPOW
                                    304 	.globl _USBADDR
                                    305 	.globl _X_P2DIR
                                    306 	.globl _X_P1DIR
                                    307 	.globl _X_P0DIR
                                    308 	.globl _X_U1GCR
                                    309 	.globl _X_U1UCR
                                    310 	.globl _X_U1BAUD
                                    311 	.globl _X_U1DBUF
                                    312 	.globl _X_U1CSR
                                    313 	.globl _X_P2INP
                                    314 	.globl _X_P1INP
                                    315 	.globl _X_P2SEL
                                    316 	.globl _X_P1SEL
                                    317 	.globl _X_P0SEL
                                    318 	.globl _X_ADCCFG
                                    319 	.globl _X_PERCFG
                                    320 	.globl __NA_B
                                    321 	.globl _X_T4CC1
                                    322 	.globl _X_T4CCTL1
                                    323 	.globl _X_T4CC0
                                    324 	.globl _X_T4CCTL0
                                    325 	.globl _X_T4CTL
                                    326 	.globl _X_T4CNT
                                    327 	.globl _X_RFIF
                                    328 	.globl __NA_IRCON2
                                    329 	.globl _X_T1CCTL2
                                    330 	.globl _X_T1CCTL1
                                    331 	.globl _X_T1CCTL0
                                    332 	.globl _X_T1CTL
                                    333 	.globl _X_T1CNTH
                                    334 	.globl _X_T1CNTL
                                    335 	.globl _X_RFST
                                    336 	.globl __NA_ACC
                                    337 	.globl _X_T1CC2H
                                    338 	.globl _X_T1CC2L
                                    339 	.globl _X_T1CC1H
                                    340 	.globl _X_T1CC1L
                                    341 	.globl _X_T1CC0H
                                    342 	.globl _X_T1CC0L
                                    343 	.globl _X_RFD
                                    344 	.globl _X_TIMIF
                                    345 	.globl _X_DMAREQ
                                    346 	.globl _X_DMAARM
                                    347 	.globl _X_DMA0CFGH
                                    348 	.globl _X_DMA0CFGL
                                    349 	.globl _X_DMA1CFGH
                                    350 	.globl _X_DMA1CFGL
                                    351 	.globl _X_DMAIRQ
                                    352 	.globl __NA_PSW
                                    353 	.globl _X_T3CC1
                                    354 	.globl _X_T3CCTL1
                                    355 	.globl _X_T3CC0
                                    356 	.globl _X_T3CCTL0
                                    357 	.globl _X_T3CTL
                                    358 	.globl _X_T3CNT
                                    359 	.globl _X_WDCTL
                                    360 	.globl __X_SFRC8
                                    361 	.globl _X_MEMCTR
                                    362 	.globl _X_CLKCON
                                    363 	.globl _X_U0GCR
                                    364 	.globl _X_U0UCR
                                    365 	.globl __X_SFRC3
                                    366 	.globl _X_U0BAUD
                                    367 	.globl _X_U0DBUF
                                    368 	.globl __NA_IRCON
                                    369 	.globl __X_SFRBF
                                    370 	.globl _X_SLEEP
                                    371 	.globl _X_RNDH
                                    372 	.globl _X_RNDL
                                    373 	.globl _X_ADCH
                                    374 	.globl _X_ADCL
                                    375 	.globl __NA_IP1
                                    376 	.globl __NA_IEN1
                                    377 	.globl __X_SFRB7
                                    378 	.globl _X_ADCCON3
                                    379 	.globl _X_ADCCON2
                                    380 	.globl _X_ADCCON1
                                    381 	.globl _X_ENCCS
                                    382 	.globl _X_ENCDO
                                    383 	.globl _X_ENCDI
                                    384 	.globl __X_SFRB0
                                    385 	.globl _X_FWDATA
                                    386 	.globl _X_FCTL
                                    387 	.globl _X_FADDRH
                                    388 	.globl _X_FADDRL
                                    389 	.globl _X_FWT
                                    390 	.globl __X_SFRAA
                                    391 	.globl __NA_IP0
                                    392 	.globl __NA_IEN0
                                    393 	.globl __X_SFRA7
                                    394 	.globl _X_WORTIME1
                                    395 	.globl _X_WORTIME0
                                    396 	.globl _X_WOREVT1
                                    397 	.globl _X_WOREVT0
                                    398 	.globl _X_WORCTRL
                                    399 	.globl _X_WORIRQ
                                    400 	.globl __NA_P2
                                    401 	.globl __X_SFR9F
                                    402 	.globl _X_T2CTL
                                    403 	.globl _X_T2PR
                                    404 	.globl _X_T2CT
                                    405 	.globl __NA_S1CON
                                    406 	.globl __NA_IEN2
                                    407 	.globl __X_SFR99
                                    408 	.globl __NA_S0CON
                                    409 	.globl __X_SFR97
                                    410 	.globl __X_SFR96
                                    411 	.globl __X_SFR95
                                    412 	.globl __X_SFR94
                                    413 	.globl _X_MPAGE
                                    414 	.globl __NA_DPS
                                    415 	.globl _X_RFIM
                                    416 	.globl __NA_P1
                                    417 	.globl _X_P0INP
                                    418 	.globl __X_SFR8E
                                    419 	.globl _X_P1IEN
                                    420 	.globl _X_PICTL
                                    421 	.globl _X_P2IFG
                                    422 	.globl _X_P1IFG
                                    423 	.globl _X_P0IFG
                                    424 	.globl __NA_TCON
                                    425 	.globl __NA_PCON
                                    426 	.globl _X_U0CSR
                                    427 	.globl __NA_DPH1
                                    428 	.globl __NA_DPL1
                                    429 	.globl __NA_DPH0
                                    430 	.globl __NA_DPL0
                                    431 	.globl __NA_SP
                                    432 	.globl __NA_P0
                                    433 	.globl _I2SCLKF2
                                    434 	.globl _I2SCLKF1
                                    435 	.globl _I2SCLKF0
                                    436 	.globl _I2SSTAT
                                    437 	.globl _I2SWCNT
                                    438 	.globl _I2SDATH
                                    439 	.globl _I2SDATL
                                    440 	.globl _I2SCFG1
                                    441 	.globl _I2SCFG0
                                    442 	.globl _VCO_VC_DAC
                                    443 	.globl _PKTSTATUS
                                    444 	.globl _MARCSTATE
                                    445 	.globl _RSSI
                                    446 	.globl _LQI
                                    447 	.globl _FREQEST
                                    448 	.globl _VERSION
                                    449 	.globl _PARTNUM
                                    450 	.globl __XREGDF35
                                    451 	.globl __XREGDF34
                                    452 	.globl __XREGDF33
                                    453 	.globl __XREGDF32
                                    454 	.globl _IOCFG0
                                    455 	.globl _IOCFG1
                                    456 	.globl _IOCFG2
                                    457 	.globl _PA_TABLE0
                                    458 	.globl _PA_TABLE1
                                    459 	.globl _PA_TABLE2
                                    460 	.globl _PA_TABLE3
                                    461 	.globl _PA_TABLE4
                                    462 	.globl _PA_TABLE5
                                    463 	.globl _PA_TABLE6
                                    464 	.globl _PA_TABLE7
                                    465 	.globl __XREGDF26
                                    466 	.globl _TEST0
                                    467 	.globl _TEST1
                                    468 	.globl _TEST2
                                    469 	.globl __XREGDF22
                                    470 	.globl __XREGDF21
                                    471 	.globl __XREGDF20
                                    472 	.globl _FSCAL0
                                    473 	.globl _FSCAL1
                                    474 	.globl _FSCAL2
                                    475 	.globl _FSCAL3
                                    476 	.globl _FREND0
                                    477 	.globl _FREND1
                                    478 	.globl _AGCCTRL0
                                    479 	.globl _AGCCTRL1
                                    480 	.globl _AGCCTRL2
                                    481 	.globl _BSCFG
                                    482 	.globl _FOCCFG
                                    483 	.globl _MCSM0
                                    484 	.globl _MCSM1
                                    485 	.globl _MCSM2
                                    486 	.globl _DEVIATN
                                    487 	.globl _MDMCFG0
                                    488 	.globl _MDMCFG1
                                    489 	.globl _MDMCFG2
                                    490 	.globl _MDMCFG3
                                    491 	.globl _MDMCFG4
                                    492 	.globl _FREQ0
                                    493 	.globl _FREQ1
                                    494 	.globl _FREQ2
                                    495 	.globl _FSCTRL0
                                    496 	.globl _FSCTRL1
                                    497 	.globl _CHANNR
                                    498 	.globl _ADDR
                                    499 	.globl _PKTCTRL0
                                    500 	.globl _PKTCTRL1
                                    501 	.globl _PKTLEN
                                    502 	.globl _SYNC0
                                    503 	.globl _SYNC1
                                    504 	.globl _MDMCTRL0H
                                    505 	.globl _rfif
                                    506 	.globl _resetRFSTATE
                                    507 	.globl _RxMode
                                    508 	.globl _TxMode
                                    509 	.globl _IdleMode
                                    510 	.globl _init_RF
                                    511 	.globl _waitRSSI
                                    512 	.globl _transmit
                                    513 	.globl _startRX
                                    514 	.globl _rfTxRxIntHandler
                                    515 	.globl _rfIntHandler
                                    516 	.globl _byte_shuffle
                                    517 ;--------------------------------------------------------
                                    518 ; special function registers
                                    519 ;--------------------------------------------------------
                                    520 	.area RSEG    (ABS,DATA)
      000000                        521 	.org 0x0000
                           000080   522 _P0	=	0x0080
                           000081   523 _SP	=	0x0081
                           000082   524 _DPL0	=	0x0082
                           000083   525 _DPH0	=	0x0083
                           000084   526 _DPL1	=	0x0084
                           000085   527 _DPH1	=	0x0085
                           000086   528 _U0CSR	=	0x0086
                           000087   529 _PCON	=	0x0087
                           000088   530 _TCON	=	0x0088
                           000089   531 _P0IFG	=	0x0089
                           00008A   532 _P1IFG	=	0x008a
                           00008B   533 _P2IFG	=	0x008b
                           00008C   534 _PICTL	=	0x008c
                           00008D   535 _P1IEN	=	0x008d
                           00008E   536 __SFR8E	=	0x008e
                           00008F   537 _P0INP	=	0x008f
                           000090   538 _P1	=	0x0090
                           000091   539 _RFIM	=	0x0091
                           000092   540 _DPS	=	0x0092
                           000093   541 _MPAGE	=	0x0093
                           000093   542 __XPAGE	=	0x0093
                           000094   543 __SFR94	=	0x0094
                           000095   544 __SFR95	=	0x0095
                           000096   545 __SFR96	=	0x0096
                           000097   546 __SFR97	=	0x0097
                           000098   547 _S0CON	=	0x0098
                           000099   548 __SFR99	=	0x0099
                           00009A   549 _IEN2	=	0x009a
                           00009B   550 _S1CON	=	0x009b
                           00009C   551 _T2CT	=	0x009c
                           00009D   552 _T2PR	=	0x009d
                           00009E   553 _T2CTL	=	0x009e
                           00009F   554 __SFR9F	=	0x009f
                           0000A0   555 _P2	=	0x00a0
                           0000A1   556 _WORIRQ	=	0x00a1
                           0000A2   557 _WORCTRL	=	0x00a2
                           0000A3   558 _WOREVT0	=	0x00a3
                           0000A4   559 _WOREVT1	=	0x00a4
                           0000A5   560 _WORTIME0	=	0x00a5
                           0000A6   561 _WORTIME1	=	0x00a6
                           0000A7   562 __SFRA7	=	0x00a7
                           0000A8   563 _IEN0	=	0x00a8
                           0000A9   564 _IP0	=	0x00a9
                           0000AA   565 __SFRAA	=	0x00aa
                           0000AB   566 _FWT	=	0x00ab
                           0000AC   567 _FADDRL	=	0x00ac
                           0000AD   568 _FADDRH	=	0x00ad
                           0000AE   569 _FCTL	=	0x00ae
                           0000AF   570 _FWDATA	=	0x00af
                           0000B0   571 __SFRB0	=	0x00b0
                           0000B1   572 _ENCDI	=	0x00b1
                           0000B2   573 _ENCDO	=	0x00b2
                           0000B3   574 _ENCCS	=	0x00b3
                           0000B4   575 _ADCCON1	=	0x00b4
                           0000B5   576 _ADCCON2	=	0x00b5
                           0000B6   577 _ADCCON3	=	0x00b6
                           0000B7   578 __SFRB7	=	0x00b7
                           0000B8   579 _IEN1	=	0x00b8
                           0000B9   580 _IP1	=	0x00b9
                           0000BA   581 _ADCL	=	0x00ba
                           0000BB   582 _ADCH	=	0x00bb
                           0000BC   583 _RNDL	=	0x00bc
                           0000BD   584 _RNDH	=	0x00bd
                           0000BE   585 _SLEEP	=	0x00be
                           0000BF   586 __SFRBF	=	0x00bf
                           0000C0   587 _IRCON	=	0x00c0
                           0000C1   588 _U0DBUF	=	0x00c1
                           0000C2   589 _U0BAUD	=	0x00c2
                           0000C3   590 __SFRC3	=	0x00c3
                           0000C4   591 _U0UCR	=	0x00c4
                           0000C5   592 _U0GCR	=	0x00c5
                           0000C6   593 _CLKCON	=	0x00c6
                           0000C7   594 _MEMCTR	=	0x00c7
                           0000C8   595 __SFRC8	=	0x00c8
                           0000C9   596 _WDCTL	=	0x00c9
                           0000CA   597 _T3CNT	=	0x00ca
                           0000CB   598 _T3CTL	=	0x00cb
                           0000CC   599 _T3CCTL0	=	0x00cc
                           0000CD   600 _T3CC0	=	0x00cd
                           0000CE   601 _T3CCTL1	=	0x00ce
                           0000CF   602 _T3CC1	=	0x00cf
                           0000D0   603 _PSW	=	0x00d0
                           0000D1   604 _DMAIRQ	=	0x00d1
                           0000D2   605 _DMA1CFGL	=	0x00d2
                           0000D3   606 _DMA1CFGH	=	0x00d3
                           0000D4   607 _DMA0CFGL	=	0x00d4
                           0000D5   608 _DMA0CFGH	=	0x00d5
                           0000D6   609 _DMAARM	=	0x00d6
                           0000D7   610 _DMAREQ	=	0x00d7
                           0000D8   611 _TIMIF	=	0x00d8
                           0000D9   612 _RFD	=	0x00d9
                           0000DA   613 _T1CC0L	=	0x00da
                           0000DB   614 _T1CC0H	=	0x00db
                           0000DC   615 _T1CC1L	=	0x00dc
                           0000DD   616 _T1CC1H	=	0x00dd
                           0000DE   617 _T1CC2L	=	0x00de
                           0000DF   618 _T1CC2H	=	0x00df
                           0000E0   619 _ACC	=	0x00e0
                           0000E1   620 _RFST	=	0x00e1
                           0000E2   621 _T1CNTL	=	0x00e2
                           0000E3   622 _T1CNTH	=	0x00e3
                           0000E4   623 _T1CTL	=	0x00e4
                           0000E5   624 _T1CCTL0	=	0x00e5
                           0000E6   625 _T1CCTL1	=	0x00e6
                           0000E7   626 _T1CCTL2	=	0x00e7
                           0000E8   627 _IRCON2	=	0x00e8
                           0000E9   628 _RFIF	=	0x00e9
                           0000EA   629 _T4CNT	=	0x00ea
                           0000EB   630 _T4CTL	=	0x00eb
                           0000EC   631 _T4CCTL0	=	0x00ec
                           0000ED   632 _T4CC0	=	0x00ed
                           0000EE   633 _T4CCTL1	=	0x00ee
                           0000EF   634 _T4CC1	=	0x00ef
                           0000F0   635 _B	=	0x00f0
                           0000F1   636 _PERCFG	=	0x00f1
                           0000F2   637 _ADCCFG	=	0x00f2
                           0000F3   638 _P0SEL	=	0x00f3
                           0000F4   639 _P1SEL	=	0x00f4
                           0000F5   640 _P2SEL	=	0x00f5
                           0000F6   641 _P1INP	=	0x00f6
                           0000F7   642 _P2INP	=	0x00f7
                           0000F8   643 _U1CSR	=	0x00f8
                           0000F9   644 _U1DBUF	=	0x00f9
                           0000FA   645 _U1BAUD	=	0x00fa
                           0000FB   646 _U1UCR	=	0x00fb
                           0000FC   647 _U1GCR	=	0x00fc
                           0000FD   648 _P0DIR	=	0x00fd
                           0000FE   649 _P1DIR	=	0x00fe
                           0000FF   650 _P2DIR	=	0x00ff
                                    651 ;--------------------------------------------------------
                                    652 ; special function bits
                                    653 ;--------------------------------------------------------
                                    654 	.area RSEG    (ABS,DATA)
      000000                        655 	.org 0x0000
                           000080   656 _P0_0	=	0x0080
                           000081   657 _P0_1	=	0x0081
                           000082   658 _P0_2	=	0x0082
                           000083   659 _P0_3	=	0x0083
                           000084   660 _P0_4	=	0x0084
                           000085   661 _P0_5	=	0x0085
                           000086   662 _P0_6	=	0x0086
                           000087   663 _P0_7	=	0x0087
                           000088   664 _IT0	=	0x0088
                           000089   665 _RFTXRXIF	=	0x0089
                           00008A   666 _IT1	=	0x008a
                           00008B   667 _URX0IF	=	0x008b
                           00008D   668 _ADCIF	=	0x008d
                           00008F   669 _URX1IF	=	0x008f
                           000090   670 _P1_0	=	0x0090
                           000091   671 _P1_1	=	0x0091
                           000092   672 _P1_2	=	0x0092
                           000093   673 _P1_3	=	0x0093
                           000094   674 _P1_4	=	0x0094
                           000095   675 _P1_5	=	0x0095
                           000096   676 _P1_6	=	0x0096
                           000097   677 _P1_7	=	0x0097
                           000098   678 _ENCIF_0	=	0x0098
                           000099   679 _ENCIF_1	=	0x0099
                           0000A0   680 _P2_0	=	0x00a0
                           0000A1   681 _P2_1	=	0x00a1
                           0000A2   682 _P2_2	=	0x00a2
                           0000A3   683 _P2_3	=	0x00a3
                           0000A4   684 _P2_4	=	0x00a4
                           0000A5   685 _P2_5	=	0x00a5
                           0000A6   686 _P2_6	=	0x00a6
                           0000A7   687 _P2_7	=	0x00a7
                           0000A8   688 _RFTXRXIE	=	0x00a8
                           0000A9   689 _ADCIE	=	0x00a9
                           0000AA   690 _URX0IE	=	0x00aa
                           0000AB   691 _URX1IE	=	0x00ab
                           0000AC   692 _ENCIE	=	0x00ac
                           0000AD   693 _STIE	=	0x00ad
                           0000AF   694 _EA	=	0x00af
                           0000B8   695 _DMAIE	=	0x00b8
                           0000B9   696 _T1IE	=	0x00b9
                           0000BA   697 _T2IE	=	0x00ba
                           0000BB   698 _T3IE	=	0x00bb
                           0000BC   699 _T4IE	=	0x00bc
                           0000BD   700 _P0IE	=	0x00bd
                           0000C0   701 _DMAIF	=	0x00c0
                           0000C1   702 _T1IF	=	0x00c1
                           0000C2   703 _T2IF	=	0x00c2
                           0000C3   704 _T3IF	=	0x00c3
                           0000C4   705 _T4IF	=	0x00c4
                           0000C5   706 _P0IF	=	0x00c5
                           0000C7   707 _STIF	=	0x00c7
                           0000D0   708 _P	=	0x00d0
                           0000D1   709 _F1	=	0x00d1
                           0000D2   710 _OV	=	0x00d2
                           0000D3   711 _RS0	=	0x00d3
                           0000D4   712 _RS1	=	0x00d4
                           0000D5   713 _F0	=	0x00d5
                           0000D6   714 _AC	=	0x00d6
                           0000D7   715 _CY	=	0x00d7
                           0000D8   716 _T3OVFIF	=	0x00d8
                           0000D9   717 _T3CH0IF	=	0x00d9
                           0000DA   718 _T3CH1IF	=	0x00da
                           0000DB   719 _T4OVFIF	=	0x00db
                           0000DC   720 _T4CH0IF	=	0x00dc
                           0000DD   721 _T4CH1IF	=	0x00dd
                           0000DE   722 _OVFIM	=	0x00de
                           0000E0   723 _ACC_0	=	0x00e0
                           0000E1   724 _ACC_1	=	0x00e1
                           0000E2   725 _ACC_2	=	0x00e2
                           0000E3   726 _ACC_3	=	0x00e3
                           0000E4   727 _ACC_4	=	0x00e4
                           0000E5   728 _ACC_5	=	0x00e5
                           0000E6   729 _ACC_6	=	0x00e6
                           0000E7   730 _ACC_7	=	0x00e7
                           0000E8   731 _P2IF	=	0x00e8
                           0000E9   732 _UTX0IF	=	0x00e9
                           0000EA   733 _UTX1IF	=	0x00ea
                           0000EB   734 _P1IF	=	0x00eb
                           0000EC   735 _WDTIF	=	0x00ec
                           0000F0   736 _B_0	=	0x00f0
                           0000F1   737 _B_1	=	0x00f1
                           0000F2   738 _B_2	=	0x00f2
                           0000F3   739 _B_3	=	0x00f3
                           0000F4   740 _B_4	=	0x00f4
                           0000F5   741 _B_5	=	0x00f5
                           0000F6   742 _B_6	=	0x00f6
                           0000F7   743 _B_7	=	0x00f7
                           0000F8   744 _ACTIVE	=	0x00f8
                           0000F9   745 _TX_BYTE	=	0x00f9
                           0000FA   746 _RX_BYTE	=	0x00fa
                           0000FB   747 _ERR	=	0x00fb
                           0000FC   748 _FE	=	0x00fc
                           0000FD   749 _SLAVE	=	0x00fd
                           0000FE   750 _RE	=	0x00fe
                           0000FF   751 _MODE	=	0x00ff
                           0000E8   752 _USBIF	=	0x00e8
                                    753 ;--------------------------------------------------------
                                    754 ; overlayable register banks
                                    755 ;--------------------------------------------------------
                                    756 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        757 	.ds 8
                                    758 ;--------------------------------------------------------
                                    759 ; overlayable bit register bank
                                    760 ;--------------------------------------------------------
                                    761 	.area BIT_BANK	(REL,OVR,DATA)
      000020                        762 bits:
      000020                        763 	.ds 1
                           008000   764 	b0 = bits[0]
                           008100   765 	b1 = bits[1]
                           008200   766 	b2 = bits[2]
                           008300   767 	b3 = bits[3]
                           008400   768 	b4 = bits[4]
                           008500   769 	b5 = bits[5]
                           008600   770 	b6 = bits[6]
                           008700   771 	b7 = bits[7]
                                    772 ;--------------------------------------------------------
                                    773 ; internal ram data
                                    774 ;--------------------------------------------------------
                                    775 	.area DSEG    (DATA)
      00000A                        776 _rfif::
      00000A                        777 	.ds 1
      00000B                        778 _transmit_sloc0_1_0:
      00000B                        779 	.ds 2
      00000D                        780 _rfIntHandler_encoffset_1_136:
      00000D                        781 	.ds 1
                                    782 ;--------------------------------------------------------
                                    783 ; overlayable items in internal ram 
                                    784 ;--------------------------------------------------------
                                    785 ;--------------------------------------------------------
                                    786 ; indirectly addressable internal ram data
                                    787 ;--------------------------------------------------------
                                    788 	.area ISEG    (DATA)
                                    789 ;--------------------------------------------------------
                                    790 ; absolute internal ram data
                                    791 ;--------------------------------------------------------
                                    792 	.area IABS    (ABS,DATA)
                                    793 	.area IABS    (ABS,DATA)
                                    794 ;--------------------------------------------------------
                                    795 ; bit data
                                    796 ;--------------------------------------------------------
                                    797 	.area BSEG    (BIT)
                                    798 ;--------------------------------------------------------
                                    799 ; paged external ram data
                                    800 ;--------------------------------------------------------
                                    801 	.area PSEG    (PAG,XDATA)
                                    802 ;--------------------------------------------------------
                                    803 ; external ram data
                                    804 ;--------------------------------------------------------
                                    805 	.area XSEG    (XDATA)
                           00DF02   806 _MDMCTRL0H	=	0xdf02
                           00DF00   807 _SYNC1	=	0xdf00
                           00DF01   808 _SYNC0	=	0xdf01
                           00DF02   809 _PKTLEN	=	0xdf02
                           00DF03   810 _PKTCTRL1	=	0xdf03
                           00DF04   811 _PKTCTRL0	=	0xdf04
                           00DF05   812 _ADDR	=	0xdf05
                           00DF06   813 _CHANNR	=	0xdf06
                           00DF07   814 _FSCTRL1	=	0xdf07
                           00DF08   815 _FSCTRL0	=	0xdf08
                           00DF09   816 _FREQ2	=	0xdf09
                           00DF0A   817 _FREQ1	=	0xdf0a
                           00DF0B   818 _FREQ0	=	0xdf0b
                           00DF0C   819 _MDMCFG4	=	0xdf0c
                           00DF0D   820 _MDMCFG3	=	0xdf0d
                           00DF0E   821 _MDMCFG2	=	0xdf0e
                           00DF0F   822 _MDMCFG1	=	0xdf0f
                           00DF10   823 _MDMCFG0	=	0xdf10
                           00DF11   824 _DEVIATN	=	0xdf11
                           00DF12   825 _MCSM2	=	0xdf12
                           00DF13   826 _MCSM1	=	0xdf13
                           00DF14   827 _MCSM0	=	0xdf14
                           00DF15   828 _FOCCFG	=	0xdf15
                           00DF16   829 _BSCFG	=	0xdf16
                           00DF17   830 _AGCCTRL2	=	0xdf17
                           00DF18   831 _AGCCTRL1	=	0xdf18
                           00DF19   832 _AGCCTRL0	=	0xdf19
                           00DF1A   833 _FREND1	=	0xdf1a
                           00DF1B   834 _FREND0	=	0xdf1b
                           00DF1C   835 _FSCAL3	=	0xdf1c
                           00DF1D   836 _FSCAL2	=	0xdf1d
                           00DF1E   837 _FSCAL1	=	0xdf1e
                           00DF1F   838 _FSCAL0	=	0xdf1f
                           00DF20   839 __XREGDF20	=	0xdf20
                           00DF21   840 __XREGDF21	=	0xdf21
                           00DF22   841 __XREGDF22	=	0xdf22
                           00DF23   842 _TEST2	=	0xdf23
                           00DF24   843 _TEST1	=	0xdf24
                           00DF25   844 _TEST0	=	0xdf25
                           00DF26   845 __XREGDF26	=	0xdf26
                           00DF27   846 _PA_TABLE7	=	0xdf27
                           00DF28   847 _PA_TABLE6	=	0xdf28
                           00DF29   848 _PA_TABLE5	=	0xdf29
                           00DF2A   849 _PA_TABLE4	=	0xdf2a
                           00DF2B   850 _PA_TABLE3	=	0xdf2b
                           00DF2C   851 _PA_TABLE2	=	0xdf2c
                           00DF2D   852 _PA_TABLE1	=	0xdf2d
                           00DF2E   853 _PA_TABLE0	=	0xdf2e
                           00DF2F   854 _IOCFG2	=	0xdf2f
                           00DF30   855 _IOCFG1	=	0xdf30
                           00DF31   856 _IOCFG0	=	0xdf31
                           00DF32   857 __XREGDF32	=	0xdf32
                           00DF33   858 __XREGDF33	=	0xdf33
                           00DF34   859 __XREGDF34	=	0xdf34
                           00DF35   860 __XREGDF35	=	0xdf35
                           00DF36   861 _PARTNUM	=	0xdf36
                           00DF37   862 _VERSION	=	0xdf37
                           00DF38   863 _FREQEST	=	0xdf38
                           00DF39   864 _LQI	=	0xdf39
                           00DF3A   865 _RSSI	=	0xdf3a
                           00DF3B   866 _MARCSTATE	=	0xdf3b
                           00DF3C   867 _PKTSTATUS	=	0xdf3c
                           00DF3D   868 _VCO_VC_DAC	=	0xdf3d
                           00DF40   869 _I2SCFG0	=	0xdf40
                           00DF41   870 _I2SCFG1	=	0xdf41
                           00DF42   871 _I2SDATL	=	0xdf42
                           00DF43   872 _I2SDATH	=	0xdf43
                           00DF44   873 _I2SWCNT	=	0xdf44
                           00DF45   874 _I2SSTAT	=	0xdf45
                           00DF46   875 _I2SCLKF0	=	0xdf46
                           00DF47   876 _I2SCLKF1	=	0xdf47
                           00DF48   877 _I2SCLKF2	=	0xdf48
                           00DF80   878 __NA_P0	=	0xdf80
                           00DF81   879 __NA_SP	=	0xdf81
                           00DF82   880 __NA_DPL0	=	0xdf82
                           00DF83   881 __NA_DPH0	=	0xdf83
                           00DF84   882 __NA_DPL1	=	0xdf84
                           00DF85   883 __NA_DPH1	=	0xdf85
                           00DF86   884 _X_U0CSR	=	0xdf86
                           00DF87   885 __NA_PCON	=	0xdf87
                           00DF88   886 __NA_TCON	=	0xdf88
                           00DF89   887 _X_P0IFG	=	0xdf89
                           00DF8A   888 _X_P1IFG	=	0xdf8a
                           00DF8B   889 _X_P2IFG	=	0xdf8b
                           00DF8C   890 _X_PICTL	=	0xdf8c
                           00DF8D   891 _X_P1IEN	=	0xdf8d
                           00DF8E   892 __X_SFR8E	=	0xdf8e
                           00DF8F   893 _X_P0INP	=	0xdf8f
                           00DF90   894 __NA_P1	=	0xdf90
                           00DF91   895 _X_RFIM	=	0xdf91
                           00DF92   896 __NA_DPS	=	0xdf92
                           00DF93   897 _X_MPAGE	=	0xdf93
                           00DF94   898 __X_SFR94	=	0xdf94
                           00DF95   899 __X_SFR95	=	0xdf95
                           00DF96   900 __X_SFR96	=	0xdf96
                           00DF97   901 __X_SFR97	=	0xdf97
                           00DF98   902 __NA_S0CON	=	0xdf98
                           00DF99   903 __X_SFR99	=	0xdf99
                           00DF9A   904 __NA_IEN2	=	0xdf9a
                           00DF9B   905 __NA_S1CON	=	0xdf9b
                           00DF9C   906 _X_T2CT	=	0xdf9c
                           00DF9D   907 _X_T2PR	=	0xdf9d
                           00DF9E   908 _X_T2CTL	=	0xdf9e
                           00DF9F   909 __X_SFR9F	=	0xdf9f
                           00DFA0   910 __NA_P2	=	0xdfa0
                           00DFA1   911 _X_WORIRQ	=	0xdfa1
                           00DFA2   912 _X_WORCTRL	=	0xdfa2
                           00DFA3   913 _X_WOREVT0	=	0xdfa3
                           00DFA4   914 _X_WOREVT1	=	0xdfa4
                           00DFA5   915 _X_WORTIME0	=	0xdfa5
                           00DFA6   916 _X_WORTIME1	=	0xdfa6
                           00DFA7   917 __X_SFRA7	=	0xdfa7
                           00DFA8   918 __NA_IEN0	=	0xdfa8
                           00DFA9   919 __NA_IP0	=	0xdfa9
                           00DFAA   920 __X_SFRAA	=	0xdfaa
                           00DFAB   921 _X_FWT	=	0xdfab
                           00DFAC   922 _X_FADDRL	=	0xdfac
                           00DFAD   923 _X_FADDRH	=	0xdfad
                           00DFAE   924 _X_FCTL	=	0xdfae
                           00DFAF   925 _X_FWDATA	=	0xdfaf
                           00DFB0   926 __X_SFRB0	=	0xdfb0
                           00DFB1   927 _X_ENCDI	=	0xdfb1
                           00DFB2   928 _X_ENCDO	=	0xdfb2
                           00DFB3   929 _X_ENCCS	=	0xdfb3
                           00DFB4   930 _X_ADCCON1	=	0xdfb4
                           00DFB5   931 _X_ADCCON2	=	0xdfb5
                           00DFB6   932 _X_ADCCON3	=	0xdfb6
                           00DFB7   933 __X_SFRB7	=	0xdfb7
                           00DFB8   934 __NA_IEN1	=	0xdfb8
                           00DFB9   935 __NA_IP1	=	0xdfb9
                           00DFBA   936 _X_ADCL	=	0xdfba
                           00DFBB   937 _X_ADCH	=	0xdfbb
                           00DFBC   938 _X_RNDL	=	0xdfbc
                           00DFBD   939 _X_RNDH	=	0xdfbd
                           00DFBE   940 _X_SLEEP	=	0xdfbe
                           00DFBF   941 __X_SFRBF	=	0xdfbf
                           00DFC0   942 __NA_IRCON	=	0xdfc0
                           00DFC1   943 _X_U0DBUF	=	0xdfc1
                           00DFC2   944 _X_U0BAUD	=	0xdfc2
                           00DFC3   945 __X_SFRC3	=	0xdfc3
                           00DFC4   946 _X_U0UCR	=	0xdfc4
                           00DFC5   947 _X_U0GCR	=	0xdfc5
                           00DFC6   948 _X_CLKCON	=	0xdfc6
                           00DFC7   949 _X_MEMCTR	=	0xdfc7
                           00DFC8   950 __X_SFRC8	=	0xdfc8
                           00DFC9   951 _X_WDCTL	=	0xdfc9
                           00DFCA   952 _X_T3CNT	=	0xdfca
                           00DFCB   953 _X_T3CTL	=	0xdfcb
                           00DFCC   954 _X_T3CCTL0	=	0xdfcc
                           00DFCD   955 _X_T3CC0	=	0xdfcd
                           00DFCE   956 _X_T3CCTL1	=	0xdfce
                           00DFCF   957 _X_T3CC1	=	0xdfcf
                           00DFD0   958 __NA_PSW	=	0xdfd0
                           00DFD1   959 _X_DMAIRQ	=	0xdfd1
                           00DFD2   960 _X_DMA1CFGL	=	0xdfd2
                           00DFD3   961 _X_DMA1CFGH	=	0xdfd3
                           00DFD4   962 _X_DMA0CFGL	=	0xdfd4
                           00DFD5   963 _X_DMA0CFGH	=	0xdfd5
                           00DFD6   964 _X_DMAARM	=	0xdfd6
                           00DFD7   965 _X_DMAREQ	=	0xdfd7
                           00DFD8   966 _X_TIMIF	=	0xdfd8
                           00DFD9   967 _X_RFD	=	0xdfd9
                           00DFDA   968 _X_T1CC0L	=	0xdfda
                           00DFDB   969 _X_T1CC0H	=	0xdfdb
                           00DFDC   970 _X_T1CC1L	=	0xdfdc
                           00DFDD   971 _X_T1CC1H	=	0xdfdd
                           00DFDE   972 _X_T1CC2L	=	0xdfde
                           00DFDF   973 _X_T1CC2H	=	0xdfdf
                           00DFE0   974 __NA_ACC	=	0xdfe0
                           00DFE1   975 _X_RFST	=	0xdfe1
                           00DFE2   976 _X_T1CNTL	=	0xdfe2
                           00DFE3   977 _X_T1CNTH	=	0xdfe3
                           00DFE4   978 _X_T1CTL	=	0xdfe4
                           00DFE5   979 _X_T1CCTL0	=	0xdfe5
                           00DFE6   980 _X_T1CCTL1	=	0xdfe6
                           00DFE7   981 _X_T1CCTL2	=	0xdfe7
                           00DFE8   982 __NA_IRCON2	=	0xdfe8
                           00DFE9   983 _X_RFIF	=	0xdfe9
                           00DFEA   984 _X_T4CNT	=	0xdfea
                           00DFEB   985 _X_T4CTL	=	0xdfeb
                           00DFEC   986 _X_T4CCTL0	=	0xdfec
                           00DFED   987 _X_T4CC0	=	0xdfed
                           00DFEE   988 _X_T4CCTL1	=	0xdfee
                           00DFEF   989 _X_T4CC1	=	0xdfef
                           00DFF0   990 __NA_B	=	0xdff0
                           00DFF1   991 _X_PERCFG	=	0xdff1
                           00DFF2   992 _X_ADCCFG	=	0xdff2
                           00DFF3   993 _X_P0SEL	=	0xdff3
                           00DFF4   994 _X_P1SEL	=	0xdff4
                           00DFF5   995 _X_P2SEL	=	0xdff5
                           00DFF6   996 _X_P1INP	=	0xdff6
                           00DFF7   997 _X_P2INP	=	0xdff7
                           00DFF8   998 _X_U1CSR	=	0xdff8
                           00DFF9   999 _X_U1DBUF	=	0xdff9
                           00DFFA  1000 _X_U1BAUD	=	0xdffa
                           00DFFB  1001 _X_U1UCR	=	0xdffb
                           00DFFC  1002 _X_U1GCR	=	0xdffc
                           00DFFD  1003 _X_P0DIR	=	0xdffd
                           00DFFE  1004 _X_P1DIR	=	0xdffe
                           00DFFF  1005 _X_P2DIR	=	0xdfff
                           00DE00  1006 _USBADDR	=	0xde00
                           00DE01  1007 _USBPOW	=	0xde01
                           00DE02  1008 _USBIIF	=	0xde02
                           00DE04  1009 _USBOIF	=	0xde04
                           00DE06  1010 _USBCIF	=	0xde06
                           00DE07  1011 _USBIIE	=	0xde07
                           00DE09  1012 _USBOIE	=	0xde09
                           00DE0B  1013 _USBCIE	=	0xde0b
                           00DE0C  1014 _USBFRML	=	0xde0c
                           00DE0D  1015 _USBFRMH	=	0xde0d
                           00DE0E  1016 _USBINDEX	=	0xde0e
                           00DE10  1017 _USBMAXI	=	0xde10
                           00DE11  1018 _USBCS0	=	0xde11
                           00DE11  1019 _USBCSIL	=	0xde11
                           00DE12  1020 _USBCSIH	=	0xde12
                           00DE13  1021 _USBMAXO	=	0xde13
                           00DE14  1022 _USBCSOL	=	0xde14
                           00DE15  1023 _USBCSOH	=	0xde15
                           00DE16  1024 _USBCNT0	=	0xde16
                           00DE16  1025 _USBCNTL	=	0xde16
                           00DE17  1026 _USBCNTH	=	0xde17
                           00DE20  1027 _USBF0	=	0xde20
                           00DE22  1028 _USBF1	=	0xde22
                           00DE24  1029 _USBF2	=	0xde24
                           00DE26  1030 _USBF3	=	0xde26
                           00DE28  1031 _USBF4	=	0xde28
                           00DE2A  1032 _USBF5	=	0xde2a
      00F2AE                       1033 _rfRxCurrentBuffer::
      00F2AE                       1034 	.ds 1
      00F2AF                       1035 _rfrxbuf::
      00F2AF                       1036 	.ds 1024
      00F6AF                       1037 _rfRxCounter::
      00F6AF                       1038 	.ds 4
      00F6B3                       1039 _rfRxProcessed::
      00F6B3                       1040 	.ds 2
      00F6B5                       1041 _rftxbuf::
      00F6B5                       1042 	.ds 2
      00F6B7                       1043 _txTotal::
      00F6B7                       1044 	.ds 2
      00F6B9                       1045 _rf_status::
      00F6B9                       1046 	.ds 1
      00F6BA                       1047 _rf_MAC_timer::
      00F6BA                       1048 	.ds 2
      00F6BC                       1049 _rf_tLastRecv::
      00F6BC                       1050 	.ds 2
      00F6BE                       1051 _macdata::
      00F6BE                       1052 	.ds 21
      00F6D3                       1053 _transmit_PARM_2:
      00F6D3                       1054 	.ds 2
      00F6D5                       1055 _transmit_PARM_3:
      00F6D5                       1056 	.ds 2
      00F6D7                       1057 _transmit_PARM_4:
      00F6D7                       1058 	.ds 2
      00F6D9                       1059 _transmit_buf_1_96:
      00F6D9                       1060 	.ds 2
      00F6DB                       1061 _transmit_encoffset_1_97:
      00F6DB                       1062 	.ds 1
      00F6DC                       1063 _byte_shuffle_PARM_2:
      00F6DC                       1064 	.ds 2
      00F6DE                       1065 _byte_shuffle_PARM_3:
      00F6DE                       1066 	.ds 2
      00F6E0                       1067 _byte_shuffle_buf_1_146:
      00F6E0                       1068 	.ds 2
                                   1069 ;--------------------------------------------------------
                                   1070 ; absolute external ram data
                                   1071 ;--------------------------------------------------------
                                   1072 	.area XABS    (ABS,XDATA)
                                   1073 ;--------------------------------------------------------
                                   1074 ; external initialized ram data
                                   1075 ;--------------------------------------------------------
                                   1076 	.area XISEG   (XDATA)
      00F714                       1077 _rfRxInfMode::
      00F714                       1078 	.ds 1
      00F715                       1079 _rfRxTotalRXLen::
      00F715                       1080 	.ds 2
      00F717                       1081 _rfRxLargeLen::
      00F717                       1082 	.ds 2
      00F719                       1083 _rfTxCurBufIdx::
      00F719                       1084 	.ds 1
      00F71A                       1085 _rfTxBufCount::
      00F71A                       1086 	.ds 1
      00F71B                       1087 _rfTxCounter::
      00F71B                       1088 	.ds 2
      00F71D                       1089 _rfTxRepeatCounter::
      00F71D                       1090 	.ds 2
      00F71F                       1091 _rfTxBufferEnd::
      00F71F                       1092 	.ds 2
      00F721                       1093 _rfTxRepeatLen::
      00F721                       1094 	.ds 2
      00F723                       1095 _rfTxRepeatOffset::
      00F723                       1096 	.ds 2
      00F725                       1097 _rfTxTotalTXLen::
      00F725                       1098 	.ds 2
      00F727                       1099 _rfTxInfMode::
      00F727                       1100 	.ds 1
      00F728                       1101 _rfAESMode::
      00F728                       1102 	.ds 1
      00F729                       1103 _rfAmpMode::
      00F729                       1104 	.ds 1
      00F72A                       1105 _bRepeatMode::
      00F72A                       1106 	.ds 1
                                   1107 	.area HOME    (CODE)
                                   1108 	.area GSINIT0 (CODE)
                                   1109 	.area GSINIT1 (CODE)
                                   1110 	.area GSINIT2 (CODE)
                                   1111 	.area GSINIT3 (CODE)
                                   1112 	.area GSINIT4 (CODE)
                                   1113 	.area GSINIT5 (CODE)
                                   1114 	.area GSINIT  (CODE)
                                   1115 	.area GSFINAL (CODE)
                                   1116 	.area CSEG    (CODE)
                                   1117 ;--------------------------------------------------------
                                   1118 ; global & static initialisations
                                   1119 ;--------------------------------------------------------
                                   1120 	.area HOME    (CODE)
                                   1121 	.area GSINIT  (CODE)
                                   1122 	.area GSFINAL (CODE)
                                   1123 	.area GSINIT  (CODE)
                                   1124 ;--------------------------------------------------------
                                   1125 ; Home
                                   1126 ;--------------------------------------------------------
                                   1127 	.area HOME    (CODE)
                                   1128 	.area HOME    (CODE)
                                   1129 ;--------------------------------------------------------
                                   1130 ; code
                                   1131 ;--------------------------------------------------------
                                   1132 	.area CSEG    (CODE)
                                   1133 ;------------------------------------------------------------
                                   1134 ;Allocation info for local variables in function 'setFreq'
                                   1135 ;------------------------------------------------------------
                                   1136 ;freq                      Allocated to registers r4 r5 r6 r7 
                                   1137 ;num                       Allocated to registers r4 r5 r6 r7 
                                   1138 ;------------------------------------------------------------
                                   1139 ;	cc1111rf.c:56: void setFreq(u32 freq)
                                   1140 ;	-----------------------------------------
                                   1141 ;	 function setFreq
                                   1142 ;	-----------------------------------------
      0019BA                       1143 _setFreq:
                           000007  1144 	ar7 = 0x07
                           000006  1145 	ar6 = 0x06
                           000005  1146 	ar5 = 0x05
                           000004  1147 	ar4 = 0x04
                           000003  1148 	ar3 = 0x03
                           000002  1149 	ar2 = 0x02
                           000001  1150 	ar1 = 0x01
                           000000  1151 	ar0 = 0x00
                                   1152 ;	cc1111rf.c:61: num = freq * (0x10000 / 1000000.0) / PLATFORM_CLOCK_FREQ;
      0019BA 12 2A 5A         [24] 1153 	lcall	___ulong2fs
      0019BD AC 82            [24] 1154 	mov	r4,dpl
      0019BF AD 83            [24] 1155 	mov	r5,dph
      0019C1 AE F0            [24] 1156 	mov	r6,b
      0019C3 FF               [12] 1157 	mov	r7,a
      0019C4 C0 04            [24] 1158 	push	ar4
      0019C6 C0 05            [24] 1159 	push	ar5
      0019C8 C0 06            [24] 1160 	push	ar6
      0019CA C0 07            [24] 1161 	push	ar7
      0019CC 90 37 BD         [24] 1162 	mov	dptr,#0x37BD
      0019CF 75 F0 86         [24] 1163 	mov	b,#0x86
      0019D2 74 3D            [12] 1164 	mov	a,#0x3D
      0019D4 12 29 37         [24] 1165 	lcall	___fsmul
      0019D7 AC 82            [24] 1166 	mov	r4,dpl
      0019D9 AD 83            [24] 1167 	mov	r5,dph
      0019DB AE F0            [24] 1168 	mov	r6,b
      0019DD FF               [12] 1169 	mov	r7,a
      0019DE E5 81            [12] 1170 	mov	a,sp
      0019E0 24 FC            [12] 1171 	add	a,#0xfc
      0019E2 F5 81            [12] 1172 	mov	sp,a
      0019E4 E4               [12] 1173 	clr	a
      0019E5 C0 E0            [24] 1174 	push	acc
      0019E7 C0 E0            [24] 1175 	push	acc
      0019E9 74 C0            [12] 1176 	mov	a,#0xC0
      0019EB C0 E0            [24] 1177 	push	acc
      0019ED 74 41            [12] 1178 	mov	a,#0x41
      0019EF C0 E0            [24] 1179 	push	acc
      0019F1 8C 82            [24] 1180 	mov	dpl,r4
      0019F3 8D 83            [24] 1181 	mov	dph,r5
      0019F5 8E F0            [24] 1182 	mov	b,r6
      0019F7 EF               [12] 1183 	mov	a,r7
      0019F8 12 2B 2D         [24] 1184 	lcall	___fsdiv
      0019FB AC 82            [24] 1185 	mov	r4,dpl
      0019FD AD 83            [24] 1186 	mov	r5,dph
      0019FF AE F0            [24] 1187 	mov	r6,b
      001A01 FF               [12] 1188 	mov	r7,a
      001A02 E5 81            [12] 1189 	mov	a,sp
      001A04 24 FC            [12] 1190 	add	a,#0xfc
      001A06 F5 81            [12] 1191 	mov	sp,a
      001A08 8C 82            [24] 1192 	mov	dpl,r4
      001A0A 8D 83            [24] 1193 	mov	dph,r5
      001A0C 8E F0            [24] 1194 	mov	b,r6
      001A0E EF               [12] 1195 	mov	a,r7
      001A0F 12 2A 6D         [24] 1196 	lcall	___fs2ulong
      001A12 AC 82            [24] 1197 	mov	r4,dpl
      001A14 AD 83            [24] 1198 	mov	r5,dph
      001A16 AE F0            [24] 1199 	mov	r6,b
                                   1200 ;	cc1111rf.c:62: FREQ2 = num >> 16;
      001A18 90 DF 09         [24] 1201 	mov	dptr,#_FREQ2
      001A1B EE               [12] 1202 	mov	a,r6
      001A1C F0               [24] 1203 	movx	@dptr,a
                                   1204 ;	cc1111rf.c:63: FREQ1 = (num>>8) & 0xff;
      001A1D 8D 03            [24] 1205 	mov	ar3,r5
      001A1F 90 DF 0A         [24] 1206 	mov	dptr,#_FREQ1
      001A22 EB               [12] 1207 	mov	a,r3
      001A23 F0               [24] 1208 	movx	@dptr,a
                                   1209 ;	cc1111rf.c:64: FREQ0 = num & 0xff;
      001A24 90 DF 0B         [24] 1210 	mov	dptr,#_FREQ0
      001A27 EC               [12] 1211 	mov	a,r4
      001A28 F0               [24] 1212 	movx	@dptr,a
      001A29 22               [24] 1213 	ret
                                   1214 ;------------------------------------------------------------
                                   1215 ;Allocation info for local variables in function 'resetRFSTATE'
                                   1216 ;------------------------------------------------------------
                                   1217 ;	cc1111rf.c:67: void resetRFSTATE(void)
                                   1218 ;	-----------------------------------------
                                   1219 ;	 function resetRFSTATE
                                   1220 ;	-----------------------------------------
      001A2A                       1221 _resetRFSTATE:
                                   1222 ;	cc1111rf.c:70: RFST = RFST_SIDLE; while ((MARCSTATE) != MARC_STATE_IDLE);
      001A2A 75 E1 04         [24] 1223 	mov	_RFST,#0x04
      001A2D                       1224 00101$:
      001A2D 90 DF 3B         [24] 1225 	mov	dptr,#_MARCSTATE
      001A30 E0               [24] 1226 	movx	a,@dptr
      001A31 FF               [12] 1227 	mov	r7,a
      001A32 BF 01 F8         [24] 1228 	cjne	r7,#0x01,00101$
                                   1229 ;	cc1111rf.c:72: RFST = rf_status;
      001A35 90 F6 B9         [24] 1230 	mov	dptr,#_rf_status
      001A38 E0               [24] 1231 	movx	a,@dptr
      001A39 F5 E1            [12] 1232 	mov	_RFST,a
                                   1233 ;	cc1111rf.c:73: while (rf_status != RFST_SIDLE && MARCSTATE == MARC_STATE_IDLE)
      001A3B                       1234 00105$:
      001A3B 90 F6 B9         [24] 1235 	mov	dptr,#_rf_status
      001A3E E0               [24] 1236 	movx	a,@dptr
      001A3F FF               [12] 1237 	mov	r7,a
      001A40 BF 04 01         [24] 1238 	cjne	r7,#0x04,00124$
      001A43 22               [24] 1239 	ret
      001A44                       1240 00124$:
      001A44 90 DF 3B         [24] 1241 	mov	dptr,#_MARCSTATE
      001A47 E0               [24] 1242 	movx	a,@dptr
      001A48 FF               [12] 1243 	mov	r7,a
      001A49 BF 01 02         [24] 1244 	cjne	r7,#0x01,00125$
      001A4C 80 ED            [24] 1245 	sjmp	00105$
      001A4E                       1246 00125$:
      001A4E 22               [24] 1247 	ret
                                   1248 ;------------------------------------------------------------
                                   1249 ;Allocation info for local variables in function 'RxMode'
                                   1250 ;------------------------------------------------------------
                                   1251 ;	cc1111rf.c:78: void RxMode(void)
                                   1252 ;	-----------------------------------------
                                   1253 ;	 function RxMode
                                   1254 ;	-----------------------------------------
      001A4F                       1255 _RxMode:
                                   1256 ;	cc1111rf.c:80: if (rf_status != RFST_SRX)
      001A4F 90 F6 B9         [24] 1257 	mov	dptr,#_rf_status
      001A52 E0               [24] 1258 	movx	a,@dptr
      001A53 FF               [12] 1259 	mov	r7,a
      001A54 BF 02 01         [24] 1260 	cjne	r7,#0x02,00108$
      001A57 22               [24] 1261 	ret
      001A58                       1262 00108$:
                                   1263 ;	cc1111rf.c:82: MCSM1 &= 0xf0;
      001A58 90 DF 13         [24] 1264 	mov	dptr,#_MCSM1
      001A5B E0               [24] 1265 	movx	a,@dptr
      001A5C FF               [12] 1266 	mov	r7,a
      001A5D 74 F0            [12] 1267 	mov	a,#0xF0
      001A5F 5F               [12] 1268 	anl	a,r7
      001A60 F0               [24] 1269 	movx	@dptr,a
                                   1270 ;	cc1111rf.c:83: MCSM1 |= 0x0f;
      001A61 E0               [24] 1271 	movx	a,@dptr
      001A62 FF               [12] 1272 	mov	r7,a
      001A63 74 0F            [12] 1273 	mov	a,#0x0F
      001A65 4F               [12] 1274 	orl	a,r7
      001A66 F0               [24] 1275 	movx	@dptr,a
                                   1276 ;	cc1111rf.c:84: rf_status = RFST_SRX;
      001A67 90 F6 B9         [24] 1277 	mov	dptr,#_rf_status
      001A6A 74 02            [12] 1278 	mov	a,#0x02
      001A6C F0               [24] 1279 	movx	@dptr,a
                                   1280 ;	cc1111rf.c:86: startRX();
      001A6D 02 1E 8E         [24] 1281 	ljmp	_startRX
                                   1282 ;------------------------------------------------------------
                                   1283 ;Allocation info for local variables in function 'TxMode'
                                   1284 ;------------------------------------------------------------
                                   1285 ;	cc1111rf.c:91: void TxMode(void)
                                   1286 ;	-----------------------------------------
                                   1287 ;	 function TxMode
                                   1288 ;	-----------------------------------------
      001A70                       1289 _TxMode:
                                   1290 ;	cc1111rf.c:93: if (rf_status != RFST_STX)
      001A70 90 F6 B9         [24] 1291 	mov	dptr,#_rf_status
      001A73 E0               [24] 1292 	movx	a,@dptr
      001A74 FF               [12] 1293 	mov	r7,a
      001A75 BF 03 01         [24] 1294 	cjne	r7,#0x03,00117$
      001A78 22               [24] 1295 	ret
      001A79                       1296 00117$:
                                   1297 ;	cc1111rf.c:95: MCSM1 &= 0xf0;
      001A79 90 DF 13         [24] 1298 	mov	dptr,#_MCSM1
      001A7C E0               [24] 1299 	movx	a,@dptr
      001A7D FF               [12] 1300 	mov	r7,a
      001A7E 74 F0            [12] 1301 	mov	a,#0xF0
      001A80 5F               [12] 1302 	anl	a,r7
      001A81 F0               [24] 1303 	movx	@dptr,a
                                   1304 ;	cc1111rf.c:96: MCSM1 |= 0x0a;
      001A82 E0               [24] 1305 	movx	a,@dptr
      001A83 FF               [12] 1306 	mov	r7,a
      001A84 74 0A            [12] 1307 	mov	a,#0x0A
      001A86 4F               [12] 1308 	orl	a,r7
      001A87 F0               [24] 1309 	movx	@dptr,a
                                   1310 ;	cc1111rf.c:98: rf_status = RFST_STX;
      001A88 90 F6 B9         [24] 1311 	mov	dptr,#_rf_status
      001A8B 74 03            [12] 1312 	mov	a,#0x03
      001A8D F0               [24] 1313 	movx	@dptr,a
                                   1314 ;	cc1111rf.c:99: RFTX;
                                   1315 ;	1-genFromRTrack replaced	mov	_RFST,#0x03
      001A8E F5 E1            [12] 1316 	mov	_RFST,a
      001A90                       1317 00101$:
      001A90 90 DF 3B         [24] 1318 	mov	dptr,#_MARCSTATE
      001A93 E0               [24] 1319 	movx	a,@dptr
      001A94 FF               [12] 1320 	mov	r7,a
      001A95 BF 13 F8         [24] 1321 	cjne	r7,#0x13,00101$
      001A98 22               [24] 1322 	ret
                                   1323 ;------------------------------------------------------------
                                   1324 ;Allocation info for local variables in function 'IdleMode'
                                   1325 ;------------------------------------------------------------
                                   1326 ;	cc1111rf.c:104: void IdleMode(void)
                                   1327 ;	-----------------------------------------
                                   1328 ;	 function IdleMode
                                   1329 ;	-----------------------------------------
      001A99                       1330 _IdleMode:
                                   1331 ;	cc1111rf.c:106: if (rf_status != RFST_SIDLE)
      001A99 90 F6 B9         [24] 1332 	mov	dptr,#_rf_status
      001A9C E0               [24] 1333 	movx	a,@dptr
      001A9D FF               [12] 1334 	mov	r7,a
      001A9E BF 04 01         [24] 1335 	cjne	r7,#0x04,00120$
      001AA1 22               [24] 1336 	ret
      001AA2                       1337 00120$:
                                   1338 ;	cc1111rf.c:109: MCSM1 &= 0xf0;
      001AA2 90 DF 13         [24] 1339 	mov	dptr,#_MCSM1
      001AA5 E0               [24] 1340 	movx	a,@dptr
      001AA6 FF               [12] 1341 	mov	r7,a
      001AA7 74 F0            [12] 1342 	mov	a,#0xF0
      001AA9 5F               [12] 1343 	anl	a,r7
      001AAA F0               [24] 1344 	movx	@dptr,a
                                   1345 ;	cc1111rf.c:110: RFIM &= ~RFIF_IRQ_DONE;
      001AAB AF 91            [24] 1346 	mov	r7,_RFIM
      001AAD 74 EF            [12] 1347 	mov	a,#0xEF
      001AAF 5F               [12] 1348 	anl	a,r7
      001AB0 F5 91            [12] 1349 	mov	_RFIM,a
                                   1350 ;	cc1111rf.c:111: RFOFF;
      001AB2 75 E1 04         [24] 1351 	mov	_RFST,#0x04
      001AB5                       1352 00101$:
      001AB5 90 DF 3B         [24] 1353 	mov	dptr,#_MARCSTATE
      001AB8 E0               [24] 1354 	movx	a,@dptr
      001AB9 FF               [12] 1355 	mov	r7,a
      001ABA BF 01 F8         [24] 1356 	cjne	r7,#0x01,00101$
                                   1357 ;	cc1111rf.c:118: S1CON &= ~(S1CON_RFIF_0|S1CON_RFIF_1);  // clear RFIF interrupts
      001ABD AF 9B            [24] 1358 	mov	r7,_S1CON
      001ABF 74 FC            [12] 1359 	mov	a,#0xFC
      001AC1 5F               [12] 1360 	anl	a,r7
      001AC2 F5 9B            [12] 1361 	mov	_S1CON,a
                                   1362 ;	cc1111rf.c:119: RFIF &= ~RFIF_IRQ_DONE;
      001AC4 AF E9            [24] 1363 	mov	r7,_RFIF
      001AC6 74 EF            [12] 1364 	mov	a,#0xEF
      001AC8 5F               [12] 1365 	anl	a,r7
      001AC9 F5 E9            [12] 1366 	mov	_RFIF,a
                                   1367 ;	cc1111rf.c:121: rf_status = RFST_SIDLE;
      001ACB 90 F6 B9         [24] 1368 	mov	dptr,#_rf_status
      001ACE 74 04            [12] 1369 	mov	a,#0x04
      001AD0 F0               [24] 1370 	movx	@dptr,a
      001AD1 22               [24] 1371 	ret
                                   1372 ;------------------------------------------------------------
                                   1373 ;Allocation info for local variables in function 'init_RF'
                                   1374 ;------------------------------------------------------------
                                   1375 ;	cc1111rf.c:130: void init_RF()
                                   1376 ;	-----------------------------------------
                                   1377 ;	 function init_RF
                                   1378 ;	-----------------------------------------
      001AD2                       1379 _init_RF:
                                   1380 ;	cc1111rf.c:133: rf_tLastRecv = 0;
      001AD2 90 F6 BC         [24] 1381 	mov	dptr,#_rf_tLastRecv
      001AD5 E4               [12] 1382 	clr	a
      001AD6 F0               [24] 1383 	movx	@dptr,a
      001AD7 A3               [24] 1384 	inc	dptr
      001AD8 F0               [24] 1385 	movx	@dptr,a
                                   1386 ;	cc1111rf.c:136: rfRxCounter[FIRST_BUFFER] = 0;
      001AD9 90 F6 AF         [24] 1387 	mov	dptr,#_rfRxCounter
      001ADC F0               [24] 1388 	movx	@dptr,a
      001ADD A3               [24] 1389 	inc	dptr
      001ADE F0               [24] 1390 	movx	@dptr,a
                                   1391 ;	cc1111rf.c:137: rfRxCounter[SECOND_BUFFER] = 0;
      001ADF 90 F6 B1         [24] 1392 	mov	dptr,#(_rfRxCounter + 0x0002)
      001AE2 F0               [24] 1393 	movx	@dptr,a
      001AE3 A3               [24] 1394 	inc	dptr
      001AE4 F0               [24] 1395 	movx	@dptr,a
                                   1396 ;	cc1111rf.c:150: CLKCON &= 0xc7;
      001AE5 53 C6 C7         [24] 1397 	anl	_CLKCON,#0xC7
                                   1398 ;	cc1111rf.c:152: T2PR = 0;
      001AE8 75 9D 00         [24] 1399 	mov	_T2PR,#0x00
                                   1400 ;	cc1111rf.c:153: T2CTL |= T2CTL_TIP_64;  // 64, 128, 256, 1024
      001AEB 85 9E 9E         [24] 1401 	mov	_T2CTL,_T2CTL
                                   1402 ;	cc1111rf.c:154: T2CTL |= T2CTL_TIG;
      001AEE 43 9E 04         [24] 1403 	orl	_T2CTL,#0x04
                                   1404 ;	cc1111rf.c:158: IP0 |= 0;       // grp0 is RF/RFTXRX/DMA
      001AF1 85 A9 A9         [24] 1405 	mov	_IP0,_IP0
                                   1406 ;	cc1111rf.c:159: IP1 |= BIT0;
      001AF4 43 B9 01         [24] 1407 	orl	_IP1,#0x01
                                   1408 ;	cc1111rf.c:162: rf_status = RFST_SIDLE;
      001AF7 90 F6 B9         [24] 1409 	mov	dptr,#_rf_status
      001AFA 74 04            [12] 1410 	mov	a,#0x04
      001AFC F0               [24] 1411 	movx	@dptr,a
                                   1412 ;	cc1111rf.c:171: memset(rfrxbuf,0,(BUFFER_AMOUNT * BUFFER_SIZE));
      001AFD 75 0F 00         [24] 1413 	mov	_memset_PARM_2,#0x00
      001B00 75 10 00         [24] 1414 	mov	_memset_PARM_3,#0x00
                                   1415 ;	1-genFromRTrack replaced	mov	(_memset_PARM_3 + 1),#0x04
      001B03 F5 11            [12] 1416 	mov	(_memset_PARM_3 + 1),a
      001B05 90 F2 AF         [24] 1417 	mov	dptr,#_rfrxbuf
      001B08 75 F0 00         [24] 1418 	mov	b,#0x00
      001B0B 12 2A 3B         [24] 1419 	lcall	_memset
                                   1420 ;	cc1111rf.c:173: appInitRf();
      001B0E 12 02 2C         [24] 1421 	lcall	_appInitRf
                                   1422 ;	cc1111rf.c:176: RFTXRXIE = 1;                   // FIXME: should this be something that is enabled/disabled by usb?
      001B11 D2 A8            [12] 1423 	setb	_RFTXRXIE
                                   1424 ;	cc1111rf.c:177: RFIM = 0xd1;    // TXUNF, RXOVF, DONE, SFD  (SFD to mark time of receipt)
      001B13 75 91 D1         [24] 1425 	mov	_RFIM,#0xD1
                                   1426 ;	cc1111rf.c:178: RFIF = 0;
      001B16 75 E9 00         [24] 1427 	mov	_RFIF,#0x00
                                   1428 ;	cc1111rf.c:179: rfif = 0;
      001B19 75 0A 00         [24] 1429 	mov	_rfif,#0x00
                                   1430 ;	cc1111rf.c:180: IEN2 |= IEN2_RFIE;
      001B1C 43 9A 01         [24] 1431 	orl	_IEN2,#0x01
                                   1432 ;	cc1111rf.c:183: RFOFF;
      001B1F 75 E1 04         [24] 1433 	mov	_RFST,#0x04
      001B22                       1434 00101$:
      001B22 90 DF 3B         [24] 1435 	mov	dptr,#_MARCSTATE
      001B25 E0               [24] 1436 	movx	a,@dptr
      001B26 FF               [12] 1437 	mov	r7,a
      001B27 BF 01 F8         [24] 1438 	cjne	r7,#0x01,00101$
      001B2A 22               [24] 1439 	ret
                                   1440 ;------------------------------------------------------------
                                   1441 ;Allocation info for local variables in function 'waitRSSI'
                                   1442 ;------------------------------------------------------------
                                   1443 ;u16WaitTime               Allocated to registers r6 r7 
                                   1444 ;------------------------------------------------------------
                                   1445 ;	cc1111rf.c:188: int waitRSSI()
                                   1446 ;	-----------------------------------------
                                   1447 ;	 function waitRSSI
                                   1448 ;	-----------------------------------------
      001B2B                       1449 _waitRSSI:
                                   1450 ;	cc1111rf.c:191: while(u16WaitTime < RSSI_TIMEOUT_US)
      001B2B 7E 00            [12] 1451 	mov	r6,#0x00
      001B2D 7F 00            [12] 1452 	mov	r7,#0x00
      001B2F                       1453 00104$:
      001B2F C3               [12] 1454 	clr	c
      001B30 EE               [12] 1455 	mov	a,r6
      001B31 94 DC            [12] 1456 	subb	a,#0xDC
      001B33 EF               [12] 1457 	mov	a,r7
      001B34 94 05            [12] 1458 	subb	a,#0x05
      001B36 50 24            [24] 1459 	jnc	00106$
                                   1460 ;	cc1111rf.c:193: if(PKTSTATUS & (PKTSTATUS_CCA | PKTSTATUS_CS))
      001B38 90 DF 3C         [24] 1461 	mov	dptr,#_PKTSTATUS
      001B3B E0               [24] 1462 	movx	a,@dptr
      001B3C FD               [12] 1463 	mov	r5,a
      001B3D 54 50            [12] 1464 	anl	a,#0x50
      001B3F 60 04            [24] 1465 	jz	00102$
                                   1466 ;	cc1111rf.c:195: return 1;
      001B41 90 00 01         [24] 1467 	mov	dptr,#0x0001
      001B44 22               [24] 1468 	ret
      001B45                       1469 00102$:
                                   1470 ;	cc1111rf.c:199: sleepMicros(50);
      001B45 90 00 32         [24] 1471 	mov	dptr,#0x0032
      001B48 C0 07            [24] 1472 	push	ar7
      001B4A C0 06            [24] 1473 	push	ar6
      001B4C 12 24 AB         [24] 1474 	lcall	_sleepMicros
      001B4F D0 06            [24] 1475 	pop	ar6
      001B51 D0 07            [24] 1476 	pop	ar7
                                   1477 ;	cc1111rf.c:200: u16WaitTime += 50;
      001B53 74 32            [12] 1478 	mov	a,#0x32
      001B55 2E               [12] 1479 	add	a,r6
      001B56 FE               [12] 1480 	mov	r6,a
      001B57 E4               [12] 1481 	clr	a
      001B58 3F               [12] 1482 	addc	a,r7
      001B59 FF               [12] 1483 	mov	r7,a
      001B5A 80 D3            [24] 1484 	sjmp	00104$
      001B5C                       1485 00106$:
                                   1486 ;	cc1111rf.c:203: return 0;
      001B5C 90 00 00         [24] 1487 	mov	dptr,#0x0000
      001B5F 22               [24] 1488 	ret
                                   1489 ;------------------------------------------------------------
                                   1490 ;Allocation info for local variables in function 'transmit'
                                   1491 ;------------------------------------------------------------
                                   1492 ;sloc0                     Allocated with name '_transmit_sloc0_1_0'
                                   1493 ;len                       Allocated with name '_transmit_PARM_2'
                                   1494 ;repeat                    Allocated with name '_transmit_PARM_3'
                                   1495 ;offset                    Allocated with name '_transmit_PARM_4'
                                   1496 ;buf                       Allocated with name '_transmit_buf_1_96'
                                   1497 ;countdown                 Allocated with name '_transmit_countdown_1_97'
                                   1498 ;encoffset                 Allocated with name '_transmit_encoffset_1_97'
                                   1499 ;original_pktlen           Allocated with name '_transmit_original_pktlen_1_97'
                                   1500 ;------------------------------------------------------------
                                   1501 ;	cc1111rf.c:214: u8 transmit(__xdata u8* __xdata buf, __xdata u16 len, __xdata u16 repeat, __xdata u16 offset)
                                   1502 ;	-----------------------------------------
                                   1503 ;	 function transmit
                                   1504 ;	-----------------------------------------
      001B60                       1505 _transmit:
      001B60 AF 83            [24] 1506 	mov	r7,dph
      001B62 E5 82            [12] 1507 	mov	a,dpl
      001B64 90 F6 D9         [24] 1508 	mov	dptr,#_transmit_buf_1_96
      001B67 F0               [24] 1509 	movx	@dptr,a
      001B68 EF               [12] 1510 	mov	a,r7
      001B69 A3               [24] 1511 	inc	dptr
      001B6A F0               [24] 1512 	movx	@dptr,a
                                   1513 ;	cc1111rf.c:217: __xdata u8 encoffset = 0;
      001B6B 90 F6 DB         [24] 1514 	mov	dptr,#_transmit_encoffset_1_97
      001B6E E4               [12] 1515 	clr	a
      001B6F F0               [24] 1516 	movx	@dptr,a
                                   1517 ;	cc1111rf.c:218: __xdata u8 original_pktlen = PKTLEN;
      001B70 90 DF 02         [24] 1518 	mov	dptr,#_PKTLEN
      001B73 E0               [24] 1519 	movx	a,@dptr
      001B74 FF               [12] 1520 	mov	r7,a
                                   1521 ;	cc1111rf.c:220: while (MARCSTATE == MARC_STATE_TX)
      001B75                       1522 00101$:
      001B75 90 DF 3B         [24] 1523 	mov	dptr,#_MARCSTATE
      001B78 E0               [24] 1524 	movx	a,@dptr
      001B79 FE               [12] 1525 	mov	r6,a
      001B7A BE 13 0B         [24] 1526 	cjne	r6,#0x13,00103$
                                   1527 ;	cc1111rf.c:222: LED = !LED;
      001B7D B2 91            [12] 1528 	cpl	_P1_1
                                   1529 ;	cc1111rf.c:224: usbProcessEvents();
      001B7F C0 07            [24] 1530 	push	ar7
      001B81 12 16 18         [24] 1531 	lcall	_usbProcessEvents
      001B84 D0 07            [24] 1532 	pop	ar7
      001B86 80 ED            [24] 1533 	sjmp	00101$
      001B88                       1534 00103$:
                                   1535 ;	cc1111rf.c:228: LED = 0;
      001B88 C2 91            [12] 1536 	clr	_P1_1
                                   1537 ;	cc1111rf.c:231: rfTxInfMode = 0;
      001B8A 90 F7 27         [24] 1538 	mov	dptr,#_rfTxInfMode
      001B8D E4               [12] 1539 	clr	a
      001B8E F0               [24] 1540 	movx	@dptr,a
                                   1541 ;	cc1111rf.c:232: rfTxRepeatCounter = repeat;
      001B8F 90 F6 D5         [24] 1542 	mov	dptr,#_transmit_PARM_3
      001B92 E0               [24] 1543 	movx	a,@dptr
      001B93 FD               [12] 1544 	mov	r5,a
      001B94 A3               [24] 1545 	inc	dptr
      001B95 E0               [24] 1546 	movx	a,@dptr
      001B96 FE               [12] 1547 	mov	r6,a
      001B97 90 F7 1D         [24] 1548 	mov	dptr,#_rfTxRepeatCounter
      001B9A ED               [12] 1549 	mov	a,r5
      001B9B F0               [24] 1550 	movx	@dptr,a
      001B9C EE               [12] 1551 	mov	a,r6
      001B9D A3               [24] 1552 	inc	dptr
      001B9E F0               [24] 1553 	movx	@dptr,a
                                   1554 ;	cc1111rf.c:233: rfTxRepeatOffset = offset;
      001B9F 90 F6 D7         [24] 1555 	mov	dptr,#_transmit_PARM_4
      001BA2 E0               [24] 1556 	movx	a,@dptr
      001BA3 FB               [12] 1557 	mov	r3,a
      001BA4 A3               [24] 1558 	inc	dptr
      001BA5 E0               [24] 1559 	movx	a,@dptr
      001BA6 FC               [12] 1560 	mov	r4,a
      001BA7 90 F7 23         [24] 1561 	mov	dptr,#_rfTxRepeatOffset
      001BAA EB               [12] 1562 	mov	a,r3
      001BAB F0               [24] 1563 	movx	@dptr,a
      001BAC EC               [12] 1564 	mov	a,r4
      001BAD A3               [24] 1565 	inc	dptr
      001BAE F0               [24] 1566 	movx	@dptr,a
                                   1567 ;	cc1111rf.c:234: rfTxBufferEnd = len;
      001BAF 90 F6 D3         [24] 1568 	mov	dptr,#_transmit_PARM_2
      001BB2 E0               [24] 1569 	movx	a,@dptr
      001BB3 F9               [12] 1570 	mov	r1,a
      001BB4 A3               [24] 1571 	inc	dptr
      001BB5 E0               [24] 1572 	movx	a,@dptr
      001BB6 FA               [12] 1573 	mov	r2,a
      001BB7 90 F7 1F         [24] 1574 	mov	dptr,#_rfTxBufferEnd
      001BBA E9               [12] 1575 	mov	a,r1
      001BBB F0               [24] 1576 	movx	@dptr,a
      001BBC EA               [12] 1577 	mov	a,r2
      001BBD A3               [24] 1578 	inc	dptr
      001BBE F0               [24] 1579 	movx	@dptr,a
                                   1580 ;	cc1111rf.c:235: rfTxRepeatLen = len - offset;
      001BBF 90 F7 21         [24] 1581 	mov	dptr,#_rfTxRepeatLen
      001BC2 E9               [12] 1582 	mov	a,r1
      001BC3 C3               [12] 1583 	clr	c
      001BC4 9B               [12] 1584 	subb	a,r3
      001BC5 F0               [24] 1585 	movx	@dptr,a
      001BC6 EA               [12] 1586 	mov	a,r2
      001BC7 9C               [12] 1587 	subb	a,r4
      001BC8 A3               [24] 1588 	inc	dptr
      001BC9 F0               [24] 1589 	movx	@dptr,a
                                   1590 ;	cc1111rf.c:237: rfTxTotalTXLen = len + (rfTxRepeatLen * repeat);
      001BCA 90 F7 21         [24] 1591 	mov	dptr,#_rfTxRepeatLen
      001BCD E0               [24] 1592 	movx	a,@dptr
      001BCE FB               [12] 1593 	mov	r3,a
      001BCF A3               [24] 1594 	inc	dptr
      001BD0 E0               [24] 1595 	movx	a,@dptr
      001BD1 FC               [12] 1596 	mov	r4,a
      001BD2 8D 0F            [24] 1597 	mov	__mulint_PARM_2,r5
      001BD4 8E 10            [24] 1598 	mov	(__mulint_PARM_2 + 1),r6
      001BD6 8B 82            [24] 1599 	mov	dpl,r3
      001BD8 8C 83            [24] 1600 	mov	dph,r4
      001BDA C0 07            [24] 1601 	push	ar7
      001BDC C0 06            [24] 1602 	push	ar6
      001BDE C0 05            [24] 1603 	push	ar5
      001BE0 C0 02            [24] 1604 	push	ar2
      001BE2 C0 01            [24] 1605 	push	ar1
      001BE4 12 2A C1         [24] 1606 	lcall	__mulint
      001BE7 AB 82            [24] 1607 	mov	r3,dpl
      001BE9 AC 83            [24] 1608 	mov	r4,dph
      001BEB D0 01            [24] 1609 	pop	ar1
      001BED D0 02            [24] 1610 	pop	ar2
      001BEF D0 05            [24] 1611 	pop	ar5
      001BF1 D0 06            [24] 1612 	pop	ar6
      001BF3 D0 07            [24] 1613 	pop	ar7
      001BF5 90 F7 25         [24] 1614 	mov	dptr,#_rfTxTotalTXLen
      001BF8 EB               [12] 1615 	mov	a,r3
      001BF9 29               [12] 1616 	add	a,r1
      001BFA F0               [24] 1617 	movx	@dptr,a
      001BFB EC               [12] 1618 	mov	a,r4
      001BFC 3A               [12] 1619 	addc	a,r2
      001BFD A3               [24] 1620 	inc	dptr
      001BFE F0               [24] 1621 	movx	@dptr,a
                                   1622 ;	cc1111rf.c:242: if(len == 0)
      001BFF E9               [12] 1623 	mov	a,r1
      001C00 4A               [12] 1624 	orl	a,r2
      001C01 70 5D            [24] 1625 	jnz	00118$
                                   1626 ;	cc1111rf.c:244: len = buf[0];
      001C03 90 F6 D9         [24] 1627 	mov	dptr,#_transmit_buf_1_96
      001C06 E0               [24] 1628 	movx	a,@dptr
      001C07 FB               [12] 1629 	mov	r3,a
      001C08 A3               [24] 1630 	inc	dptr
      001C09 E0               [24] 1631 	movx	a,@dptr
      001C0A FC               [12] 1632 	mov	r4,a
      001C0B 8B 82            [24] 1633 	mov	dpl,r3
      001C0D 8C 83            [24] 1634 	mov	dph,r4
      001C0F E0               [24] 1635 	movx	a,@dptr
      001C10 F8               [12] 1636 	mov	r0,a
      001C11 88 0B            [24] 1637 	mov	_transmit_sloc0_1_0,r0
      001C13 75 0C 00         [24] 1638 	mov	(_transmit_sloc0_1_0 + 1),#0x00
      001C16 90 F6 D3         [24] 1639 	mov	dptr,#_transmit_PARM_2
      001C19 E5 0B            [12] 1640 	mov	a,_transmit_sloc0_1_0
      001C1B F0               [24] 1641 	movx	@dptr,a
      001C1C E5 0C            [12] 1642 	mov	a,(_transmit_sloc0_1_0 + 1)
      001C1E A3               [24] 1643 	inc	dptr
      001C1F F0               [24] 1644 	movx	@dptr,a
                                   1645 ;	cc1111rf.c:246: switch (PKTCTRL0 & PKTCTRL0_LENGTH_CONFIG)
      001C20 90 DF 04         [24] 1646 	mov	dptr,#_PKTCTRL0
      001C23 E0               [24] 1647 	movx	a,@dptr
      001C24 F8               [12] 1648 	mov	r0,a
      001C25 53 00 03         [24] 1649 	anl	ar0,#0x03
      001C28 B8 00 02         [24] 1650 	cjne	r0,#0x00,00214$
      001C2B 80 18            [24] 1651 	sjmp	00105$
      001C2D                       1652 00214$:
      001C2D B8 01 02         [24] 1653 	cjne	r0,#0x01,00215$
      001C30 80 03            [24] 1654 	sjmp	00216$
      001C32                       1655 00215$:
      001C32 02 1C F2         [24] 1656 	ljmp	00119$
      001C35                       1657 00216$:
                                   1658 ;	cc1111rf.c:249: len++;  // we need to send the length byte too...
      001C35 90 F6 D3         [24] 1659 	mov	dptr,#_transmit_PARM_2
      001C38 74 01            [12] 1660 	mov	a,#0x01
      001C3A 25 0B            [12] 1661 	add	a,_transmit_sloc0_1_0
      001C3C F0               [24] 1662 	movx	@dptr,a
      001C3D E4               [12] 1663 	clr	a
      001C3E 35 0C            [12] 1664 	addc	a,(_transmit_sloc0_1_0 + 1)
      001C40 A3               [24] 1665 	inc	dptr
      001C41 F0               [24] 1666 	movx	@dptr,a
                                   1667 ;	cc1111rf.c:250: break;
      001C42 02 1C F2         [24] 1668 	ljmp	00119$
                                   1669 ;	cc1111rf.c:251: case PKTCTRL0_LENGTH_CONFIG_FIX:
      001C45                       1670 00105$:
                                   1671 ;	cc1111rf.c:252: buf++;  // skip sending the length byte
      001C45 90 F6 D9         [24] 1672 	mov	dptr,#_transmit_buf_1_96
      001C48 74 01            [12] 1673 	mov	a,#0x01
      001C4A 2B               [12] 1674 	add	a,r3
      001C4B F0               [24] 1675 	movx	@dptr,a
      001C4C E4               [12] 1676 	clr	a
      001C4D 3C               [12] 1677 	addc	a,r4
      001C4E A3               [24] 1678 	inc	dptr
      001C4F F0               [24] 1679 	movx	@dptr,a
                                   1680 ;	cc1111rf.c:253: PKTLEN= len;
      001C50 90 F6 D3         [24] 1681 	mov	dptr,#_transmit_PARM_2
      001C53 E0               [24] 1682 	movx	a,@dptr
      001C54 FB               [12] 1683 	mov	r3,a
      001C55 A3               [24] 1684 	inc	dptr
      001C56 E0               [24] 1685 	movx	a,@dptr
      001C57 FC               [12] 1686 	mov	r4,a
      001C58 90 DF 02         [24] 1687 	mov	dptr,#_PKTLEN
      001C5B EB               [12] 1688 	mov	a,r3
      001C5C F0               [24] 1689 	movx	@dptr,a
                                   1690 ;	cc1111rf.c:254: break;
      001C5D 02 1C F2         [24] 1691 	ljmp	00119$
                                   1692 ;	cc1111rf.c:257: }
      001C60                       1693 00118$:
                                   1694 ;	cc1111rf.c:263: switch (PKTCTRL0 & PKTCTRL0_LENGTH_CONFIG)
      001C60 90 DF 04         [24] 1695 	mov	dptr,#_PKTCTRL0
      001C63 E0               [24] 1696 	movx	a,@dptr
      001C64 FC               [12] 1697 	mov	r4,a
      001C65 53 04 03         [24] 1698 	anl	ar4,#0x03
      001C68 BC 00 02         [24] 1699 	cjne	r4,#0x00,00217$
      001C6B 80 46            [24] 1700 	sjmp	00109$
      001C6D                       1701 00217$:
      001C6D BC 01 02         [24] 1702 	cjne	r4,#0x01,00218$
      001C70 80 03            [24] 1703 	sjmp	00219$
      001C72                       1704 00218$:
      001C72 02 1C F2         [24] 1705 	ljmp	00119$
      001C75                       1706 00219$:
                                   1707 ;	cc1111rf.c:267: byte_shuffle(buf, len, 1);
      001C75 90 F6 D9         [24] 1708 	mov	dptr,#_transmit_buf_1_96
      001C78 E0               [24] 1709 	movx	a,@dptr
      001C79 FB               [12] 1710 	mov	r3,a
      001C7A A3               [24] 1711 	inc	dptr
      001C7B E0               [24] 1712 	movx	a,@dptr
      001C7C FC               [12] 1713 	mov	r4,a
      001C7D 90 F6 DC         [24] 1714 	mov	dptr,#_byte_shuffle_PARM_2
      001C80 E9               [12] 1715 	mov	a,r1
      001C81 F0               [24] 1716 	movx	@dptr,a
      001C82 EA               [12] 1717 	mov	a,r2
      001C83 A3               [24] 1718 	inc	dptr
      001C84 F0               [24] 1719 	movx	@dptr,a
      001C85 90 F6 DE         [24] 1720 	mov	dptr,#_byte_shuffle_PARM_3
      001C88 74 01            [12] 1721 	mov	a,#0x01
      001C8A F0               [24] 1722 	movx	@dptr,a
      001C8B E4               [12] 1723 	clr	a
      001C8C A3               [24] 1724 	inc	dptr
      001C8D F0               [24] 1725 	movx	@dptr,a
      001C8E 8B 82            [24] 1726 	mov	dpl,r3
      001C90 8C 83            [24] 1727 	mov	dph,r4
      001C92 C0 07            [24] 1728 	push	ar7
      001C94 C0 02            [24] 1729 	push	ar2
      001C96 C0 01            [24] 1730 	push	ar1
      001C98 12 24 2F         [24] 1731 	lcall	_byte_shuffle
      001C9B D0 01            [24] 1732 	pop	ar1
      001C9D D0 02            [24] 1733 	pop	ar2
      001C9F D0 07            [24] 1734 	pop	ar7
                                   1735 ;	cc1111rf.c:268: buf[0] = (u8) len;
      001CA1 90 F6 D9         [24] 1736 	mov	dptr,#_transmit_buf_1_96
      001CA4 E0               [24] 1737 	movx	a,@dptr
      001CA5 FB               [12] 1738 	mov	r3,a
      001CA6 A3               [24] 1739 	inc	dptr
      001CA7 E0               [24] 1740 	movx	a,@dptr
      001CA8 FC               [12] 1741 	mov	r4,a
      001CA9 89 00            [24] 1742 	mov	ar0,r1
      001CAB 8B 82            [24] 1743 	mov	dpl,r3
      001CAD 8C 83            [24] 1744 	mov	dph,r4
      001CAF E8               [12] 1745 	mov	a,r0
      001CB0 F0               [24] 1746 	movx	@dptr,a
                                   1747 ;	cc1111rf.c:269: break;
                                   1748 ;	cc1111rf.c:270: case PKTCTRL0_LENGTH_CONFIG_FIX:
      001CB1 80 3F            [24] 1749 	sjmp	00119$
      001CB3                       1750 00109$:
                                   1751 ;	cc1111rf.c:274: if(repeat)
      001CB3 ED               [12] 1752 	mov	a,r5
      001CB4 4E               [12] 1753 	orl	a,r6
      001CB5 60 36            [24] 1754 	jz	00113$
                                   1755 ;	cc1111rf.c:278: PKTLEN = (u8) (rfTxTotalTXLen % 256);
      001CB7 90 F7 25         [24] 1756 	mov	dptr,#_rfTxTotalTXLen
      001CBA E0               [24] 1757 	movx	a,@dptr
      001CBB FD               [12] 1758 	mov	r5,a
      001CBC A3               [24] 1759 	inc	dptr
      001CBD E0               [24] 1760 	movx	a,@dptr
      001CBE 90 DF 02         [24] 1761 	mov	dptr,#_PKTLEN
      001CC1 ED               [12] 1762 	mov	a,r5
      001CC2 F0               [24] 1763 	movx	@dptr,a
                                   1764 ;	cc1111rf.c:279: PKTCTRL0 &= ~PKTCTRL0_LENGTH_CONFIG;
      001CC3 90 DF 04         [24] 1765 	mov	dptr,#_PKTCTRL0
      001CC6 E0               [24] 1766 	movx	a,@dptr
      001CC7 FE               [12] 1767 	mov	r6,a
      001CC8 74 FC            [12] 1768 	mov	a,#0xFC
      001CCA 5E               [12] 1769 	anl	a,r6
      001CCB F0               [24] 1770 	movx	@dptr,a
                                   1771 ;	cc1111rf.c:281: if(rfTxTotalTXLen > RF_MAX_TX_BLOCK)
      001CCC 90 F7 25         [24] 1772 	mov	dptr,#_rfTxTotalTXLen
      001CCF E0               [24] 1773 	movx	a,@dptr
      001CD0 FD               [12] 1774 	mov	r5,a
      001CD1 A3               [24] 1775 	inc	dptr
      001CD2 E0               [24] 1776 	movx	a,@dptr
      001CD3 FE               [12] 1777 	mov	r6,a
      001CD4 C3               [12] 1778 	clr	c
      001CD5 74 FF            [12] 1779 	mov	a,#0xFF
      001CD7 9D               [12] 1780 	subb	a,r5
      001CD8 E4               [12] 1781 	clr	a
      001CD9 9E               [12] 1782 	subb	a,r6
      001CDA 50 09            [24] 1783 	jnc	00111$
                                   1784 ;	cc1111rf.c:282: PKTCTRL0 |= PKTCTRL0_LENGTH_CONFIG_INF;
      001CDC 90 DF 04         [24] 1785 	mov	dptr,#_PKTCTRL0
      001CDF E0               [24] 1786 	movx	a,@dptr
      001CE0 FE               [12] 1787 	mov	r6,a
      001CE1 74 02            [12] 1788 	mov	a,#0x02
      001CE3 4E               [12] 1789 	orl	a,r6
      001CE4 F0               [24] 1790 	movx	@dptr,a
      001CE5                       1791 00111$:
                                   1792 ;	cc1111rf.c:284: rfTxInfMode = 1;
      001CE5 90 F7 27         [24] 1793 	mov	dptr,#_rfTxInfMode
      001CE8 74 01            [12] 1794 	mov	a,#0x01
      001CEA F0               [24] 1795 	movx	@dptr,a
      001CEB 80 05            [24] 1796 	sjmp	00119$
      001CED                       1797 00113$:
                                   1798 ;	cc1111rf.c:287: PKTLEN = len;
      001CED 90 DF 02         [24] 1799 	mov	dptr,#_PKTLEN
      001CF0 E9               [12] 1800 	mov	a,r1
      001CF1 F0               [24] 1801 	movx	@dptr,a
                                   1802 ;	cc1111rf.c:291: }
      001CF2                       1803 00119$:
                                   1804 ;	cc1111rf.c:296: RFTXRXIE = 1;
      001CF2 D2 A8            [12] 1805 	setb	_RFTXRXIE
                                   1806 ;	cc1111rf.c:302: if(rfAESMode & AES_CRYPTO_OUT_ENABLE)
      001CF4 90 F7 28         [24] 1807 	mov	dptr,#_rfAESMode
      001CF7 E0               [24] 1808 	movx	a,@dptr
      001CF8 FE               [12] 1809 	mov	r6,a
      001CF9 20 E3 03         [24] 1810 	jb	acc.3,00222$
      001CFC 02 1E 20         [24] 1811 	ljmp	00135$
      001CFF                       1812 00222$:
                                   1813 ;	cc1111rf.c:304: if((PKTCTRL0 & PKTCTRL0_LENGTH_CONFIG) == PKTCTRL0_LENGTH_CONFIG_VAR)
      001CFF 90 DF 04         [24] 1814 	mov	dptr,#_PKTCTRL0
      001D02 E0               [24] 1815 	movx	a,@dptr
      001D03 FE               [12] 1816 	mov	r6,a
      001D04 53 06 03         [24] 1817 	anl	ar6,#0x03
      001D07 BE 01 06         [24] 1818 	cjne	r6,#0x01,00121$
                                   1819 ;	cc1111rf.c:305: encoffset= 1;
      001D0A 90 F6 DB         [24] 1820 	mov	dptr,#_transmit_encoffset_1_97
      001D0D 74 01            [12] 1821 	mov	a,#0x01
      001D0F F0               [24] 1822 	movx	@dptr,a
      001D10                       1823 00121$:
                                   1824 ;	cc1111rf.c:307: len= padAES(buf + encoffset, len);
      001D10 90 F6 DB         [24] 1825 	mov	dptr,#_transmit_encoffset_1_97
      001D13 E0               [24] 1826 	movx	a,@dptr
      001D14 FE               [12] 1827 	mov	r6,a
      001D15 90 F6 D9         [24] 1828 	mov	dptr,#_transmit_buf_1_96
      001D18 E0               [24] 1829 	movx	a,@dptr
      001D19 FC               [12] 1830 	mov	r4,a
      001D1A A3               [24] 1831 	inc	dptr
      001D1B E0               [24] 1832 	movx	a,@dptr
      001D1C FD               [12] 1833 	mov	r5,a
      001D1D EE               [12] 1834 	mov	a,r6
      001D1E 2C               [12] 1835 	add	a,r4
      001D1F FA               [12] 1836 	mov	r2,a
      001D20 E4               [12] 1837 	clr	a
      001D21 3D               [12] 1838 	addc	a,r5
      001D22 FB               [12] 1839 	mov	r3,a
      001D23 90 F6 D3         [24] 1840 	mov	dptr,#_transmit_PARM_2
      001D26 E0               [24] 1841 	movx	a,@dptr
      001D27 F8               [12] 1842 	mov	r0,a
      001D28 A3               [24] 1843 	inc	dptr
      001D29 E0               [24] 1844 	movx	a,@dptr
      001D2A F9               [12] 1845 	mov	r1,a
      001D2B 90 F6 FA         [24] 1846 	mov	dptr,#_padAES_PARM_2
      001D2E E8               [12] 1847 	mov	a,r0
      001D2F F0               [24] 1848 	movx	@dptr,a
      001D30 E9               [12] 1849 	mov	a,r1
      001D31 A3               [24] 1850 	inc	dptr
      001D32 F0               [24] 1851 	movx	@dptr,a
      001D33 8A 82            [24] 1852 	mov	dpl,r2
      001D35 8B 83            [24] 1853 	mov	dph,r3
      001D37 C0 07            [24] 1854 	push	ar7
      001D39 C0 06            [24] 1855 	push	ar6
      001D3B C0 05            [24] 1856 	push	ar5
      001D3D C0 04            [24] 1857 	push	ar4
      001D3F 12 27 78         [24] 1858 	lcall	_padAES
      001D42 AA 82            [24] 1859 	mov	r2,dpl
      001D44 AB 83            [24] 1860 	mov	r3,dph
      001D46 D0 04            [24] 1861 	pop	ar4
      001D48 D0 05            [24] 1862 	pop	ar5
      001D4A D0 06            [24] 1863 	pop	ar6
      001D4C D0 07            [24] 1864 	pop	ar7
                                   1865 ;	cc1111rf.c:309: if((rfAESMode & AES_CRYPTO_OUT_TYPE) == AES_CRYPTO_OUT_ENCRYPT)
      001D4E 90 F7 28         [24] 1866 	mov	dptr,#_rfAESMode
      001D51 E0               [24] 1867 	movx	a,@dptr
      001D52 F9               [12] 1868 	mov	r1,a
      001D53 53 01 04         [24] 1869 	anl	ar1,#0x04
      001D56 B9 04 48         [24] 1870 	cjne	r1,#0x04,00123$
                                   1871 ;	cc1111rf.c:310: encAES(buf + encoffset, buf + encoffset, len, (rfAESMode & AES_CRYPTO_MODE));
      001D59 C0 07            [24] 1872 	push	ar7
      001D5B EE               [12] 1873 	mov	a,r6
      001D5C 2C               [12] 1874 	add	a,r4
      001D5D F8               [12] 1875 	mov	r0,a
      001D5E E4               [12] 1876 	clr	a
      001D5F 3D               [12] 1877 	addc	a,r5
      001D60 F9               [12] 1878 	mov	r1,a
      001D61 90 F7 28         [24] 1879 	mov	dptr,#_rfAESMode
      001D64 E0               [24] 1880 	movx	a,@dptr
      001D65 FF               [12] 1881 	mov	r7,a
      001D66 53 07 F0         [24] 1882 	anl	ar7,#0xF0
      001D69 90 F6 FE         [24] 1883 	mov	dptr,#_encAES_PARM_2
      001D6C E8               [12] 1884 	mov	a,r0
      001D6D F0               [24] 1885 	movx	@dptr,a
      001D6E E9               [12] 1886 	mov	a,r1
      001D6F A3               [24] 1887 	inc	dptr
      001D70 F0               [24] 1888 	movx	@dptr,a
      001D71 90 F7 00         [24] 1889 	mov	dptr,#_encAES_PARM_3
      001D74 EA               [12] 1890 	mov	a,r2
      001D75 F0               [24] 1891 	movx	@dptr,a
      001D76 EB               [12] 1892 	mov	a,r3
      001D77 A3               [24] 1893 	inc	dptr
      001D78 F0               [24] 1894 	movx	@dptr,a
      001D79 90 F7 02         [24] 1895 	mov	dptr,#_encAES_PARM_4
      001D7C EF               [12] 1896 	mov	a,r7
      001D7D F0               [24] 1897 	movx	@dptr,a
      001D7E 88 82            [24] 1898 	mov	dpl,r0
      001D80 89 83            [24] 1899 	mov	dph,r1
      001D82 C0 07            [24] 1900 	push	ar7
      001D84 C0 06            [24] 1901 	push	ar6
      001D86 C0 05            [24] 1902 	push	ar5
      001D88 C0 04            [24] 1903 	push	ar4
      001D8A C0 03            [24] 1904 	push	ar3
      001D8C C0 02            [24] 1905 	push	ar2
      001D8E 12 27 B2         [24] 1906 	lcall	_encAES
      001D91 D0 02            [24] 1907 	pop	ar2
      001D93 D0 03            [24] 1908 	pop	ar3
      001D95 D0 04            [24] 1909 	pop	ar4
      001D97 D0 05            [24] 1910 	pop	ar5
      001D99 D0 06            [24] 1911 	pop	ar6
      001D9B D0 07            [24] 1912 	pop	ar7
      001D9D D0 07            [24] 1913 	pop	ar7
      001D9F 80 46            [24] 1914 	sjmp	00124$
      001DA1                       1915 00123$:
                                   1916 ;	cc1111rf.c:312: decAES(buf + encoffset, buf + encoffset, len, (rfAESMode & AES_CRYPTO_MODE));
      001DA1 C0 07            [24] 1917 	push	ar7
      001DA3 EE               [12] 1918 	mov	a,r6
      001DA4 2C               [12] 1919 	add	a,r4
      001DA5 F8               [12] 1920 	mov	r0,a
      001DA6 E4               [12] 1921 	clr	a
      001DA7 3D               [12] 1922 	addc	a,r5
      001DA8 F9               [12] 1923 	mov	r1,a
      001DA9 90 F7 28         [24] 1924 	mov	dptr,#_rfAESMode
      001DAC E0               [24] 1925 	movx	a,@dptr
      001DAD FF               [12] 1926 	mov	r7,a
      001DAE 53 07 F0         [24] 1927 	anl	ar7,#0xF0
      001DB1 90 F7 05         [24] 1928 	mov	dptr,#_decAES_PARM_2
      001DB4 E8               [12] 1929 	mov	a,r0
      001DB5 F0               [24] 1930 	movx	@dptr,a
      001DB6 E9               [12] 1931 	mov	a,r1
      001DB7 A3               [24] 1932 	inc	dptr
      001DB8 F0               [24] 1933 	movx	@dptr,a
      001DB9 90 F7 07         [24] 1934 	mov	dptr,#_decAES_PARM_3
      001DBC EA               [12] 1935 	mov	a,r2
      001DBD F0               [24] 1936 	movx	@dptr,a
      001DBE EB               [12] 1937 	mov	a,r3
      001DBF A3               [24] 1938 	inc	dptr
      001DC0 F0               [24] 1939 	movx	@dptr,a
      001DC1 90 F7 09         [24] 1940 	mov	dptr,#_decAES_PARM_4
      001DC4 EF               [12] 1941 	mov	a,r7
      001DC5 F0               [24] 1942 	movx	@dptr,a
      001DC6 88 82            [24] 1943 	mov	dpl,r0
      001DC8 89 83            [24] 1944 	mov	dph,r1
      001DCA C0 07            [24] 1945 	push	ar7
      001DCC C0 06            [24] 1946 	push	ar6
      001DCE C0 05            [24] 1947 	push	ar5
      001DD0 C0 04            [24] 1948 	push	ar4
      001DD2 C0 03            [24] 1949 	push	ar3
      001DD4 C0 02            [24] 1950 	push	ar2
      001DD6 12 27 FB         [24] 1951 	lcall	_decAES
      001DD9 D0 02            [24] 1952 	pop	ar2
      001DDB D0 03            [24] 1953 	pop	ar3
      001DDD D0 04            [24] 1954 	pop	ar4
      001DDF D0 05            [24] 1955 	pop	ar5
      001DE1 D0 06            [24] 1956 	pop	ar6
      001DE3 D0 07            [24] 1957 	pop	ar7
                                   1958 ;	cc1111rf.c:426: return 1;
      001DE5 D0 07            [24] 1959 	pop	ar7
                                   1960 ;	cc1111rf.c:312: decAES(buf + encoffset, buf + encoffset, len, (rfAESMode & AES_CRYPTO_MODE));
      001DE7                       1961 00124$:
                                   1962 ;	cc1111rf.c:314: if(encoffset)
      001DE7 EE               [12] 1963 	mov	a,r6
      001DE8 60 1E            [24] 1964 	jz	00132$
                                   1965 ;	cc1111rf.c:318: if((rfAESMode & AES_CRYPTO_MODE) == ENCCS_MODE_CBCMAC)
      001DEA 90 F7 28         [24] 1966 	mov	dptr,#_rfAESMode
      001DED E0               [24] 1967 	movx	a,@dptr
      001DEE FE               [12] 1968 	mov	r6,a
      001DEF 53 06 F0         [24] 1969 	anl	ar6,#0xF0
      001DF2 BE 50 09         [24] 1970 	cjne	r6,#0x50,00126$
                                   1971 ;	cc1111rf.c:319: buf[0] = 16;
      001DF5 8C 82            [24] 1972 	mov	dpl,r4
      001DF7 8D 83            [24] 1973 	mov	dph,r5
      001DF9 74 10            [12] 1974 	mov	a,#0x10
      001DFB F0               [24] 1975 	movx	@dptr,a
      001DFC 80 22            [24] 1976 	sjmp	00135$
      001DFE                       1977 00126$:
                                   1978 ;	cc1111rf.c:321: buf[0] = (u8) len;
      001DFE 8A 06            [24] 1979 	mov	ar6,r2
      001E00 8C 82            [24] 1980 	mov	dpl,r4
      001E02 8D 83            [24] 1981 	mov	dph,r5
      001E04 EE               [12] 1982 	mov	a,r6
      001E05 F0               [24] 1983 	movx	@dptr,a
      001E06 80 18            [24] 1984 	sjmp	00135$
      001E08                       1985 00132$:
                                   1986 ;	cc1111rf.c:325: if((rfAESMode & AES_CRYPTO_MODE) == ENCCS_MODE_CBCMAC)
      001E08 90 F7 28         [24] 1987 	mov	dptr,#_rfAESMode
      001E0B E0               [24] 1988 	movx	a,@dptr
      001E0C FE               [12] 1989 	mov	r6,a
      001E0D 53 06 F0         [24] 1990 	anl	ar6,#0xF0
      001E10 BE 50 08         [24] 1991 	cjne	r6,#0x50,00129$
                                   1992 ;	cc1111rf.c:326: PKTLEN = 16;
      001E13 90 DF 02         [24] 1993 	mov	dptr,#_PKTLEN
      001E16 74 10            [12] 1994 	mov	a,#0x10
      001E18 F0               [24] 1995 	movx	@dptr,a
      001E19 80 05            [24] 1996 	sjmp	00135$
      001E1B                       1997 00129$:
                                   1998 ;	cc1111rf.c:328: PKTLEN = (u8) len;
      001E1B 90 DF 02         [24] 1999 	mov	dptr,#_PKTLEN
      001E1E EA               [12] 2000 	mov	a,r2
      001E1F F0               [24] 2001 	movx	@dptr,a
      001E20                       2002 00135$:
                                   2003 ;	cc1111rf.c:333: rftxbuf = buf;
      001E20 90 F6 D9         [24] 2004 	mov	dptr,#_transmit_buf_1_96
      001E23 E0               [24] 2005 	movx	a,@dptr
      001E24 FD               [12] 2006 	mov	r5,a
      001E25 A3               [24] 2007 	inc	dptr
      001E26 E0               [24] 2008 	movx	a,@dptr
      001E27 FE               [12] 2009 	mov	r6,a
      001E28 90 F6 B5         [24] 2010 	mov	dptr,#_rftxbuf
      001E2B ED               [12] 2011 	mov	a,r5
      001E2C F0               [24] 2012 	movx	@dptr,a
      001E2D EE               [12] 2013 	mov	a,r6
      001E2E A3               [24] 2014 	inc	dptr
      001E2F F0               [24] 2015 	movx	@dptr,a
                                   2016 ;	cc1111rf.c:336: rfTxCounter = 0;
      001E30 90 F7 1B         [24] 2017 	mov	dptr,#_rfTxCounter
      001E33 E4               [12] 2018 	clr	a
      001E34 F0               [24] 2019 	movx	@dptr,a
      001E35 A3               [24] 2020 	inc	dptr
      001E36 F0               [24] 2021 	movx	@dptr,a
                                   2022 ;	cc1111rf.c:393: RFST = RFST_STX;
      001E37 75 E1 03         [24] 2023 	mov	_RFST,#0x03
                                   2024 ;	cc1111rf.c:397: while (MARCSTATE != MARC_STATE_TX && --countdown)
      001E3A 7D 60            [12] 2025 	mov	r5,#0x60
      001E3C 7E EA            [12] 2026 	mov	r6,#0xEA
      001E3E                       2027 00137$:
      001E3E 90 DF 3B         [24] 2028 	mov	dptr,#_MARCSTATE
      001E41 E0               [24] 2029 	movx	a,@dptr
      001E42 FC               [12] 2030 	mov	r4,a
      001E43 BC 13 02         [24] 2031 	cjne	r4,#0x13,00232$
      001E46 80 1C            [24] 2032 	sjmp	00139$
      001E48                       2033 00232$:
      001E48 1D               [12] 2034 	dec	r5
      001E49 BD FF 01         [24] 2035 	cjne	r5,#0xFF,00233$
      001E4C 1E               [12] 2036 	dec	r6
      001E4D                       2037 00233$:
      001E4D ED               [12] 2038 	mov	a,r5
      001E4E 4E               [12] 2039 	orl	a,r6
      001E4F 60 13            [24] 2040 	jz	00139$
                                   2041 ;	cc1111rf.c:400: LED = !LED;
      001E51 B2 91            [12] 2042 	cpl	_P1_1
                                   2043 ;	cc1111rf.c:402: usbProcessEvents(); 
      001E53 C0 07            [24] 2044 	push	ar7
      001E55 C0 06            [24] 2045 	push	ar6
      001E57 C0 05            [24] 2046 	push	ar5
      001E59 12 16 18         [24] 2047 	lcall	_usbProcessEvents
      001E5C D0 05            [24] 2048 	pop	ar5
      001E5E D0 06            [24] 2049 	pop	ar6
      001E60 D0 07            [24] 2050 	pop	ar7
      001E62 80 DA            [24] 2051 	sjmp	00137$
      001E64                       2052 00139$:
                                   2053 ;	cc1111rf.c:406: LED = 1;
      001E64 D2 91            [12] 2054 	setb	_P1_1
                                   2055 ;	cc1111rf.c:407: if (!countdown)
      001E66 ED               [12] 2056 	mov	a,r5
      001E67 4E               [12] 2057 	orl	a,r6
      001E68 70 06            [24] 2058 	jnz	00142$
                                   2059 ;	cc1111rf.c:409: lastCode[1] = LCE_RFTX_NEVER_TX;
      001E6A 90 F6 E3         [24] 2060 	mov	dptr,#(_lastCode + 0x0001)
      001E6D 74 13            [12] 2061 	mov	a,#0x13
      001E6F F0               [24] 2062 	movx	@dptr,a
                                   2063 ;	cc1111rf.c:412: while (MARCSTATE == MARC_STATE_TX)
      001E70                       2064 00142$:
      001E70 90 DF 3B         [24] 2065 	mov	dptr,#_MARCSTATE
      001E73 E0               [24] 2066 	movx	a,@dptr
      001E74 FE               [12] 2067 	mov	r6,a
      001E75 BE 13 0B         [24] 2068 	cjne	r6,#0x13,00144$
                                   2069 ;	cc1111rf.c:414: LED = !LED;
      001E78 B2 91            [12] 2070 	cpl	_P1_1
                                   2071 ;	cc1111rf.c:416: usbProcessEvents();
      001E7A C0 07            [24] 2072 	push	ar7
      001E7C 12 16 18         [24] 2073 	lcall	_usbProcessEvents
      001E7F D0 07            [24] 2074 	pop	ar7
      001E81 80 ED            [24] 2075 	sjmp	00142$
      001E83                       2076 00144$:
                                   2077 ;	cc1111rf.c:421: LED = 0;
      001E83 C2 91            [12] 2078 	clr	_P1_1
                                   2079 ;	cc1111rf.c:424: PKTLEN = original_pktlen;
      001E85 90 DF 02         [24] 2080 	mov	dptr,#_PKTLEN
      001E88 EF               [12] 2081 	mov	a,r7
      001E89 F0               [24] 2082 	movx	@dptr,a
                                   2083 ;	cc1111rf.c:426: return 1;
      001E8A 75 82 01         [24] 2084 	mov	dpl,#0x01
      001E8D 22               [24] 2085 	ret
                                   2086 ;------------------------------------------------------------
                                   2087 ;Allocation info for local variables in function 'startRX'
                                   2088 ;------------------------------------------------------------
                                   2089 ;	cc1111rf.c:433: void startRX(void)
                                   2090 ;	-----------------------------------------
                                   2091 ;	 function startRX
                                   2092 ;	-----------------------------------------
      001E8E                       2093 _startRX:
                                   2094 ;	cc1111rf.c:439: RFTXRXIE = 1;
      001E8E D2 A8            [12] 2095 	setb	_RFTXRXIE
                                   2096 ;	cc1111rf.c:443: memset(rfrxbuf,0,BUFFER_SIZE);
      001E90 75 0F 00         [24] 2097 	mov	_memset_PARM_2,#0x00
      001E93 75 10 00         [24] 2098 	mov	_memset_PARM_3,#0x00
      001E96 75 11 02         [24] 2099 	mov	(_memset_PARM_3 + 1),#0x02
      001E99 90 F2 AF         [24] 2100 	mov	dptr,#_rfrxbuf
      001E9C 75 F0 00         [24] 2101 	mov	b,#0x00
      001E9F 12 2A 3B         [24] 2102 	lcall	_memset
                                   2103 ;	cc1111rf.c:446: rfRxCounter[FIRST_BUFFER] = 0;
      001EA2 90 F6 AF         [24] 2104 	mov	dptr,#_rfRxCounter
      001EA5 E4               [12] 2105 	clr	a
      001EA6 F0               [24] 2106 	movx	@dptr,a
      001EA7 A3               [24] 2107 	inc	dptr
      001EA8 F0               [24] 2108 	movx	@dptr,a
                                   2109 ;	cc1111rf.c:447: rfRxCounter[SECOND_BUFFER] = 0;
      001EA9 90 F6 B1         [24] 2110 	mov	dptr,#(_rfRxCounter + 0x0002)
      001EAC F0               [24] 2111 	movx	@dptr,a
      001EAD A3               [24] 2112 	inc	dptr
      001EAE F0               [24] 2113 	movx	@dptr,a
                                   2114 ;	cc1111rf.c:453: rfRxProcessed[FIRST_BUFFER] = RX_UNPROCESSED;
      001EAF 90 F6 B3         [24] 2115 	mov	dptr,#_rfRxProcessed
      001EB2 F0               [24] 2116 	movx	@dptr,a
                                   2117 ;	cc1111rf.c:454: rfRxProcessed[SECOND_BUFFER] = RX_PROCESSED;
      001EB3 90 F6 B4         [24] 2118 	mov	dptr,#(_rfRxProcessed + 0x0001)
      001EB6 04               [12] 2119 	inc	a
      001EB7 F0               [24] 2120 	movx	@dptr,a
                                   2121 ;	cc1111rf.c:457: rfRxCurrentBuffer = 0;
      001EB8 90 F2 AE         [24] 2122 	mov	dptr,#_rfRxCurrentBuffer
      001EBB E4               [12] 2123 	clr	a
      001EBC F0               [24] 2124 	movx	@dptr,a
                                   2125 ;	cc1111rf.c:459: S1CON &= ~(S1CON_RFIF_0|S1CON_RFIF_1);
      001EBD AF 9B            [24] 2126 	mov	r7,_S1CON
      001EBF 74 FC            [12] 2127 	mov	a,#0xFC
      001EC1 5F               [12] 2128 	anl	a,r7
      001EC2 F5 9B            [12] 2129 	mov	_S1CON,a
                                   2130 ;	cc1111rf.c:460: RFIF &= ~RFIF_IRQ_DONE;
      001EC4 AF E9            [24] 2131 	mov	r7,_RFIF
      001EC6 74 EF            [12] 2132 	mov	a,#0xEF
      001EC8 5F               [12] 2133 	anl	a,r7
      001EC9 F5 E9            [12] 2134 	mov	_RFIF,a
                                   2135 ;	cc1111rf.c:493: RFRX;
      001ECB 75 E1 02         [24] 2136 	mov	_RFST,#0x02
      001ECE                       2137 00101$:
      001ECE 90 DF 3B         [24] 2138 	mov	dptr,#_MARCSTATE
      001ED1 E0               [24] 2139 	movx	a,@dptr
      001ED2 FF               [12] 2140 	mov	r7,a
      001ED3 BF 0D F8         [24] 2141 	cjne	r7,#0x0D,00101$
                                   2142 ;	cc1111rf.c:495: RFIM |= RFIF_IRQ_DONE;
      001ED6 43 91 10         [24] 2143 	orl	_RFIM,#0x10
      001ED9 22               [24] 2144 	ret
                                   2145 ;------------------------------------------------------------
                                   2146 ;Allocation info for local variables in function 'RepeaterStart'
                                   2147 ;------------------------------------------------------------
                                   2148 ;	cc1111rf.c:506: void RepeaterStart()
                                   2149 ;	-----------------------------------------
                                   2150 ;	 function RepeaterStart
                                   2151 ;	-----------------------------------------
      001EDA                       2152 _RepeaterStart:
                                   2153 ;	cc1111rf.c:508: bRepeatMode = 1;
      001EDA 90 F7 2A         [24] 2154 	mov	dptr,#_bRepeatMode
      001EDD 74 01            [12] 2155 	mov	a,#0x01
      001EDF F0               [24] 2156 	movx	@dptr,a
      001EE0 22               [24] 2157 	ret
                                   2158 ;------------------------------------------------------------
                                   2159 ;Allocation info for local variables in function 'RepeaterStop'
                                   2160 ;------------------------------------------------------------
                                   2161 ;	cc1111rf.c:511: void RepeaterStop()
                                   2162 ;	-----------------------------------------
                                   2163 ;	 function RepeaterStop
                                   2164 ;	-----------------------------------------
      001EE1                       2165 _RepeaterStop:
                                   2166 ;	cc1111rf.c:513: bRepeatMode = 0;
      001EE1 90 F7 2A         [24] 2167 	mov	dptr,#_bRepeatMode
      001EE4 E4               [12] 2168 	clr	a
      001EE5 F0               [24] 2169 	movx	@dptr,a
      001EE6 22               [24] 2170 	ret
                                   2171 ;------------------------------------------------------------
                                   2172 ;Allocation info for local variables in function 'rfTxRxIntHandler'
                                   2173 ;------------------------------------------------------------
                                   2174 ;	cc1111rf.c:525: void rfTxRxIntHandler(void) __interrupt RFTXRX_VECTOR  // interrupt handler should transmit or receive the next byte
                                   2175 ;	-----------------------------------------
                                   2176 ;	 function rfTxRxIntHandler
                                   2177 ;	-----------------------------------------
      001EE7                       2178 _rfTxRxIntHandler:
      001EE7 C0 20            [24] 2179 	push	bits
      001EE9 C0 E0            [24] 2180 	push	acc
      001EEB C0 F0            [24] 2181 	push	b
      001EED C0 82            [24] 2182 	push	dpl
      001EEF C0 83            [24] 2183 	push	dph
      001EF1 C0 07            [24] 2184 	push	(0+7)
      001EF3 C0 06            [24] 2185 	push	(0+6)
      001EF5 C0 05            [24] 2186 	push	(0+5)
      001EF7 C0 04            [24] 2187 	push	(0+4)
      001EF9 C0 03            [24] 2188 	push	(0+3)
      001EFB C0 02            [24] 2189 	push	(0+2)
      001EFD C0 01            [24] 2190 	push	(0+1)
      001EFF C0 00            [24] 2191 	push	(0+0)
      001F01 C0 D0            [24] 2192 	push	psw
      001F03 75 D0 00         [24] 2193 	mov	psw,#0x00
                                   2194 ;	cc1111rf.c:527: lastCode[0] = LC_RFTXRX_VECTOR;
      001F06 90 F6 E2         [24] 2195 	mov	dptr,#_lastCode
      001F09 74 11            [12] 2196 	mov	a,#0x11
      001F0B F0               [24] 2197 	movx	@dptr,a
                                   2198 ;	cc1111rf.c:531: RFTXRXIF = 0;
      001F0C C2 89            [12] 2199 	clr	_RFTXRXIF
                                   2200 ;	cc1111rf.c:533: if(MARCSTATE == MARC_STATE_RX)
      001F0E 90 DF 3B         [24] 2201 	mov	dptr,#_MARCSTATE
      001F11 E0               [24] 2202 	movx	a,@dptr
      001F12 FF               [12] 2203 	mov	r7,a
      001F13 BF 0D 02         [24] 2204 	cjne	r7,#0x0D,00176$
      001F16 80 03            [24] 2205 	sjmp	00177$
      001F18                       2206 00176$:
      001F18 02 20 2A         [24] 2207 	ljmp	00130$
      001F1B                       2208 00177$:
                                   2209 ;	cc1111rf.c:536: LED = 1;
      001F1B D2 91            [12] 2210 	setb	_P1_1
                                   2211 ;	cc1111rf.c:538: if(rfRxInfMode)
      001F1D 90 F7 14         [24] 2212 	mov	dptr,#_rfRxInfMode
      001F20 E0               [24] 2213 	movx	a,@dptr
      001F21 FF               [12] 2214 	mov	r7,a
      001F22 60 2A            [24] 2215 	jz	00104$
                                   2216 ;	cc1111rf.c:539: if(rfRxTotalRXLen-- < 256)
      001F24 90 F7 15         [24] 2217 	mov	dptr,#_rfRxTotalRXLen
      001F27 E0               [24] 2218 	movx	a,@dptr
      001F28 FE               [12] 2219 	mov	r6,a
      001F29 A3               [24] 2220 	inc	dptr
      001F2A E0               [24] 2221 	movx	a,@dptr
      001F2B FF               [12] 2222 	mov	r7,a
      001F2C 90 F7 15         [24] 2223 	mov	dptr,#_rfRxTotalRXLen
      001F2F E0               [24] 2224 	movx	a,@dptr
      001F30 24 FF            [12] 2225 	add	a,#0xFF
      001F32 FC               [12] 2226 	mov	r4,a
      001F33 A3               [24] 2227 	inc	dptr
      001F34 E0               [24] 2228 	movx	a,@dptr
      001F35 34 FF            [12] 2229 	addc	a,#0xFF
      001F37 FD               [12] 2230 	mov	r5,a
      001F38 90 F7 15         [24] 2231 	mov	dptr,#_rfRxTotalRXLen
      001F3B EC               [12] 2232 	mov	a,r4
      001F3C F0               [24] 2233 	movx	@dptr,a
      001F3D ED               [12] 2234 	mov	a,r5
      001F3E A3               [24] 2235 	inc	dptr
      001F3F F0               [24] 2236 	movx	@dptr,a
      001F40 74 FF            [12] 2237 	mov	a,#0x100 - 0x01
      001F42 2F               [12] 2238 	add	a,r7
      001F43 40 09            [24] 2239 	jc	00104$
                                   2240 ;	cc1111rf.c:540: PKTCTRL0 &= ~PKTCTRL0_LENGTH_CONFIG;
      001F45 90 DF 04         [24] 2241 	mov	dptr,#_PKTCTRL0
      001F48 E0               [24] 2242 	movx	a,@dptr
      001F49 FF               [12] 2243 	mov	r7,a
      001F4A 74 FC            [12] 2244 	mov	a,#0xFC
      001F4C 5F               [12] 2245 	anl	a,r7
      001F4D F0               [24] 2246 	movx	@dptr,a
      001F4E                       2247 00104$:
                                   2248 ;	cc1111rf.c:541: rf_status = RFST_SRX;
      001F4E 90 F6 B9         [24] 2249 	mov	dptr,#_rf_status
      001F51 74 02            [12] 2250 	mov	a,#0x02
      001F53 F0               [24] 2251 	movx	@dptr,a
                                   2252 ;	cc1111rf.c:542: rfrxbuf[rfRxCurrentBuffer][rfRxCounter[rfRxCurrentBuffer]++] = RFD;
      001F54 90 F2 AE         [24] 2253 	mov	dptr,#_rfRxCurrentBuffer
      001F57 E0               [24] 2254 	movx	a,@dptr
      001F58 25 E0            [12] 2255 	add	a,acc
      001F5A FE               [12] 2256 	mov	r6,a
      001F5B E4               [12] 2257 	clr	a
      001F5C 24 AF            [12] 2258 	add	a,#_rfrxbuf
      001F5E FF               [12] 2259 	mov	r7,a
      001F5F EE               [12] 2260 	mov	a,r6
      001F60 34 F2            [12] 2261 	addc	a,#(_rfrxbuf >> 8)
      001F62 FE               [12] 2262 	mov	r6,a
      001F63 E0               [24] 2263 	movx	a,@dptr
      001F64 75 F0 02         [24] 2264 	mov	b,#0x02
      001F67 A4               [48] 2265 	mul	ab
      001F68 24 AF            [12] 2266 	add	a,#_rfRxCounter
      001F6A FC               [12] 2267 	mov	r4,a
      001F6B 74 F6            [12] 2268 	mov	a,#(_rfRxCounter >> 8)
      001F6D 35 F0            [12] 2269 	addc	a,b
      001F6F FD               [12] 2270 	mov	r5,a
      001F70 8C 82            [24] 2271 	mov	dpl,r4
      001F72 8D 83            [24] 2272 	mov	dph,r5
      001F74 E0               [24] 2273 	movx	a,@dptr
      001F75 FA               [12] 2274 	mov	r2,a
      001F76 A3               [24] 2275 	inc	dptr
      001F77 E0               [24] 2276 	movx	a,@dptr
      001F78 FB               [12] 2277 	mov	r3,a
      001F79 74 01            [12] 2278 	mov	a,#0x01
      001F7B 2A               [12] 2279 	add	a,r2
      001F7C F8               [12] 2280 	mov	r0,a
      001F7D E4               [12] 2281 	clr	a
      001F7E 3B               [12] 2282 	addc	a,r3
      001F7F F9               [12] 2283 	mov	r1,a
      001F80 8C 82            [24] 2284 	mov	dpl,r4
      001F82 8D 83            [24] 2285 	mov	dph,r5
      001F84 E8               [12] 2286 	mov	a,r0
      001F85 F0               [24] 2287 	movx	@dptr,a
      001F86 E9               [12] 2288 	mov	a,r1
      001F87 A3               [24] 2289 	inc	dptr
      001F88 F0               [24] 2290 	movx	@dptr,a
      001F89 EA               [12] 2291 	mov	a,r2
      001F8A 2F               [12] 2292 	add	a,r7
      001F8B F5 82            [12] 2293 	mov	dpl,a
      001F8D EB               [12] 2294 	mov	a,r3
      001F8E 3E               [12] 2295 	addc	a,r6
      001F8F F5 83            [12] 2296 	mov	dph,a
      001F91 E5 D9            [12] 2297 	mov	a,_RFD
      001F93 F0               [24] 2298 	movx	@dptr,a
                                   2299 ;	cc1111rf.c:543: if(rfRxCounter[rfRxCurrentBuffer] >= BUFFER_SIZE || rfRxCounter[rfRxCurrentBuffer] == 0)
      001F94 90 F2 AE         [24] 2300 	mov	dptr,#_rfRxCurrentBuffer
      001F97 E0               [24] 2301 	movx	a,@dptr
      001F98 75 F0 02         [24] 2302 	mov	b,#0x02
      001F9B A4               [48] 2303 	mul	ab
      001F9C 24 AF            [12] 2304 	add	a,#_rfRxCounter
      001F9E F5 82            [12] 2305 	mov	dpl,a
      001FA0 74 F6            [12] 2306 	mov	a,#(_rfRxCounter >> 8)
      001FA2 35 F0            [12] 2307 	addc	a,b
      001FA4 F5 83            [12] 2308 	mov	dph,a
      001FA6 E0               [24] 2309 	movx	a,@dptr
      001FA7 FE               [12] 2310 	mov	r6,a
      001FA8 A3               [24] 2311 	inc	dptr
      001FA9 E0               [24] 2312 	movx	a,@dptr
      001FAA FF               [12] 2313 	mov	r7,a
      001FAB C3               [12] 2314 	clr	c
      001FAC 94 02            [12] 2315 	subb	a,#0x02
      001FAE 50 1A            [24] 2316 	jnc	00105$
      001FB0 90 F2 AE         [24] 2317 	mov	dptr,#_rfRxCurrentBuffer
      001FB3 E0               [24] 2318 	movx	a,@dptr
      001FB4 75 F0 02         [24] 2319 	mov	b,#0x02
      001FB7 A4               [48] 2320 	mul	ab
      001FB8 24 AF            [12] 2321 	add	a,#_rfRxCounter
      001FBA F5 82            [12] 2322 	mov	dpl,a
      001FBC 74 F6            [12] 2323 	mov	a,#(_rfRxCounter >> 8)
      001FBE 35 F0            [12] 2324 	addc	a,b
      001FC0 F5 83            [12] 2325 	mov	dph,a
      001FC2 E0               [24] 2326 	movx	a,@dptr
      001FC3 FE               [12] 2327 	mov	r6,a
      001FC4 A3               [24] 2328 	inc	dptr
      001FC5 E0               [24] 2329 	movx	a,@dptr
      001FC6 FF               [12] 2330 	mov	r7,a
      001FC7 4E               [12] 2331 	orl	a,r6
      001FC8 70 1A            [24] 2332 	jnz	00106$
      001FCA                       2333 00105$:
                                   2334 ;	cc1111rf.c:545: rfRxCounter[rfRxCurrentBuffer] = BUFFER_SIZE-1;
      001FCA 90 F2 AE         [24] 2335 	mov	dptr,#_rfRxCurrentBuffer
      001FCD E0               [24] 2336 	movx	a,@dptr
      001FCE FF               [12] 2337 	mov	r7,a
      001FCF 75 F0 02         [24] 2338 	mov	b,#0x02
      001FD2 A4               [48] 2339 	mul	ab
      001FD3 24 AF            [12] 2340 	add	a,#_rfRxCounter
      001FD5 F5 82            [12] 2341 	mov	dpl,a
      001FD7 74 F6            [12] 2342 	mov	a,#(_rfRxCounter >> 8)
      001FD9 35 F0            [12] 2343 	addc	a,b
      001FDB F5 83            [12] 2344 	mov	dph,a
      001FDD 74 FF            [12] 2345 	mov	a,#0xFF
      001FDF F0               [24] 2346 	movx	@dptr,a
      001FE0 74 01            [12] 2347 	mov	a,#0x01
      001FE2 A3               [24] 2348 	inc	dptr
      001FE3 F0               [24] 2349 	movx	@dptr,a
      001FE4                       2350 00106$:
                                   2351 ;	cc1111rf.c:548: if(!rfRxTotalRXLen && rfRxInfMode)
      001FE4 90 F7 15         [24] 2352 	mov	dptr,#_rfRxTotalRXLen
      001FE7 E0               [24] 2353 	movx	a,@dptr
      001FE8 FE               [12] 2354 	mov	r6,a
      001FE9 A3               [24] 2355 	inc	dptr
      001FEA E0               [24] 2356 	movx	a,@dptr
      001FEB FF               [12] 2357 	mov	r7,a
      001FEC 4E               [12] 2358 	orl	a,r6
      001FED 60 03            [24] 2359 	jz	00182$
      001FEF 02 21 E0         [24] 2360 	ljmp	00132$
      001FF2                       2361 00182$:
      001FF2 90 F7 14         [24] 2362 	mov	dptr,#_rfRxInfMode
      001FF5 E0               [24] 2363 	movx	a,@dptr
      001FF6 FF               [12] 2364 	mov	r7,a
      001FF7 70 03            [24] 2365 	jnz	00183$
      001FF9 02 21 E0         [24] 2366 	ljmp	00132$
      001FFC                       2367 00183$:
                                   2368 ;	cc1111rf.c:550: rfRxTotalRXLen = rfRxLargeLen;
      001FFC 90 F7 17         [24] 2369 	mov	dptr,#_rfRxLargeLen
      001FFF E0               [24] 2370 	movx	a,@dptr
      002000 FE               [12] 2371 	mov	r6,a
      002001 A3               [24] 2372 	inc	dptr
      002002 E0               [24] 2373 	movx	a,@dptr
      002003 FF               [12] 2374 	mov	r7,a
      002004 90 F7 15         [24] 2375 	mov	dptr,#_rfRxTotalRXLen
      002007 EE               [12] 2376 	mov	a,r6
      002008 F0               [24] 2377 	movx	@dptr,a
      002009 EF               [12] 2378 	mov	a,r7
      00200A A3               [24] 2379 	inc	dptr
      00200B F0               [24] 2380 	movx	@dptr,a
                                   2381 ;	cc1111rf.c:551: PKTLEN = (u8) (rfRxTotalRXLen % 256);
      00200C 90 F7 15         [24] 2382 	mov	dptr,#_rfRxTotalRXLen
      00200F E0               [24] 2383 	movx	a,@dptr
      002010 FE               [12] 2384 	mov	r6,a
      002011 A3               [24] 2385 	inc	dptr
      002012 E0               [24] 2386 	movx	a,@dptr
      002013 90 DF 02         [24] 2387 	mov	dptr,#_PKTLEN
      002016 EE               [12] 2388 	mov	a,r6
      002017 F0               [24] 2389 	movx	@dptr,a
                                   2390 ;	cc1111rf.c:552: PKTCTRL0 &= ~PKTCTRL0_LENGTH_CONFIG;
      002018 90 DF 04         [24] 2391 	mov	dptr,#_PKTCTRL0
      00201B E0               [24] 2392 	movx	a,@dptr
      00201C FF               [12] 2393 	mov	r7,a
      00201D 74 FC            [12] 2394 	mov	a,#0xFC
      00201F 5F               [12] 2395 	anl	a,r7
      002020 F0               [24] 2396 	movx	@dptr,a
                                   2397 ;	cc1111rf.c:553: PKTCTRL0 |= PKTCTRL0_LENGTH_CONFIG_INF;
      002021 E0               [24] 2398 	movx	a,@dptr
      002022 FF               [12] 2399 	mov	r7,a
      002023 74 02            [12] 2400 	mov	a,#0x02
      002025 4F               [12] 2401 	orl	a,r7
      002026 F0               [24] 2402 	movx	@dptr,a
      002027 02 21 E0         [24] 2403 	ljmp	00132$
      00202A                       2404 00130$:
                                   2405 ;	cc1111rf.c:557: else if(MARCSTATE == MARC_STATE_TX)
      00202A 90 DF 3B         [24] 2406 	mov	dptr,#_MARCSTATE
      00202D E0               [24] 2407 	movx	a,@dptr
      00202E FF               [12] 2408 	mov	r7,a
      00202F BF 13 02         [24] 2409 	cjne	r7,#0x13,00184$
      002032 80 03            [24] 2410 	sjmp	00185$
      002034                       2411 00184$:
      002034 02 21 E0         [24] 2412 	ljmp	00132$
      002037                       2413 00185$:
                                   2414 ;	cc1111rf.c:560: if (rfTxInfMode)
      002037 90 F7 27         [24] 2415 	mov	dptr,#_rfTxInfMode
      00203A E0               [24] 2416 	movx	a,@dptr
      00203B FF               [12] 2417 	mov	r7,a
      00203C 70 03            [24] 2418 	jnz	00186$
      00203E 02 21 71         [24] 2419 	ljmp	00125$
      002041                       2420 00186$:
                                   2421 ;	cc1111rf.c:567: macdata.tLastHop ++;
      002041 90 F6 CB         [24] 2422 	mov	dptr,#(_macdata + 0x000d)
      002044 E0               [24] 2423 	movx	a,@dptr
      002045 FE               [12] 2424 	mov	r6,a
      002046 A3               [24] 2425 	inc	dptr
      002047 E0               [24] 2426 	movx	a,@dptr
      002048 FF               [12] 2427 	mov	r7,a
      002049 0E               [12] 2428 	inc	r6
      00204A BE 00 01         [24] 2429 	cjne	r6,#0x00,00187$
      00204D 0F               [12] 2430 	inc	r7
      00204E                       2431 00187$:
      00204E 90 F6 CB         [24] 2432 	mov	dptr,#(_macdata + 0x000d)
      002051 EE               [12] 2433 	mov	a,r6
      002052 F0               [24] 2434 	movx	@dptr,a
      002053 EF               [12] 2435 	mov	a,r7
      002054 A3               [24] 2436 	inc	dptr
      002055 F0               [24] 2437 	movx	@dptr,a
                                   2438 ;	cc1111rf.c:569: if (rfTxCounter == rfTxBufferEnd)
      002056 90 F7 1B         [24] 2439 	mov	dptr,#_rfTxCounter
      002059 E0               [24] 2440 	movx	a,@dptr
      00205A FE               [12] 2441 	mov	r6,a
      00205B A3               [24] 2442 	inc	dptr
      00205C E0               [24] 2443 	movx	a,@dptr
      00205D FF               [12] 2444 	mov	r7,a
      00205E 90 F7 1F         [24] 2445 	mov	dptr,#_rfTxBufferEnd
      002061 E0               [24] 2446 	movx	a,@dptr
      002062 FC               [12] 2447 	mov	r4,a
      002063 A3               [24] 2448 	inc	dptr
      002064 E0               [24] 2449 	movx	a,@dptr
      002065 FD               [12] 2450 	mov	r5,a
      002066 EE               [12] 2451 	mov	a,r6
      002067 B5 04 06         [24] 2452 	cjne	a,ar4,00188$
      00206A EF               [12] 2453 	mov	a,r7
      00206B B5 05 02         [24] 2454 	cjne	a,ar5,00188$
      00206E 80 03            [24] 2455 	sjmp	00189$
      002070                       2456 00188$:
      002070 02 21 44         [24] 2457 	ljmp	00121$
      002073                       2458 00189$:
                                   2459 ;	cc1111rf.c:571: if (rfTxRepeatCounter)
      002073 90 F7 1D         [24] 2460 	mov	dptr,#_rfTxRepeatCounter
      002076 E0               [24] 2461 	movx	a,@dptr
      002077 FE               [12] 2462 	mov	r6,a
      002078 A3               [24] 2463 	inc	dptr
      002079 E0               [24] 2464 	movx	a,@dptr
      00207A FF               [12] 2465 	mov	r7,a
      00207B 4E               [12] 2466 	orl	a,r6
      00207C 60 37            [24] 2467 	jz	00118$
                                   2468 ;	cc1111rf.c:573: if(rfTxRepeatCounter != 0xff)
      00207E 90 F7 1D         [24] 2469 	mov	dptr,#_rfTxRepeatCounter
      002081 E0               [24] 2470 	movx	a,@dptr
      002082 FE               [12] 2471 	mov	r6,a
      002083 A3               [24] 2472 	inc	dptr
      002084 E0               [24] 2473 	movx	a,@dptr
      002085 FF               [12] 2474 	mov	r7,a
      002086 BE FF 05         [24] 2475 	cjne	r6,#0xFF,00191$
      002089 BF 00 02         [24] 2476 	cjne	r7,#0x00,00191$
      00208C 80 14            [24] 2477 	sjmp	00112$
      00208E                       2478 00191$:
                                   2479 ;	cc1111rf.c:574: rfTxRepeatCounter--;
      00208E 90 F7 1D         [24] 2480 	mov	dptr,#_rfTxRepeatCounter
      002091 E0               [24] 2481 	movx	a,@dptr
      002092 24 FF            [12] 2482 	add	a,#0xFF
      002094 FE               [12] 2483 	mov	r6,a
      002095 A3               [24] 2484 	inc	dptr
      002096 E0               [24] 2485 	movx	a,@dptr
      002097 34 FF            [12] 2486 	addc	a,#0xFF
      002099 FF               [12] 2487 	mov	r7,a
      00209A 90 F7 1D         [24] 2488 	mov	dptr,#_rfTxRepeatCounter
      00209D EE               [12] 2489 	mov	a,r6
      00209E F0               [24] 2490 	movx	@dptr,a
      00209F EF               [12] 2491 	mov	a,r7
      0020A0 A3               [24] 2492 	inc	dptr
      0020A1 F0               [24] 2493 	movx	@dptr,a
      0020A2                       2494 00112$:
                                   2495 ;	cc1111rf.c:575: rfTxCounter = rfTxRepeatOffset;
      0020A2 90 F7 23         [24] 2496 	mov	dptr,#_rfTxRepeatOffset
      0020A5 E0               [24] 2497 	movx	a,@dptr
      0020A6 FE               [12] 2498 	mov	r6,a
      0020A7 A3               [24] 2499 	inc	dptr
      0020A8 E0               [24] 2500 	movx	a,@dptr
      0020A9 FF               [12] 2501 	mov	r7,a
      0020AA 90 F7 1B         [24] 2502 	mov	dptr,#_rfTxCounter
      0020AD EE               [12] 2503 	mov	a,r6
      0020AE F0               [24] 2504 	movx	@dptr,a
      0020AF EF               [12] 2505 	mov	a,r7
      0020B0 A3               [24] 2506 	inc	dptr
      0020B1 F0               [24] 2507 	movx	@dptr,a
      0020B2 02 21 44         [24] 2508 	ljmp	00121$
      0020B5                       2509 00118$:
                                   2510 ;	cc1111rf.c:581: rftxbuf[(rfTxCurBufIdx * rfTxBufferEnd)] = BUFFER_AVAILABLE;
      0020B5 90 F7 1F         [24] 2511 	mov	dptr,#_rfTxBufferEnd
      0020B8 E0               [24] 2512 	movx	a,@dptr
      0020B9 F5 0F            [12] 2513 	mov	__mulint_PARM_2,a
      0020BB A3               [24] 2514 	inc	dptr
      0020BC E0               [24] 2515 	movx	a,@dptr
      0020BD F5 10            [12] 2516 	mov	(__mulint_PARM_2 + 1),a
      0020BF 90 F7 19         [24] 2517 	mov	dptr,#_rfTxCurBufIdx
      0020C2 E0               [24] 2518 	movx	a,@dptr
      0020C3 FF               [12] 2519 	mov	r7,a
      0020C4 7E 00            [12] 2520 	mov	r6,#0x00
      0020C6 8F 82            [24] 2521 	mov	dpl,r7
      0020C8 8E 83            [24] 2522 	mov	dph,r6
      0020CA 12 2A C1         [24] 2523 	lcall	__mulint
      0020CD AE 82            [24] 2524 	mov	r6,dpl
      0020CF AF 83            [24] 2525 	mov	r7,dph
      0020D1 90 F6 B5         [24] 2526 	mov	dptr,#_rftxbuf
      0020D4 E0               [24] 2527 	movx	a,@dptr
      0020D5 FC               [12] 2528 	mov	r4,a
      0020D6 A3               [24] 2529 	inc	dptr
      0020D7 E0               [24] 2530 	movx	a,@dptr
      0020D8 FD               [12] 2531 	mov	r5,a
      0020D9 EE               [12] 2532 	mov	a,r6
      0020DA 2C               [12] 2533 	add	a,r4
      0020DB F5 82            [12] 2534 	mov	dpl,a
      0020DD EF               [12] 2535 	mov	a,r7
      0020DE 3D               [12] 2536 	addc	a,r5
      0020DF F5 83            [12] 2537 	mov	dph,a
      0020E1 E4               [12] 2538 	clr	a
      0020E2 F0               [24] 2539 	movx	@dptr,a
                                   2540 ;	cc1111rf.c:583: if (++rfTxCurBufIdx == rfTxBufCount)
      0020E3 90 F7 19         [24] 2541 	mov	dptr,#_rfTxCurBufIdx
      0020E6 E0               [24] 2542 	movx	a,@dptr
      0020E7 24 01            [12] 2543 	add	a,#0x01
      0020E9 F0               [24] 2544 	movx	@dptr,a
      0020EA E0               [24] 2545 	movx	a,@dptr
      0020EB FF               [12] 2546 	mov	r7,a
      0020EC 90 F7 1A         [24] 2547 	mov	dptr,#_rfTxBufCount
      0020EF E0               [24] 2548 	movx	a,@dptr
      0020F0 FE               [12] 2549 	mov	r6,a
      0020F1 EF               [12] 2550 	mov	a,r7
      0020F2 B5 06 05         [24] 2551 	cjne	a,ar6,00114$
                                   2552 ;	cc1111rf.c:585: rfTxCurBufIdx = 0;
      0020F5 90 F7 19         [24] 2553 	mov	dptr,#_rfTxCurBufIdx
      0020F8 E4               [12] 2554 	clr	a
      0020F9 F0               [24] 2555 	movx	@dptr,a
      0020FA                       2556 00114$:
                                   2557 ;	cc1111rf.c:588: if (rftxbuf[(rfTxCurBufIdx * rfTxBufferEnd)] == BUFFER_AVAILABLE)
      0020FA 90 F7 1F         [24] 2558 	mov	dptr,#_rfTxBufferEnd
      0020FD E0               [24] 2559 	movx	a,@dptr
      0020FE F5 0F            [12] 2560 	mov	__mulint_PARM_2,a
      002100 A3               [24] 2561 	inc	dptr
      002101 E0               [24] 2562 	movx	a,@dptr
      002102 F5 10            [12] 2563 	mov	(__mulint_PARM_2 + 1),a
      002104 90 F7 19         [24] 2564 	mov	dptr,#_rfTxCurBufIdx
      002107 E0               [24] 2565 	movx	a,@dptr
      002108 FF               [12] 2566 	mov	r7,a
      002109 7E 00            [12] 2567 	mov	r6,#0x00
      00210B 8F 82            [24] 2568 	mov	dpl,r7
      00210D 8E 83            [24] 2569 	mov	dph,r6
      00210F 12 2A C1         [24] 2570 	lcall	__mulint
      002112 AE 82            [24] 2571 	mov	r6,dpl
      002114 AF 83            [24] 2572 	mov	r7,dph
      002116 90 F6 B5         [24] 2573 	mov	dptr,#_rftxbuf
      002119 E0               [24] 2574 	movx	a,@dptr
      00211A FC               [12] 2575 	mov	r4,a
      00211B A3               [24] 2576 	inc	dptr
      00211C E0               [24] 2577 	movx	a,@dptr
      00211D FD               [12] 2578 	mov	r5,a
      00211E EE               [12] 2579 	mov	a,r6
      00211F 2C               [12] 2580 	add	a,r4
      002120 FE               [12] 2581 	mov	r6,a
      002121 EF               [12] 2582 	mov	a,r7
      002122 3D               [12] 2583 	addc	a,r5
      002123 FF               [12] 2584 	mov	r7,a
      002124 8E 82            [24] 2585 	mov	dpl,r6
      002126 8F 83            [24] 2586 	mov	dph,r7
      002128 E0               [24] 2587 	movx	a,@dptr
      002129 70 10            [24] 2588 	jnz	00116$
                                   2589 ;	cc1111rf.c:591: macdata.mac_state = MAC_STATE_NONHOPPING;
      00212B 90 F6 BE         [24] 2590 	mov	dptr,#_macdata
      00212E E4               [12] 2591 	clr	a
      00212F F0               [24] 2592 	movx	@dptr,a
                                   2593 ;	cc1111rf.c:592: lastCode[1] = LCE_DROPPED_PACKET;
      002130 90 F6 E3         [24] 2594 	mov	dptr,#(_lastCode + 0x0001)
      002133 74 12            [12] 2595 	mov	a,#0x12
      002135 F0               [24] 2596 	movx	@dptr,a
                                   2597 ;	cc1111rf.c:593: resetRFSTATE();
      002136 12 1A 2A         [24] 2598 	lcall	_resetRFSTATE
                                   2599 ;	cc1111rf.c:594: LED = 0;
      002139 C2 91            [12] 2600 	clr	_P1_1
      00213B                       2601 00116$:
                                   2602 ;	cc1111rf.c:598: rfTxCounter = 1;
      00213B 90 F7 1B         [24] 2603 	mov	dptr,#_rfTxCounter
      00213E 74 01            [12] 2604 	mov	a,#0x01
      002140 F0               [24] 2605 	movx	@dptr,a
      002141 E4               [12] 2606 	clr	a
      002142 A3               [24] 2607 	inc	dptr
      002143 F0               [24] 2608 	movx	@dptr,a
      002144                       2609 00121$:
                                   2610 ;	cc1111rf.c:602: if(rfTxTotalTXLen-- == 255)
      002144 90 F7 25         [24] 2611 	mov	dptr,#_rfTxTotalTXLen
      002147 E0               [24] 2612 	movx	a,@dptr
      002148 FE               [12] 2613 	mov	r6,a
      002149 A3               [24] 2614 	inc	dptr
      00214A E0               [24] 2615 	movx	a,@dptr
      00214B FF               [12] 2616 	mov	r7,a
      00214C 90 F7 25         [24] 2617 	mov	dptr,#_rfTxTotalTXLen
      00214F E0               [24] 2618 	movx	a,@dptr
      002150 24 FF            [12] 2619 	add	a,#0xFF
      002152 FC               [12] 2620 	mov	r4,a
      002153 A3               [24] 2621 	inc	dptr
      002154 E0               [24] 2622 	movx	a,@dptr
      002155 34 FF            [12] 2623 	addc	a,#0xFF
      002157 FD               [12] 2624 	mov	r5,a
      002158 90 F7 25         [24] 2625 	mov	dptr,#_rfTxTotalTXLen
      00215B EC               [12] 2626 	mov	a,r4
      00215C F0               [24] 2627 	movx	@dptr,a
      00215D ED               [12] 2628 	mov	a,r5
      00215E A3               [24] 2629 	inc	dptr
      00215F F0               [24] 2630 	movx	@dptr,a
      002160 BE FF 22         [24] 2631 	cjne	r6,#0xFF,00126$
      002163 BF 00 1F         [24] 2632 	cjne	r7,#0x00,00126$
                                   2633 ;	cc1111rf.c:604: PKTCTRL0 &= ~PKTCTRL0_LENGTH_CONFIG;
      002166 90 DF 04         [24] 2634 	mov	dptr,#_PKTCTRL0
      002169 E0               [24] 2635 	movx	a,@dptr
      00216A FF               [12] 2636 	mov	r7,a
      00216B 74 FC            [12] 2637 	mov	a,#0xFC
      00216D 5F               [12] 2638 	anl	a,r7
      00216E F0               [24] 2639 	movx	@dptr,a
      00216F 80 14            [24] 2640 	sjmp	00126$
      002171                       2641 00125$:
                                   2642 ;	cc1111rf.c:611: rfTxTotalTXLen--;
      002171 90 F7 25         [24] 2643 	mov	dptr,#_rfTxTotalTXLen
      002174 E0               [24] 2644 	movx	a,@dptr
      002175 24 FF            [12] 2645 	add	a,#0xFF
      002177 FE               [12] 2646 	mov	r6,a
      002178 A3               [24] 2647 	inc	dptr
      002179 E0               [24] 2648 	movx	a,@dptr
      00217A 34 FF            [12] 2649 	addc	a,#0xFF
      00217C FF               [12] 2650 	mov	r7,a
      00217D 90 F7 25         [24] 2651 	mov	dptr,#_rfTxTotalTXLen
      002180 EE               [12] 2652 	mov	a,r6
      002181 F0               [24] 2653 	movx	@dptr,a
      002182 EF               [12] 2654 	mov	a,r7
      002183 A3               [24] 2655 	inc	dptr
      002184 F0               [24] 2656 	movx	@dptr,a
      002185                       2657 00126$:
                                   2658 ;	cc1111rf.c:612: rf_status = RFST_STX;
      002185 90 F6 B9         [24] 2659 	mov	dptr,#_rf_status
      002188 74 03            [12] 2660 	mov	a,#0x03
      00218A F0               [24] 2661 	movx	@dptr,a
                                   2662 ;	cc1111rf.c:614: RFD = rftxbuf[(rfTxCurBufIdx * rfTxBufferEnd) + rfTxCounter++];
      00218B 90 F7 1F         [24] 2663 	mov	dptr,#_rfTxBufferEnd
      00218E E0               [24] 2664 	movx	a,@dptr
      00218F F5 0F            [12] 2665 	mov	__mulint_PARM_2,a
      002191 A3               [24] 2666 	inc	dptr
      002192 E0               [24] 2667 	movx	a,@dptr
      002193 F5 10            [12] 2668 	mov	(__mulint_PARM_2 + 1),a
      002195 90 F7 19         [24] 2669 	mov	dptr,#_rfTxCurBufIdx
      002198 E0               [24] 2670 	movx	a,@dptr
      002199 FF               [12] 2671 	mov	r7,a
      00219A 7E 00            [12] 2672 	mov	r6,#0x00
      00219C 8F 82            [24] 2673 	mov	dpl,r7
      00219E 8E 83            [24] 2674 	mov	dph,r6
      0021A0 12 2A C1         [24] 2675 	lcall	__mulint
      0021A3 AE 82            [24] 2676 	mov	r6,dpl
      0021A5 AF 83            [24] 2677 	mov	r7,dph
      0021A7 90 F7 1B         [24] 2678 	mov	dptr,#_rfTxCounter
      0021AA E0               [24] 2679 	movx	a,@dptr
      0021AB FC               [12] 2680 	mov	r4,a
      0021AC A3               [24] 2681 	inc	dptr
      0021AD E0               [24] 2682 	movx	a,@dptr
      0021AE FD               [12] 2683 	mov	r5,a
      0021AF 90 F7 1B         [24] 2684 	mov	dptr,#_rfTxCounter
      0021B2 E0               [24] 2685 	movx	a,@dptr
      0021B3 24 01            [12] 2686 	add	a,#0x01
      0021B5 F0               [24] 2687 	movx	@dptr,a
      0021B6 A3               [24] 2688 	inc	dptr
      0021B7 E0               [24] 2689 	movx	a,@dptr
      0021B8 34 00            [12] 2690 	addc	a,#0x00
      0021BA F0               [24] 2691 	movx	@dptr,a
      0021BB EC               [12] 2692 	mov	a,r4
      0021BC 2E               [12] 2693 	add	a,r6
      0021BD FE               [12] 2694 	mov	r6,a
      0021BE ED               [12] 2695 	mov	a,r5
      0021BF 3F               [12] 2696 	addc	a,r7
      0021C0 FF               [12] 2697 	mov	r7,a
      0021C1 90 F6 B5         [24] 2698 	mov	dptr,#_rftxbuf
      0021C4 E0               [24] 2699 	movx	a,@dptr
      0021C5 FC               [12] 2700 	mov	r4,a
      0021C6 A3               [24] 2701 	inc	dptr
      0021C7 E0               [24] 2702 	movx	a,@dptr
      0021C8 FD               [12] 2703 	mov	r5,a
      0021C9 EE               [12] 2704 	mov	a,r6
      0021CA 2C               [12] 2705 	add	a,r4
      0021CB F5 82            [12] 2706 	mov	dpl,a
      0021CD EF               [12] 2707 	mov	a,r7
      0021CE 3D               [12] 2708 	addc	a,r5
      0021CF F5 83            [12] 2709 	mov	dph,a
      0021D1 E0               [24] 2710 	movx	a,@dptr
      0021D2 F5 D9            [12] 2711 	mov	_RFD,a
                                   2712 ;	cc1111rf.c:615: txTotal++;
      0021D4 90 F6 B7         [24] 2713 	mov	dptr,#_txTotal
      0021D7 E0               [24] 2714 	movx	a,@dptr
      0021D8 24 01            [12] 2715 	add	a,#0x01
      0021DA F0               [24] 2716 	movx	@dptr,a
      0021DB A3               [24] 2717 	inc	dptr
      0021DC E0               [24] 2718 	movx	a,@dptr
      0021DD 34 00            [12] 2719 	addc	a,#0x00
      0021DF F0               [24] 2720 	movx	@dptr,a
      0021E0                       2721 00132$:
      0021E0 D0 D0            [24] 2722 	pop	psw
      0021E2 D0 00            [24] 2723 	pop	(0+0)
      0021E4 D0 01            [24] 2724 	pop	(0+1)
      0021E6 D0 02            [24] 2725 	pop	(0+2)
      0021E8 D0 03            [24] 2726 	pop	(0+3)
      0021EA D0 04            [24] 2727 	pop	(0+4)
      0021EC D0 05            [24] 2728 	pop	(0+5)
      0021EE D0 06            [24] 2729 	pop	(0+6)
      0021F0 D0 07            [24] 2730 	pop	(0+7)
      0021F2 D0 83            [24] 2731 	pop	dph
      0021F4 D0 82            [24] 2732 	pop	dpl
      0021F6 D0 F0            [24] 2733 	pop	b
      0021F8 D0 E0            [24] 2734 	pop	acc
      0021FA D0 20            [24] 2735 	pop	bits
      0021FC 32               [24] 2736 	reti
                                   2737 ;------------------------------------------------------------
                                   2738 ;Allocation info for local variables in function 'rfIntHandler'
                                   2739 ;------------------------------------------------------------
                                   2740 ;encoffset                 Allocated with name '_rfIntHandler_encoffset_1_136'
                                   2741 ;------------------------------------------------------------
                                   2742 ;	cc1111rf.c:619: void rfIntHandler(void) __interrupt RF_VECTOR  // interrupt handler should trigger on rf events
                                   2743 ;	-----------------------------------------
                                   2744 ;	 function rfIntHandler
                                   2745 ;	-----------------------------------------
      0021FD                       2746 _rfIntHandler:
      0021FD C0 20            [24] 2747 	push	bits
      0021FF C0 E0            [24] 2748 	push	acc
      002201 C0 F0            [24] 2749 	push	b
      002203 C0 82            [24] 2750 	push	dpl
      002205 C0 83            [24] 2751 	push	dph
      002207 C0 07            [24] 2752 	push	(0+7)
      002209 C0 06            [24] 2753 	push	(0+6)
      00220B C0 05            [24] 2754 	push	(0+5)
      00220D C0 04            [24] 2755 	push	(0+4)
      00220F C0 03            [24] 2756 	push	(0+3)
      002211 C0 02            [24] 2757 	push	(0+2)
      002213 C0 01            [24] 2758 	push	(0+1)
      002215 C0 00            [24] 2759 	push	(0+0)
      002217 C0 D0            [24] 2760 	push	psw
      002219 75 D0 00         [24] 2761 	mov	psw,#0x00
                                   2762 ;	cc1111rf.c:621: u8 encoffset= 0;
      00221C 75 0D 00         [24] 2763 	mov	_rfIntHandler_encoffset_1_136,#0x00
                                   2764 ;	cc1111rf.c:624: lastCode[0] = LC_RF_VECTOR;
      00221F 90 F6 E2         [24] 2765 	mov	dptr,#_lastCode
      002222 74 10            [12] 2766 	mov	a,#0x10
      002224 F0               [24] 2767 	movx	@dptr,a
                                   2768 ;	cc1111rf.c:625: S1CON &= ~(S1CON_RFIF_0 | S1CON_RFIF_1);
      002225 AE 9B            [24] 2769 	mov	r6,_S1CON
      002227 74 FC            [12] 2770 	mov	a,#0xFC
      002229 5E               [12] 2771 	anl	a,r6
      00222A F5 9B            [12] 2772 	mov	_S1CON,a
                                   2773 ;	cc1111rf.c:628: rfif |= RFIF;
      00222C E5 E9            [12] 2774 	mov	a,_RFIF
      00222E 42 0A            [12] 2775 	orl	_rfif,a
                                   2776 ;	cc1111rf.c:630: if (RFIF & RFIF_IRQ_SFD)
      002230 E5 E9            [12] 2777 	mov	a,_RFIF
      002232 30 E0 20         [24] 2778 	jnb	acc.0,00102$
                                   2779 ;	cc1111rf.c:634: rf_tLastRecv = T2CT | (rf_MAC_timer << 8);
      002235 90 F6 BA         [24] 2780 	mov	dptr,#_rf_MAC_timer
      002238 E0               [24] 2781 	movx	a,@dptr
      002239 FD               [12] 2782 	mov	r5,a
      00223A A3               [24] 2783 	inc	dptr
      00223B E0               [24] 2784 	movx	a,@dptr
      00223C 8D 06            [24] 2785 	mov	ar6,r5
      00223E 7D 00            [12] 2786 	mov	r5,#0x00
      002240 AB 9C            [24] 2787 	mov	r3,_T2CT
      002242 7C 00            [12] 2788 	mov	r4,#0x00
      002244 90 F6 BC         [24] 2789 	mov	dptr,#_rf_tLastRecv
      002247 ED               [12] 2790 	mov	a,r5
      002248 4B               [12] 2791 	orl	a,r3
      002249 F0               [24] 2792 	movx	@dptr,a
      00224A EE               [12] 2793 	mov	a,r6
      00224B 4C               [12] 2794 	orl	a,r4
      00224C A3               [24] 2795 	inc	dptr
      00224D F0               [24] 2796 	movx	@dptr,a
                                   2797 ;	cc1111rf.c:635: RFIF &= ~RFIF_IRQ_SFD;
      00224E AE E9            [24] 2798 	mov	r6,_RFIF
      002250 74 FE            [12] 2799 	mov	a,#0xFE
      002252 5E               [12] 2800 	anl	a,r6
      002253 F5 E9            [12] 2801 	mov	_RFIF,a
      002255                       2802 00102$:
                                   2803 ;	cc1111rf.c:640: if (RFIF & ( RFIF_IRQ_DONE | RFIF_IRQ_RXOVF | RFIF_IRQ_TIMEOUT ))
      002255 E5 E9            [12] 2804 	mov	a,_RFIF
      002257 54 70            [12] 2805 	anl	a,#0x70
      002259 70 03            [24] 2806 	jnz	00152$
      00225B 02 23 E0         [24] 2807 	ljmp	00117$
      00225E                       2808 00152$:
                                   2809 ;	cc1111rf.c:643: if(rf_status == RFST_STX)
      00225E 90 F6 B9         [24] 2810 	mov	dptr,#_rf_status
      002261 E0               [24] 2811 	movx	a,@dptr
      002262 FE               [12] 2812 	mov	r6,a
      002263 BE 03 0A         [24] 2813 	cjne	r6,#0x03,00114$
                                   2814 ;	cc1111rf.c:649: rfif &= ~( RFIF_IRQ_DONE | RFIF_IRQ_RXOVF | RFIF_IRQ_TIMEOUT );
      002266 AE 0A            [24] 2815 	mov	r6,_rfif
      002268 74 8F            [12] 2816 	mov	a,#0x8F
      00226A 5E               [12] 2817 	anl	a,r6
      00226B F5 0A            [12] 2818 	mov	_rfif,a
      00226D 02 23 D9         [24] 2819 	ljmp	00115$
      002270                       2820 00114$:
                                   2821 ;	cc1111rf.c:655: if(rfRxProcessed[!rfRxCurrentBuffer] == RX_PROCESSED)
      002270 90 F2 AE         [24] 2822 	mov	dptr,#_rfRxCurrentBuffer
      002273 E0               [24] 2823 	movx	a,@dptr
      002274 FE               [12] 2824 	mov	r6,a
      002275 B4 01 00         [24] 2825 	cjne	a,#0x01,00155$
      002278                       2826 00155$:
      002278 E4               [12] 2827 	clr	a
      002279 33               [12] 2828 	rlc	a
      00227A 24 B3            [12] 2829 	add	a,#_rfRxProcessed
      00227C F5 82            [12] 2830 	mov	dpl,a
      00227E E4               [12] 2831 	clr	a
      00227F 34 F6            [12] 2832 	addc	a,#(_rfRxProcessed >> 8)
      002281 F5 83            [12] 2833 	mov	dph,a
      002283 E0               [24] 2834 	movx	a,@dptr
      002284 FE               [12] 2835 	mov	r6,a
      002285 BE 01 02         [24] 2836 	cjne	r6,#0x01,00156$
      002288 80 03            [24] 2837 	sjmp	00157$
      00228A                       2838 00156$:
      00228A 02 23 B6         [24] 2839 	ljmp	00111$
      00228D                       2840 00157$:
                                   2841 ;	cc1111rf.c:660: if(rfAESMode & AES_CRYPTO_IN_ENABLE)
      00228D 90 F7 28         [24] 2842 	mov	dptr,#_rfAESMode
      002290 E0               [24] 2843 	movx	a,@dptr
      002291 FE               [12] 2844 	mov	r6,a
      002292 20 E1 03         [24] 2845 	jb	acc.1,00158$
      002295 02 23 8F         [24] 2846 	ljmp	00109$
      002298                       2847 00158$:
                                   2848 ;	cc1111rf.c:662: if((PKTCTRL0 & PKTCTRL0_LENGTH_CONFIG) == PKTCTRL0_LENGTH_CONFIG_VAR)
      002298 90 DF 04         [24] 2849 	mov	dptr,#_PKTCTRL0
      00229B E0               [24] 2850 	movx	a,@dptr
      00229C FE               [12] 2851 	mov	r6,a
      00229D 53 06 03         [24] 2852 	anl	ar6,#0x03
      0022A0 BE 01 03         [24] 2853 	cjne	r6,#0x01,00104$
                                   2854 ;	cc1111rf.c:663: encoffset= 1;
      0022A3 75 0D 01         [24] 2855 	mov	_rfIntHandler_encoffset_1_136,#0x01
      0022A6                       2856 00104$:
                                   2857 ;	cc1111rf.c:664: if((rfAESMode & AES_CRYPTO_IN_TYPE) == AES_CRYPTO_IN_ENCRYPT)
      0022A6 90 F7 28         [24] 2858 	mov	dptr,#_rfAESMode
      0022A9 E0               [24] 2859 	movx	a,@dptr
      0022AA FE               [12] 2860 	mov	r6,a
      0022AB 53 06 01         [24] 2861 	anl	ar6,#0x01
      0022AE BE 01 70         [24] 2862 	cjne	r6,#0x01,00106$
                                   2863 ;	cc1111rf.c:665: encAES(&rfrxbuf[rfRxCurrentBuffer][encoffset], &rfrxbuf[rfRxCurrentBuffer][encoffset], rfRxCounter[rfRxCurrentBuffer] - encoffset, (rfAESMode & AES_CRYPTO_MODE));
      0022B1 90 F2 AE         [24] 2864 	mov	dptr,#_rfRxCurrentBuffer
      0022B4 E0               [24] 2865 	movx	a,@dptr
      0022B5 25 E0            [12] 2866 	add	a,acc
      0022B7 FD               [12] 2867 	mov	r5,a
      0022B8 E4               [12] 2868 	clr	a
      0022B9 24 AF            [12] 2869 	add	a,#_rfrxbuf
      0022BB FE               [12] 2870 	mov	r6,a
      0022BC ED               [12] 2871 	mov	a,r5
      0022BD 34 F2            [12] 2872 	addc	a,#(_rfrxbuf >> 8)
      0022BF FD               [12] 2873 	mov	r5,a
      0022C0 AB 0D            [24] 2874 	mov	r3,_rfIntHandler_encoffset_1_136
      0022C2 7C 00            [12] 2875 	mov	r4,#0x00
      0022C4 EB               [12] 2876 	mov	a,r3
      0022C5 2E               [12] 2877 	add	a,r6
      0022C6 FE               [12] 2878 	mov	r6,a
      0022C7 EC               [12] 2879 	mov	a,r4
      0022C8 3D               [12] 2880 	addc	a,r5
      0022C9 FD               [12] 2881 	mov	r5,a
      0022CA E0               [24] 2882 	movx	a,@dptr
      0022CB F9               [12] 2883 	mov	r1,a
      0022CC 29               [12] 2884 	add	a,r1
      0022CD FA               [12] 2885 	mov	r2,a
      0022CE E4               [12] 2886 	clr	a
      0022CF 24 AF            [12] 2887 	add	a,#_rfrxbuf
      0022D1 F9               [12] 2888 	mov	r1,a
      0022D2 EA               [12] 2889 	mov	a,r2
      0022D3 34 F2            [12] 2890 	addc	a,#(_rfrxbuf >> 8)
      0022D5 FA               [12] 2891 	mov	r2,a
      0022D6 EB               [12] 2892 	mov	a,r3
      0022D7 29               [12] 2893 	add	a,r1
      0022D8 FB               [12] 2894 	mov	r3,a
      0022D9 EC               [12] 2895 	mov	a,r4
      0022DA 3A               [12] 2896 	addc	a,r2
      0022DB FC               [12] 2897 	mov	r4,a
      0022DC E0               [24] 2898 	movx	a,@dptr
      0022DD 75 F0 02         [24] 2899 	mov	b,#0x02
      0022E0 A4               [48] 2900 	mul	ab
      0022E1 24 AF            [12] 2901 	add	a,#_rfRxCounter
      0022E3 F5 82            [12] 2902 	mov	dpl,a
      0022E5 74 F6            [12] 2903 	mov	a,#(_rfRxCounter >> 8)
      0022E7 35 F0            [12] 2904 	addc	a,b
      0022E9 F5 83            [12] 2905 	mov	dph,a
      0022EB E0               [24] 2906 	movx	a,@dptr
      0022EC F9               [12] 2907 	mov	r1,a
      0022ED A3               [24] 2908 	inc	dptr
      0022EE E0               [24] 2909 	movx	a,@dptr
      0022EF FA               [12] 2910 	mov	r2,a
      0022F0 A8 0D            [24] 2911 	mov	r0,_rfIntHandler_encoffset_1_136
      0022F2 7F 00            [12] 2912 	mov	r7,#0x00
      0022F4 E9               [12] 2913 	mov	a,r1
      0022F5 C3               [12] 2914 	clr	c
      0022F6 98               [12] 2915 	subb	a,r0
      0022F7 F9               [12] 2916 	mov	r1,a
      0022F8 EA               [12] 2917 	mov	a,r2
      0022F9 9F               [12] 2918 	subb	a,r7
      0022FA FA               [12] 2919 	mov	r2,a
      0022FB 90 F7 28         [24] 2920 	mov	dptr,#_rfAESMode
      0022FE E0               [24] 2921 	movx	a,@dptr
      0022FF FF               [12] 2922 	mov	r7,a
      002300 53 07 F0         [24] 2923 	anl	ar7,#0xF0
      002303 90 F6 FE         [24] 2924 	mov	dptr,#_encAES_PARM_2
      002306 EB               [12] 2925 	mov	a,r3
      002307 F0               [24] 2926 	movx	@dptr,a
      002308 EC               [12] 2927 	mov	a,r4
      002309 A3               [24] 2928 	inc	dptr
      00230A F0               [24] 2929 	movx	@dptr,a
      00230B 90 F7 00         [24] 2930 	mov	dptr,#_encAES_PARM_3
      00230E E9               [12] 2931 	mov	a,r1
      00230F F0               [24] 2932 	movx	@dptr,a
      002310 EA               [12] 2933 	mov	a,r2
      002311 A3               [24] 2934 	inc	dptr
      002312 F0               [24] 2935 	movx	@dptr,a
      002313 90 F7 02         [24] 2936 	mov	dptr,#_encAES_PARM_4
      002316 EF               [12] 2937 	mov	a,r7
      002317 F0               [24] 2938 	movx	@dptr,a
      002318 8E 82            [24] 2939 	mov	dpl,r6
      00231A 8D 83            [24] 2940 	mov	dph,r5
      00231C 12 27 B2         [24] 2941 	lcall	_encAES
      00231F 80 6E            [24] 2942 	sjmp	00109$
      002321                       2943 00106$:
                                   2944 ;	cc1111rf.c:667: decAES(&rfrxbuf[rfRxCurrentBuffer][encoffset], &rfrxbuf[rfRxCurrentBuffer][encoffset], rfRxCounter[rfRxCurrentBuffer] - encoffset, (rfAESMode & AES_CRYPTO_MODE));
      002321 90 F2 AE         [24] 2945 	mov	dptr,#_rfRxCurrentBuffer
      002324 E0               [24] 2946 	movx	a,@dptr
      002325 25 E0            [12] 2947 	add	a,acc
      002327 FE               [12] 2948 	mov	r6,a
      002328 E4               [12] 2949 	clr	a
      002329 24 AF            [12] 2950 	add	a,#_rfrxbuf
      00232B FF               [12] 2951 	mov	r7,a
      00232C EE               [12] 2952 	mov	a,r6
      00232D 34 F2            [12] 2953 	addc	a,#(_rfrxbuf >> 8)
      00232F FE               [12] 2954 	mov	r6,a
      002330 AC 0D            [24] 2955 	mov	r4,_rfIntHandler_encoffset_1_136
      002332 7D 00            [12] 2956 	mov	r5,#0x00
      002334 EC               [12] 2957 	mov	a,r4
      002335 2F               [12] 2958 	add	a,r7
      002336 FF               [12] 2959 	mov	r7,a
      002337 ED               [12] 2960 	mov	a,r5
      002338 3E               [12] 2961 	addc	a,r6
      002339 FE               [12] 2962 	mov	r6,a
      00233A E0               [24] 2963 	movx	a,@dptr
      00233B 25 E0            [12] 2964 	add	a,acc
      00233D FA               [12] 2965 	mov	r2,a
      00233E E4               [12] 2966 	clr	a
      00233F 24 AF            [12] 2967 	add	a,#_rfrxbuf
      002341 FB               [12] 2968 	mov	r3,a
      002342 EA               [12] 2969 	mov	a,r2
      002343 34 F2            [12] 2970 	addc	a,#(_rfrxbuf >> 8)
      002345 FA               [12] 2971 	mov	r2,a
      002346 EC               [12] 2972 	mov	a,r4
      002347 2B               [12] 2973 	add	a,r3
      002348 FC               [12] 2974 	mov	r4,a
      002349 ED               [12] 2975 	mov	a,r5
      00234A 3A               [12] 2976 	addc	a,r2
      00234B FD               [12] 2977 	mov	r5,a
      00234C E0               [24] 2978 	movx	a,@dptr
      00234D 75 F0 02         [24] 2979 	mov	b,#0x02
      002350 A4               [48] 2980 	mul	ab
      002351 24 AF            [12] 2981 	add	a,#_rfRxCounter
      002353 F5 82            [12] 2982 	mov	dpl,a
      002355 74 F6            [12] 2983 	mov	a,#(_rfRxCounter >> 8)
      002357 35 F0            [12] 2984 	addc	a,b
      002359 F5 83            [12] 2985 	mov	dph,a
      00235B E0               [24] 2986 	movx	a,@dptr
      00235C FA               [12] 2987 	mov	r2,a
      00235D A3               [24] 2988 	inc	dptr
      00235E E0               [24] 2989 	movx	a,@dptr
      00235F FB               [12] 2990 	mov	r3,a
      002360 A8 0D            [24] 2991 	mov	r0,_rfIntHandler_encoffset_1_136
      002362 79 00            [12] 2992 	mov	r1,#0x00
      002364 EA               [12] 2993 	mov	a,r2
      002365 C3               [12] 2994 	clr	c
      002366 98               [12] 2995 	subb	a,r0
      002367 FA               [12] 2996 	mov	r2,a
      002368 EB               [12] 2997 	mov	a,r3
      002369 99               [12] 2998 	subb	a,r1
      00236A FB               [12] 2999 	mov	r3,a
      00236B 90 F7 28         [24] 3000 	mov	dptr,#_rfAESMode
      00236E E0               [24] 3001 	movx	a,@dptr
      00236F F9               [12] 3002 	mov	r1,a
      002370 53 01 F0         [24] 3003 	anl	ar1,#0xF0
      002373 90 F7 05         [24] 3004 	mov	dptr,#_decAES_PARM_2
      002376 EC               [12] 3005 	mov	a,r4
      002377 F0               [24] 3006 	movx	@dptr,a
      002378 ED               [12] 3007 	mov	a,r5
      002379 A3               [24] 3008 	inc	dptr
      00237A F0               [24] 3009 	movx	@dptr,a
      00237B 90 F7 07         [24] 3010 	mov	dptr,#_decAES_PARM_3
      00237E EA               [12] 3011 	mov	a,r2
      00237F F0               [24] 3012 	movx	@dptr,a
      002380 EB               [12] 3013 	mov	a,r3
      002381 A3               [24] 3014 	inc	dptr
      002382 F0               [24] 3015 	movx	@dptr,a
      002383 90 F7 09         [24] 3016 	mov	dptr,#_decAES_PARM_4
      002386 E9               [12] 3017 	mov	a,r1
      002387 F0               [24] 3018 	movx	@dptr,a
      002388 8F 82            [24] 3019 	mov	dpl,r7
      00238A 8E 83            [24] 3020 	mov	dph,r6
      00238C 12 27 FB         [24] 3021 	lcall	_decAES
      00238F                       3022 00109$:
                                   3023 ;	cc1111rf.c:671: rfRxCurrentBuffer ^= 1;
      00238F 90 F2 AE         [24] 3024 	mov	dptr,#_rfRxCurrentBuffer
      002392 E0               [24] 3025 	movx	a,@dptr
      002393 FF               [12] 3026 	mov	r7,a
      002394 74 01            [12] 3027 	mov	a,#0x01
      002396 6F               [12] 3028 	xrl	a,r7
      002397 F0               [24] 3029 	movx	@dptr,a
                                   3030 ;	cc1111rf.c:672: rfRxCounter[rfRxCurrentBuffer] = 0;
      002398 E0               [24] 3031 	movx	a,@dptr
      002399 FF               [12] 3032 	mov	r7,a
      00239A 75 F0 02         [24] 3033 	mov	b,#0x02
      00239D A4               [48] 3034 	mul	ab
      00239E 24 AF            [12] 3035 	add	a,#_rfRxCounter
      0023A0 F5 82            [12] 3036 	mov	dpl,a
      0023A2 74 F6            [12] 3037 	mov	a,#(_rfRxCounter >> 8)
      0023A4 35 F0            [12] 3038 	addc	a,b
      0023A6 F5 83            [12] 3039 	mov	dph,a
      0023A8 E4               [12] 3040 	clr	a
      0023A9 F0               [24] 3041 	movx	@dptr,a
      0023AA A3               [24] 3042 	inc	dptr
      0023AB F0               [24] 3043 	movx	@dptr,a
                                   3044 ;	cc1111rf.c:674: rfRxProcessed[FIRST_BUFFER] = RX_UNPROCESSED;
      0023AC 90 F6 B3         [24] 3045 	mov	dptr,#_rfRxProcessed
      0023AF F0               [24] 3046 	movx	@dptr,a
                                   3047 ;	cc1111rf.c:675: rfRxProcessed[SECOND_BUFFER] = RX_UNPROCESSED;
      0023B0 90 F6 B4         [24] 3048 	mov	dptr,#(_rfRxProcessed + 0x0001)
      0023B3 F0               [24] 3049 	movx	@dptr,a
      0023B4 80 21            [24] 3050 	sjmp	00112$
      0023B6                       3051 00111$:
                                   3052 ;	cc1111rf.c:692: lastCode[1] = LCE_DROPPED_PACKET;
      0023B6 90 F6 E3         [24] 3053 	mov	dptr,#(_lastCode + 0x0001)
      0023B9 74 12            [12] 3054 	mov	a,#0x12
      0023BB F0               [24] 3055 	movx	@dptr,a
                                   3056 ;	cc1111rf.c:693: LED = !LED;
      0023BC B2 91            [12] 3057 	cpl	_P1_1
                                   3058 ;	cc1111rf.c:694: rfRxCounter[rfRxCurrentBuffer] = 0;
      0023BE 90 F2 AE         [24] 3059 	mov	dptr,#_rfRxCurrentBuffer
      0023C1 E0               [24] 3060 	movx	a,@dptr
      0023C2 FF               [12] 3061 	mov	r7,a
      0023C3 75 F0 02         [24] 3062 	mov	b,#0x02
      0023C6 A4               [48] 3063 	mul	ab
      0023C7 24 AF            [12] 3064 	add	a,#_rfRxCounter
      0023C9 F5 82            [12] 3065 	mov	dpl,a
      0023CB 74 F6            [12] 3066 	mov	a,#(_rfRxCounter >> 8)
      0023CD 35 F0            [12] 3067 	addc	a,b
      0023CF F5 83            [12] 3068 	mov	dph,a
      0023D1 E4               [12] 3069 	clr	a
      0023D2 F0               [24] 3070 	movx	@dptr,a
      0023D3 A3               [24] 3071 	inc	dptr
      0023D4 F0               [24] 3072 	movx	@dptr,a
                                   3073 ;	cc1111rf.c:695: LED = !LED;
      0023D5 B2 91            [12] 3074 	cpl	_P1_1
      0023D7                       3075 00112$:
                                   3076 ;	cc1111rf.c:698: LED = 0;
      0023D7 C2 91            [12] 3077 	clr	_P1_1
      0023D9                       3078 00115$:
                                   3079 ;	cc1111rf.c:700: RFIF &= ~(RFIF_IRQ_DONE | RFIF_IRQ_TIMEOUT);        // OVF needs to be handled next...
      0023D9 AF E9            [24] 3080 	mov	r7,_RFIF
      0023DB 74 CF            [12] 3081 	mov	a,#0xCF
      0023DD 5F               [12] 3082 	anl	a,r7
      0023DE F5 E9            [12] 3083 	mov	_RFIF,a
      0023E0                       3084 00117$:
                                   3085 ;	cc1111rf.c:704: if(RFIF & RFIF_IRQ_RXOVF)
      0023E0 E5 E9            [12] 3086 	mov	a,_RFIF
      0023E2 30 E6 14         [24] 3087 	jnb	acc.6,00119$
                                   3088 ;	cc1111rf.c:709: lastCode[1] = LCE_RF_RXOVF;
      0023E5 90 F6 E3         [24] 3089 	mov	dptr,#(_lastCode + 0x0001)
      0023E8 74 10            [12] 3090 	mov	a,#0x10
      0023EA F0               [24] 3091 	movx	@dptr,a
                                   3092 ;	cc1111rf.c:710: LED = !LED;
      0023EB B2 91            [12] 3093 	cpl	_P1_1
                                   3094 ;	cc1111rf.c:712: resetRFSTATE();
      0023ED 12 1A 2A         [24] 3095 	lcall	_resetRFSTATE
                                   3096 ;	cc1111rf.c:714: LED = !LED;
      0023F0 B2 91            [12] 3097 	cpl	_P1_1
                                   3098 ;	cc1111rf.c:715: RFIF &= ~RFIF_IRQ_RXOVF;
      0023F2 AF E9            [24] 3099 	mov	r7,_RFIF
      0023F4 74 BF            [12] 3100 	mov	a,#0xBF
      0023F6 5F               [12] 3101 	anl	a,r7
      0023F7 F5 E9            [12] 3102 	mov	_RFIF,a
      0023F9                       3103 00119$:
                                   3104 ;	cc1111rf.c:718: if(RFIF & RFIF_IRQ_TXUNF)
      0023F9 E5 E9            [12] 3105 	mov	a,_RFIF
      0023FB 30 E7 14         [24] 3106 	jnb	acc.7,00122$
                                   3107 ;	cc1111rf.c:721: lastCode[1] = LCE_RF_TXUNF;
      0023FE 90 F6 E3         [24] 3108 	mov	dptr,#(_lastCode + 0x0001)
      002401 74 11            [12] 3109 	mov	a,#0x11
      002403 F0               [24] 3110 	movx	@dptr,a
                                   3111 ;	cc1111rf.c:722: LED = !LED;
      002404 B2 91            [12] 3112 	cpl	_P1_1
                                   3113 ;	cc1111rf.c:724: resetRFSTATE();
      002406 12 1A 2A         [24] 3114 	lcall	_resetRFSTATE
                                   3115 ;	cc1111rf.c:726: LED = !LED;
      002409 B2 91            [12] 3116 	cpl	_P1_1
                                   3117 ;	cc1111rf.c:728: RFIF &= ~RFIF_IRQ_TXUNF;
      00240B AF E9            [24] 3118 	mov	r7,_RFIF
      00240D 74 7F            [12] 3119 	mov	a,#0x7F
      00240F 5F               [12] 3120 	anl	a,r7
      002410 F5 E9            [12] 3121 	mov	_RFIF,a
      002412                       3122 00122$:
      002412 D0 D0            [24] 3123 	pop	psw
      002414 D0 00            [24] 3124 	pop	(0+0)
      002416 D0 01            [24] 3125 	pop	(0+1)
      002418 D0 02            [24] 3126 	pop	(0+2)
      00241A D0 03            [24] 3127 	pop	(0+3)
      00241C D0 04            [24] 3128 	pop	(0+4)
      00241E D0 05            [24] 3129 	pop	(0+5)
      002420 D0 06            [24] 3130 	pop	(0+6)
      002422 D0 07            [24] 3131 	pop	(0+7)
      002424 D0 83            [24] 3132 	pop	dph
      002426 D0 82            [24] 3133 	pop	dpl
      002428 D0 F0            [24] 3134 	pop	b
      00242A D0 E0            [24] 3135 	pop	acc
      00242C D0 20            [24] 3136 	pop	bits
      00242E 32               [24] 3137 	reti
                                   3138 ;------------------------------------------------------------
                                   3139 ;Allocation info for local variables in function 'byte_shuffle'
                                   3140 ;------------------------------------------------------------
                                   3141 ;len                       Allocated with name '_byte_shuffle_PARM_2'
                                   3142 ;offset                    Allocated with name '_byte_shuffle_PARM_3'
                                   3143 ;buf                       Allocated with name '_byte_shuffle_buf_1_146'
                                   3144 ;------------------------------------------------------------
                                   3145 ;	cc1111rf.c:733: void byte_shuffle(__xdata u8* __xdata buf, __xdata u16 len, __xdata u16 offset)
                                   3146 ;	-----------------------------------------
                                   3147 ;	 function byte_shuffle
                                   3148 ;	-----------------------------------------
      00242F                       3149 _byte_shuffle:
      00242F AF 83            [24] 3150 	mov	r7,dph
      002431 E5 82            [12] 3151 	mov	a,dpl
      002433 90 F6 E0         [24] 3152 	mov	dptr,#_byte_shuffle_buf_1_146
      002436 F0               [24] 3153 	movx	@dptr,a
      002437 EF               [12] 3154 	mov	a,r7
      002438 A3               [24] 3155 	inc	dptr
      002439 F0               [24] 3156 	movx	@dptr,a
                                   3157 ;	cc1111rf.c:735: while(len--)
      00243A 90 F6 DE         [24] 3158 	mov	dptr,#_byte_shuffle_PARM_3
      00243D E0               [24] 3159 	movx	a,@dptr
      00243E FE               [12] 3160 	mov	r6,a
      00243F A3               [24] 3161 	inc	dptr
      002440 E0               [24] 3162 	movx	a,@dptr
      002441 FF               [12] 3163 	mov	r7,a
      002442 90 F6 E0         [24] 3164 	mov	dptr,#_byte_shuffle_buf_1_146
      002445 E0               [24] 3165 	movx	a,@dptr
      002446 FC               [12] 3166 	mov	r4,a
      002447 A3               [24] 3167 	inc	dptr
      002448 E0               [24] 3168 	movx	a,@dptr
      002449 FD               [12] 3169 	mov	r5,a
      00244A 90 F6 DC         [24] 3170 	mov	dptr,#_byte_shuffle_PARM_2
      00244D E0               [24] 3171 	movx	a,@dptr
      00244E FA               [12] 3172 	mov	r2,a
      00244F A3               [24] 3173 	inc	dptr
      002450 E0               [24] 3174 	movx	a,@dptr
      002451 FB               [12] 3175 	mov	r3,a
      002452                       3176 00101$:
      002452 8A 00            [24] 3177 	mov	ar0,r2
      002454 8B 01            [24] 3178 	mov	ar1,r3
      002456 1A               [12] 3179 	dec	r2
      002457 BA FF 01         [24] 3180 	cjne	r2,#0xFF,00113$
      00245A 1B               [12] 3181 	dec	r3
      00245B                       3182 00113$:
      00245B E8               [12] 3183 	mov	a,r0
      00245C 49               [12] 3184 	orl	a,r1
      00245D 60 24            [24] 3185 	jz	00104$
                                   3186 ;	cc1111rf.c:736: buf[len + offset] = buf[len];
      00245F EE               [12] 3187 	mov	a,r6
      002460 2A               [12] 3188 	add	a,r2
      002461 F8               [12] 3189 	mov	r0,a
      002462 EF               [12] 3190 	mov	a,r7
      002463 3B               [12] 3191 	addc	a,r3
      002464 F9               [12] 3192 	mov	r1,a
      002465 E8               [12] 3193 	mov	a,r0
      002466 2C               [12] 3194 	add	a,r4
      002467 F8               [12] 3195 	mov	r0,a
      002468 E9               [12] 3196 	mov	a,r1
      002469 3D               [12] 3197 	addc	a,r5
      00246A F9               [12] 3198 	mov	r1,a
      00246B EA               [12] 3199 	mov	a,r2
      00246C 2C               [12] 3200 	add	a,r4
      00246D F5 82            [12] 3201 	mov	dpl,a
      00246F EB               [12] 3202 	mov	a,r3
      002470 3D               [12] 3203 	addc	a,r5
      002471 F5 83            [12] 3204 	mov	dph,a
      002473 C0 06            [24] 3205 	push	ar6
      002475 C0 07            [24] 3206 	push	ar7
      002477 E0               [24] 3207 	movx	a,@dptr
      002478 88 82            [24] 3208 	mov	dpl,r0
      00247A 89 83            [24] 3209 	mov	dph,r1
      00247C F0               [24] 3210 	movx	@dptr,a
      00247D D0 07            [24] 3211 	pop	ar7
      00247F D0 06            [24] 3212 	pop	ar6
      002481 80 CF            [24] 3213 	sjmp	00101$
      002483                       3214 00104$:
      002483 22               [24] 3215 	ret
                                   3216 	.area CSEG    (CODE)
                                   3217 	.area CONST   (CODE)
                                   3218 	.area XINIT   (CODE)
      002D01                       3219 __xinit__rfRxInfMode:
      002D01 00                    3220 	.db #0x00	; 0
      002D02                       3221 __xinit__rfRxTotalRXLen:
      002D02 00 00                 3222 	.byte #0x00,#0x00	; 0
      002D04                       3223 __xinit__rfRxLargeLen:
      002D04 00 00                 3224 	.byte #0x00,#0x00	; 0
      002D06                       3225 __xinit__rfTxCurBufIdx:
      002D06 00                    3226 	.db #0x00	; 0
      002D07                       3227 __xinit__rfTxBufCount:
      002D07 01                    3228 	.db #0x01	; 1
      002D08                       3229 __xinit__rfTxCounter:
      002D08 00 00                 3230 	.byte #0x00,#0x00	; 0
      002D0A                       3231 __xinit__rfTxRepeatCounter:
      002D0A 00 00                 3232 	.byte #0x00,#0x00	; 0
      002D0C                       3233 __xinit__rfTxBufferEnd:
      002D0C 00 00                 3234 	.byte #0x00,#0x00	; 0
      002D0E                       3235 __xinit__rfTxRepeatLen:
      002D0E 00 00                 3236 	.byte #0x00,#0x00	; 0
      002D10                       3237 __xinit__rfTxRepeatOffset:
      002D10 00 00                 3238 	.byte #0x00,#0x00	; 0
      002D12                       3239 __xinit__rfTxTotalTXLen:
      002D12 00 00                 3240 	.byte #0x00,#0x00	; 0
      002D14                       3241 __xinit__rfTxInfMode:
      002D14 00                    3242 	.db #0x00	; 0
      002D15                       3243 __xinit__rfAESMode:
      002D15 00                    3244 	.db #0x00	; 0
      002D16                       3245 __xinit__rfAmpMode:
      002D16 00                    3246 	.db #0x00	; 0
      002D17                       3247 __xinit__bRepeatMode:
      002D17 00                    3248 	.db #0x00	; 0
                                   3249 	.area CABS    (ABS,CODE)
